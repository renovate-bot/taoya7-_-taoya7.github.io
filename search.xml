<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Requests库</title>
      <link href="/2019/05/python-requests.html"/>
      <url>/2019/05/python-requests.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Requests库</p></blockquote><h3 id="Get请求"><a href="#Get请求" class="headerlink" title="Get请求"></a>Get请求</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> responseresponse <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://www.baidu.com'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#&lt;Response [200]></span><span class="token comment" spellcheck="true"># 打印状态码</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 打印请求url</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 打印头信息</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 打印cookie信息</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#以文本形式打印网页源码</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 以字节流形式打印</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 通常用于二进制 图片 音乐</span><span class="token comment" spellcheck="true"># 编码</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>encoding<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ISO-8859-1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="带参数的请求方式"><a href="#带参数的请求方式" class="headerlink" title="带参数的请求方式"></a><strong>带参数的请求方式</strong></h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token comment" spellcheck="true"># 将数据保存在一个字典中</span>data <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token string">'name'</span> <span class="token punctuation">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span>  <span class="token string">'age'</span> <span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">}</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://www.baidu.com'</span><span class="token punctuation">,</span> params<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token operator">></span> http<span class="token punctuation">:</span><span class="token operator">//</span>www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com<span class="token operator">/</span>?name<span class="token operator">=</span>张三<span class="token operator">&amp;</span>age<span class="token operator">=</span><span class="token number">19</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>网页的返回类型实际是str类型的却是json格式,所以添加json()即可转换</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requestsresponse <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://www.baidu.com'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>添加headers</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requestsheaders <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Linux; Android 8.0; Pixel 2 Build/OPD3.170816.012) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Mobile Safari/537.36'</span><span class="token punctuation">}</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.zhihu.com/'</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>抓取二进制文件</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requestsr <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com/img/bd_logo1.png?qua=high'</span><span class="token punctuation">)</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'logo.jpg'</span><span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>r<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 这样就会抓取下百度的logo</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Post请求"><a href="#Post请求" class="headerlink" title="Post请求"></a>Post请求</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requestsdata <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'tom'</span><span class="token punctuation">,</span>    <span class="token string">'age'</span><span class="token punctuation">:</span><span class="token string">'22'</span><span class="token punctuation">}</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'http://httpbin.org/post'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Ip代理"><a href="#Ip代理" class="headerlink" title="Ip代理"></a>Ip代理</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requestsheaders <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'user-agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36'</span><span class="token punctuation">}</span>proxy <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'http'</span><span class="token punctuation">:</span> <span class="token string">'120.25.253.234:812'</span><span class="token punctuation">,</span>        <span class="token string">'https'</span> <span class="token string">'163.125.222.244:8123'</span>    <span class="token punctuation">}</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">,</span>proxies<span class="token operator">=</span>proxy<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requestsresponse <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://www.baidu.com'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;RequestsCookieJar[&lt;Cookie BDORZ=27315 for .baidu.com/>]></span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>response<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;class 'requests.cookies.RequestsCookieJar'></span>run_cookie <span class="token operator">=</span> response<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get_dict<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># kookie转换</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>run_cookie<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;class 'dict'></span><span class="token keyword">print</span><span class="token punctuation">(</span>run_cookie<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># {'BDORZ': '27315'}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requestsfiles <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'file'</span><span class="token punctuation">,</span> open<span class="token punctuation">(</span><span class="token string">'logo.jpg'</span><span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'http://www.baidu.com'</span><span class="token punctuation">,</span> files<span class="token operator">=</span>files<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="会话维持"><a href="#会话维持" class="headerlink" title="会话维持"></a>会话维持</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requestss <span class="token operator">=</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://www.baidu.com'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 这样就会保持会话维持</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="超时设置"><a href="#超时设置" class="headerlink" title="超时设置"></a>超时设置</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requestsresponse <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://www.baidu.com'</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Selenium</title>
      <link href="/2019/05/selenium.html"/>
      <url>/2019/05/selenium.html</url>
      
        <content type="html"><![CDATA[<h1 id="Selenium"><a href="#Selenium" class="headerlink" title="Selenium"></a>Selenium</h1><p>自动化测试工具，支持多种浏览器，爬虫中主要用来解决JavaScript渲染的问题.</p><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>keys <span class="token keyword">import</span> Keys<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support <span class="token keyword">import</span> expected_conditions <span class="token keyword">as</span> EC<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support<span class="token punctuation">.</span>wait <span class="token keyword">import</span> WebDriverWaitbrowser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://www.baidu.com'</span><span class="token punctuation">)</span>    input <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'kw'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#寻找元素</span>    input<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">'Python'</span><span class="token punctuation">)</span>    input<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>Keys<span class="token punctuation">.</span>ENTER<span class="token punctuation">)</span>    wait <span class="token operator">=</span> WebDriverWait<span class="token punctuation">(</span>browser<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>    wait<span class="token punctuation">.</span>until<span class="token punctuation">(</span>EC<span class="token punctuation">.</span>presence_of_element_located<span class="token punctuation">(</span><span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span><span class="token string">'content_left'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>browser<span class="token punctuation">.</span>current_url<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#打印访问的URL</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>browser<span class="token punctuation">.</span>get_cookies<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#打印cookie信息</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    browser<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="声明浏览器对象"><a href="#声明浏览器对象" class="headerlink" title="声明浏览器对象"></a>声明浏览器对象</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> WebDriverWaitdriver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>FireFox<span class="token punctuation">(</span><span class="token punctuation">)</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Edge<span class="token punctuation">(</span><span class="token punctuation">)</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>PhantomJS<span class="token punctuation">(</span><span class="token punctuation">)</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Safari<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="访问页面"><a href="#访问页面" class="headerlink" title="访问页面"></a>访问页面</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriverdriver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://www.taobao.com'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>driver<span class="token punctuation">.</span>page_source<span class="token punctuation">)</span>driver<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>get()方法可以访问页面</li></ul><h3 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h3><p><strong>单个元素</strong></p><pre class="line-numbers language-python"><code class="language-python">driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'kw'</span><span class="token punctuation">)</span>driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span><span class="token string">'KW'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="常用的查找元素的方法"><a href="#常用的查找元素的方法" class="headerlink" title="常用的查找元素的方法"></a>常用的查找元素的方法</h4><ul><li>find_element_by_name</li><li>find_element_by_id</li><li>find_element_by_xpath</li><li>find_element_by_link_text</li><li>find_element_by_partial_link_text</li><li>find_element_by_tag_name</li><li>find_element_by_class_name</li><li>find_element_by_css_selector #通过CSS选择器</li></ul><p><strong>多个元素</strong></p><ul><li>find_elements_by_name</li><li>find_elements_by_xpath</li></ul><h3 id="常用的方法"><a href="#常用的方法" class="headerlink" title="常用的方法"></a>常用的方法</h3><ul><li>driver.get() 方法会打开请求的URL</li><li>driver.page_source 打印网站的源码</li><li>driver.click() 会点击按钮</li><li>driver.implicitly_wait(30) 智能等待30s</li><li>driver.quit()   全部关闭</li><li>driver.close()  当前窗口关闭</li><li>refresh() 刷新当前页面</li></ul><blockquote><h3 id="元素交互"><a href="#元素交互" class="headerlink" title="元素交互"></a>元素交互</h3></blockquote><ul><li>send_keys(str) #输入内容</li><li>click() #点击</li><li>clear() #清除文本框</li></ul><blockquote><h3 id="获取ID，位置，标签名"><a href="#获取ID，位置，标签名" class="headerlink" title="获取ID，位置，标签名"></a>获取ID，位置，标签名</h3></blockquote><p>打开百度首页 然后找到搜索框</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriverbrowser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>url <span class="token operator">=</span> <span class="token string">'https://www.baidu.com'</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#找到输入框的元素</span>input <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'kw'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span>location<span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span>tag_name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token number">0.6769866408286407</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">{</span><span class="token string">'x'</span><span class="token punctuation">:</span> <span class="token number">206</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">:</span> <span class="token number">231</span><span class="token punctuation">}</span>input<span class="token punctuation">{</span><span class="token string">'height'</span><span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">'width'</span><span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><h3 id="获取文本值"><a href="#获取文本值" class="headerlink" title="获取文本值"></a>获取文本值</h3></blockquote><p>打印知乎”提问“按钮的文本</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriverbrowser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>url <span class="token operator">=</span> <span class="token string">'https://www.zhihu.com/explore'</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>input <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element_by_class_name<span class="token punctuation">(</span><span class="token string">'zu-top-add-question'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>text() 获取文本值</li></ul><blockquote><h3 id="获取元素的属性"><a href="#获取元素的属性" class="headerlink" title="获取元素的属性"></a>获取元素的属性</h3></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriverbrowser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>url <span class="token operator">=</span> <span class="token string">'https://www.zhihu.com/explore'</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>logo <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'zh-top-link-logo'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>logo<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>logo<span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>get_attribute()获取属性 </li></ul><blockquote><h3 id="执行JavaScript"><a href="#执行JavaScript" class="headerlink" title="执行JavaScript"></a>执行JavaScript</h3></blockquote><p>用js打开一个网站</p><pre class="line-numbers language-python"><code class="language-python">win <span class="token operator">=</span> <span class="token string">"window.open('http://www.baidu.com')"</span>driver<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span>win<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>下拉进度条</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> WebDriverdriver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://www.zhihu.com/explore'</span><span class="token punctuation">)</span>driver<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'window.scrollto(0,document.body.scrollHeight)'</span><span class="token punctuation">)</span>driver<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'alert("Boon!")'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><h3 id="窗口之间的切换"><a href="#窗口之间的切换" class="headerlink" title="窗口之间的切换"></a>窗口之间的切换</h3></blockquote><pre class="line-numbers language-python"><code class="language-python">handles <span class="token operator">=</span> self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>window_handlesself<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>window<span class="token punctuation">(</span>handles<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>获取当前窗口句柄集合 browser.window_handles</li></ul><blockquote><h3 id="键盘操作"><a href="#键盘操作" class="headerlink" title="键盘操作"></a>键盘操作</h3></blockquote><ul><li><p>导入 from selenium.webdriver.common.keys import Keys</p></li><li><p>组合键盘</p><ul><li><p>send_keys(Keys.CONTROL,’a’) #全选（Ctrl+A）</p></li><li><p>send_keys(Keys.CONTROL,’c’) #复制（Ctrl+C）</p></li><li><p>send_keys(Keys.CONTROL,’x’) #剪切（Ctrl+X）</p></li><li><p>send_keys(Keys.CONTROL,’v’) #粘贴（Ctrl+V）</p></li></ul></li><li><p>常用键</p><ul><li><p>回车键 Keys.ENTER</p></li><li><p>删除键 Keys.BACK_SPACE</p></li><li><p>空格键 Keys.SPACE</p></li><li><p>制表键 Keys.TAB</p></li><li><p>回退键 Keys.ESCAPE</p></li><li><p>刷新键 Keys.F5</p></li></ul></li></ul><blockquote><h3 id="等待"><a href="#等待" class="headerlink" title="等待"></a>等待</h3></blockquote><p><strong>隐式等待</strong></p><ul><li>driver.implicitly_wait(10)</li></ul><p><strong>显式等待</strong></p><pre><code>from selenium import webdriverfrom selenium.webdriver.common.by import Byfrom selenium.webdriver.support import expected_conditions as ECfrom selenium.webdriver.support.wait import WebDriverWait</code></pre><ul><li>title_is 标题是否是某内容</li><li>title_contains 标题包含某内容</li><li>presence_of_element_located 元素加载出，传入定位元祖 如（By.ID,’p’）</li><li>visibility_of_element_located 元素可见，传入定位元组</li><li>text_to_be_present_in_element 某个元素文本包含某文字</li><li>text_to_be_present_in_element_value 某个元素值包含某文字</li></ul><blockquote><h3 id="前进后退"><a href="#前进后退" class="headerlink" title="前进后退"></a>前进后退</h3></blockquote><ul><li><p>driver.back()</p></li><li><p>driver.forward()</p></li></ul><blockquote><h3 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h3></blockquote><ul><li><p>get_cookies() #获取cookies</p></li><li><p>add_cookie() #增加cookie</p></li><li><p>delete_all_cookies() #删除所有cookies</p></li></ul><blockquote><h3 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h3></blockquote><p>桌面保存一张百度首页的截图，图片后缀是png。注意路径是要两个\</p><ul><li><p>save_screenshot()  截取整个窗口</p></li><li><p>save_screenshot_as_file()_</p></li><li><p>screenshot()  元素截图</p></li></ul><pre><code>import timefrom selenium import webdriverdriver = webdriver.Chrome()driver.maximize_window() #最大化driver.implicitly_wait(6)driver.get(&quot;http://www.itaolaity.com&quot;)time.sleep(1)driver.get_screenshot_as_file(&quot;C:\\Users\\Tahi\\Desktop\\baidu.png&quot;) #截图并保存driver.quit()</code></pre><p>注意：只能对当前窗口截屏</p><blockquote><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>common<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> TimeoutException<span class="token punctuation">,</span> NoSuchElementExceptiondriver<span class="token operator">=</span>webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://www.itaolaity.com'</span><span class="token punctuation">)</span><span class="token keyword">except</span> TimeoutException<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Time.Out'</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">)</span><span class="token keyword">except</span> NoSuchElementException<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'No Element'</span><span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    driver<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> WebDriverproxy <span class="token operator">=</span> <span class="token string">'127.0.0.1:6666'</span>chrome_options <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>ChromeOptions<span class="token punctuation">(</span><span class="token punctuation">)</span>Chrome_options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--proxy-server=http://'</span><span class="token operator">+</span>proxy<span class="token punctuation">)</span>driver <span class="token operator">=</span> WebDriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>chrome_options<span class="token operator">=</span>chrome_options<span class="token punctuation">)</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://www.baidu.com'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Servlet</title>
      <link href="/2019/05/servlet.html"/>
      <url>/2019/05/servlet.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-第一个程序"><a href="#1-第一个程序" class="headerlink" title="#1.第一个程序"></a>#1.第一个程序</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*编写字节码文件*/</span><span class="token keyword">package</span> Unit1<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>Servlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletConfig<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">a_ServerletDemo</span> <span class="token keyword">implements</span> <span class="token class-name">Servlet</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String HttpServletResponse <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*         * 销毁时调用         * */</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ServletConfig <span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getServletInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>ServletConfig config<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*         * 创建Servlet调用         * */</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span>ServletRequest req<span class="token punctuation">,</span> ServletResponse res<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Browser: I send you a message!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//打印终端</span>        <span class="token comment" spellcheck="true">/*         * 每一次发送请求的时候就会调用         * */</span>        HttpServletResponse resp <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletResponse<span class="token punctuation">)</span>res<span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;h1>Server:I send a message&lt;/h1>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回信息到浏览器</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- #添加映射 --></span><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/javaee<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>WebApp_ID<span class="token punctuation">"</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2.5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>display-name</span><span class="token punctuation">></span></span>FirstTry<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>display-name</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 自定义信息 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>Tashi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>Unit1.a_ServerletDemo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>Tashi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/d<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file-list</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>index.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>index.htm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>index.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>default.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>default.htm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>default.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file-list</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-获取字节码文件"><a href="#2-获取字节码文件" class="headerlink" title="#2.获取字节码文件"></a>#2.获取字节码文件</h3><pre class="line-numbers language-java"><code class="language-java">Class <span class="token class-name">c</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"获取字节码.Person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>Class <span class="token class-name">c2</span> <span class="token operator">=</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span>Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Class <span class="token class-name">c3</span> <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c3<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-通过字节码创建对象"><a href="#3-通过字节码创建对象" class="headerlink" title="#3.通过字节码创建对象"></a>#3.通过字节码创建对象</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span><span class="token punctuation">{</span>    Class <span class="token class-name">c</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Person p <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span>c<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//调用P的show方法</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//2. 通过有参的构造器来创建对象</span>        Constructor ah <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Person p <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span>ah<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"鲁班"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-获取字段"><a href="#4-获取字段" class="headerlink" title="#4.获取字段"></a>#4.获取字段</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Constructor<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token keyword">throws</span>  Exception<span class="token punctuation">{</span>        Class <span class="token class-name">c</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"获取字节码.Person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/*获取公共字段*/</span>            <span class="token comment" spellcheck="true">//1.获取字节码  必须设置public 才可以</span>            Person per <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span>c<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Field f <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            f<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>per<span class="token punctuation">,</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            per<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/*获取私有字段*/</span>            Person per <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span>c<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//暴力反射获取字段</span>            Field f <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//去除私有权限</span>            f<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            f<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>per<span class="token punctuation">,</span> <span class="token number">666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            per<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-获取方法"><a href="#5-获取方法" class="headerlink" title="#5.获取方法"></a>#5.获取方法</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token keyword">throws</span>  Exception<span class="token punctuation">{</span>        Class <span class="token class-name">c</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"获取字节码.Person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/*获取公共方法*/</span>            Person per <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span>c<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Method m <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"show"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取方法</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//打印方法名字</span>            m<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>per<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//执行方法  参数传入对象</span>        <span class="token punctuation">}</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/*获取私有方法*/</span>            Person p <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span>c<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Method m <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"temp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><p>Servlet是一个基于Java技术的Web组件，运行在服务端</p><h2 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet生命周期</h2><ul><li>装载</li><li>创建实例</li><li>调用init方法<code>init()</code></li><li>服务<code>service()</code></li><li>销毁<code>destory()</code></li></ul><h3 id="注解的方式创建servlet"><a href="#注解的方式创建servlet" class="headerlink" title="#注解的方式创建servlet"></a>#注解的方式创建servlet</h3><p><code>src</code> -&gt; <code>new</code> -&gt; <code>Servlet</code></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>WebServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/Demo"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Get Message"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// http://localhost:8080/Demo</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="doGet与doPost"><a href="#doGet与doPost" class="headerlink" title="#doGet与doPost"></a>#<code>doGet</code>与<code>doPost</code></h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//每次请求的时候就会调用此方法</span>    <span class="token comment" spellcheck="true">// 注意：一但写了service就不会去找doGet与doPost</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//get请求会调用这个方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Get请求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//post请求会调用这个方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Post请求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>内部原理</strong></p><p><code>HttpServlet</code>是专门负责处理http请求与响应的。<code>HttpServlet</code>接口 继承<code>GenericServlet</code>接口 继承 <code>Servlet</code>接口</p><p>当收到一个请求的时候，就会找到<code>service</code>方法,如果不存在就会在它的父类中找，强制转换<code>httpServlet</code>,获取请求的方式，然后调用<code>get</code>还是<code>post</code></p><ul><li><strong>1.获取请求参数</strong></li></ul><p><code>req.getParameter(&quot;userName&quot;);</code></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>    String mesg <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"mesg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取前端的表单</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mesg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="ServletContext"><a href="#ServletContext" class="headerlink" title="#ServletContext"></a>#ServletContext</h1><hr><p>WEB应用的上下文对象</p><ul><li><strong>生命周期</strong></li></ul><p>服务器创建与服务器关闭</p><ul><li><strong>如何获取</strong></li></ul><blockquote><p>全局初始化参数</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ServletContext sc <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ServletContext context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>获取绝对地址</p></blockquote><p><code>String str = context.getRealPath(&#39;filePath &#39;);</code></p><h1 id="响应response"><a href="#响应response" class="headerlink" title="#响应response"></a>#响应<code>response</code></h1><p>设置响应行|响应头|响应体</p><ul><li><p>设置响应行</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 设置状态码</span>      resp<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>设置响应头</p><ul><li><code>add</code>设置<ul><li><code>addHeader(String name, String value);</code></li><li><code>addIntHeader(String name, int value);</code></li><li><code>addDateHeader(String name, date);</code></li></ul></li><li><code>set</code>修改<ul><li><code>setHeader(&quot;Name&quot;, &quot;LLE&quot;);</code></li></ul></li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 设置状态码</span>    resp<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置响应头</span>    resp<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">"Name"</span><span class="token punctuation">,</span> <span class="token string">"Tashi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resp<span class="token punctuation">.</span><span class="token function">addIntHeader</span><span class="token punctuation">(</span><span class="token string">"Age"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resp<span class="token punctuation">.</span><span class="token function">addDateHeader</span><span class="token punctuation">(</span><span class="token string">"Birthday"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>重定向</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 设置响应头</span>resp<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">302</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 设置响应头</span>resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"location"</span><span class="token punctuation">,</span> <span class="token string">"/book"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">resp<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"/book"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>定时刷新重定向</li></ul><pre class="line-numbers language-java"><code class="language-java">resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"refresh"</span><span class="token punctuation">,</span> <span class="token string">"3;url=/book"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>设置相应体<ul><li>通过<code>writter</code>方法</li><li>通过<code>OutPutStream</code>来写</li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 如果有html标签会自动解析</span> <span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>    resp<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"text/html;charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//或者 resp.setContentType("text/html;charset=UTF-8");</span>    resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;h1>Yo!啊哈&lt;/h1>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"> <span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>    String path <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"index.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//加载文件</span>    FileInputStream in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    ServletOutputStream out <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输出流</span>    <span class="token comment" spellcheck="true">//获取字节码</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token operator">=</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 写给浏览器</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//关闭输入流</span>    in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="请求request"><a href="#请求request" class="headerlink" title="#请求request"></a>#请求<code>request</code></h1><p><strong>设置编码格式</strong><code>req.setCharacterEncoding(&quot;UTF-8&quot;);</code></p><ul><li>获取请求行<pre class="line-numbers language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//请求的方法</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">getRequestURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//请求的URL</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//请求的URI</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">getQueryString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//请求的参数</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 请求当前的Web应用名称</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>获取请求头的名称</p><pre class="line-numbers language-java"><code class="language-java">Enumeration<span class="token operator">&lt;</span>String<span class="token operator">></span> headerNames <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getHeaderNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>headerNames<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  String name <span class="token operator">=</span> headerNames<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"\t"</span><span class="token operator">+</span> req<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>获取请求体</p></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//请求一个</span>String str1 <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"Fruit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//请求多个</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> str2 <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameterValues</span><span class="token punctuation">(</span><span class="token string">"Fruit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//请求所有参数名称</span>Enumeration<span class="token operator">&lt;</span>String<span class="token operator">></span> parameterNames <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameterNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>parameterNames<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    String name <span class="token operator">=</span> parameterNames<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//获取所有参数值</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> parameterMap <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span>entry<span class="token operator">:</span> parameterMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="请求转发与重定向"><a href="#请求转发与重定向" class="headerlink" title="#请求转发与重定向"></a>#请求转发与重定向</h3><ul><li>1.获取转发器<code>req.getRequestDispatcher(&#39;path&#39;)</code></li><li>2.转发<code>disp.forward(request,response)</code></li></ul><h1 id="Demo"><a href="#Demo" class="headerlink" title="#Demo"></a>#Demo</h1><ul><li>文件下载</li></ul><pre class="line-numbers language-java"><code class="language-java"> <span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//接收参数</span>    String  name <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"Main.mp4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String mType <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMimeType</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span>mType<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置类型</span>    resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition"</span><span class="token punctuation">,</span> <span class="token string">"attachment;filename="</span><span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//告诉浏览器以附件形式</span>    <span class="token comment" spellcheck="true">//获取文件路径</span>    String path <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"Download/"</span><span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取响应的输出</span>    ServletOutputStream out <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//加载文件</span>    FileInputStream in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache服务器配置</title>
      <link href="/2019/05/apache-fu-wu-qi-pei-zhi.html"/>
      <url>/2019/05/apache-fu-wu-qi-pei-zhi.html</url>
      
        <content type="html"><![CDATA[<h1 id="配置Java环境"><a href="#配置Java环境" class="headerlink" title="配置Java环境"></a>配置Java环境</h1><ol><li><p>解压安装JDK</p><pre><code>tar -zxvf 压缩包</code></pre></li><li><p>配置环境变量</p><pre><code>export JAVA_HOME=/home/admin/java/jdk1.8export PATH=$JAVA_HOME/bin:$PATH export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar </code></pre></li><li><p>更新</p></li></ol><pre><code>source /etc/profile</code></pre><h1 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h1><p>1、配置文件：</p><pre><code>/etc/httpd/conf/httpd.conf /etc/httpd/conf.d/*.conf</code></pre><p>2、服务脚本：</p><pre><code>/etc/rc.d/init.d/httpd 配置文件：/etc/sysconfig/httpd</code></pre><p>3、主程序文件：</p><pre><code>/usr/sbin/httpd /usr/sbin/httpd.event /usr/sbin/httpd.worker</code></pre><p>4、日志文件目录：：</p><pre><code>/var/log/httpd -&gt; access_log: 访问日志 -&gt; error_log：错误日志</code></pre><p>5、站点文档目录：</p><pre><code>/var/www/html</code></pre><p>6、模块文件路径：</p><pre><code>/usr/lib64/httpd/modules</code></pre><p>7、配置文件的组成：</p><pre><code>~]# grep “Section” /etc/httpd/conf/httpd.conf ### Section 1: Global Environment ### Section 2: ‘Main’ server configuration ### Section 3: Virtual Hosts</code></pre><p>8、配置格式：</p><pre><code>directive value directive：不区分字符大小写 value：为路径时，取决于文件系统</code></pre><h3 id="服务器搭建"><a href="#服务器搭建" class="headerlink" title="服务器搭建"></a>服务器搭建</h3><ol><li>编辑一下配置文件</li></ol><pre><code>##ServerName www.example.com:80ServerName localhost:80## UseCanonicalName: Determines how Apache constructs self-referencing </code></pre><ol start="2"><li>启动httpd服务</li></ol><pre><code>service httpd restart</code></pre><ol start="3"><li>修改监听端口</li></ol><pre><code>Listen 80Listen 127.0.0.1:8080</code></pre><ol start="4"><li>添加HTML文件</li></ol><pre><code>touch /var/www/html/index.html</code></pre><ol start="5"><li>打开浏览器访问<code>127.0.0.1</code></li></ol><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><blockquote><p>修改家目录</p></blockquote><p>打开<code>UserDir disabled</code>,<code>UserDir public_html</code> 将前面的#去掉</p><p>默认的网站数据保存在/var/www/html目录中如果修改目录需要在配置文件中将<code>DocumentRoot &quot;/var/www/html&quot;</code> 修改成自己的目录即可</p><p><strong>注意</strong></p><p>我将家目录修改成了/home里的目录造成打不开。这是因为SELinux服务</p><pre><code>setenforce 0getenforce&gt;&gt;&gt; Permissive</code></pre><blockquote><p>　口令验证</p></blockquote><p>添加账户与密码</p><p>htpasswd</p><p>-c: 自动创建passwordfile，因此，仅应该在添加第一个用户时使用；<br>-m: md5加密用户密码；<br>-s: sha1加密用户密码；<br>-D: 删除指定用户</p><pre><code>htpasswd -c /etc/httpd/passwd tao</code></pre><p>打开配置文件，进行修改</p><pre><code>&lt;Directory &quot;/var/www/html&quot;&gt;    AllowOverride all    # 生成出来的密码验证文件保存路径    authuserfile &quot;/etc/httpd/passwd&quot;    # 当用户尝试访问个人用户网站时的提示信息    authname &quot;My privately website&quot;    authtype basic    # 用户进行账户密码登录时需要验证的用户名称    require user tao&lt;/Directory&gt;</code></pre><h3 id="虚拟主机"><a href="#虚拟主机" class="headerlink" title="虚拟主机"></a>虚拟主机</h3><p>有三种方法</p><ol><li>基于ip</li><li>基于port</li><li>基于hostname</li></ol><blockquote><p>基于IP</p></blockquote><ol><li>首先把配置文件的DocumentRoot注释</li><li>配置文件添加主机参数</li></ol><pre><code>&lt;VirtualHost 192.168.126.128&gt;    ServerName &quot;www.001.com&quot;    DocumentRoot &quot;/var/www/html/001&quot;&lt;/VirtualHost&gt;</code></pre><blockquote><p>基于HostName</p></blockquote><ol><li>去掉配置文件中NameVirtualHost的注释</li></ol><p>在html目录下创建三个文件 里面有各自的index目录.然后在配置文件添加三个<br>各自的虚拟主机参数</p><pre><code>&lt;VirtualHost 192.168.126.128:80&gt;    ServerName sample001.com    DocumentRoot &quot;/var/www/html/001&quot;&lt;/VirtualHost&gt;&lt;VirtualHost 192.168.126.128:80&gt;    ServerName sample002.com    DocumentRoot &quot;/var/www/html/002&quot;&lt;/VirtualHost&gt;&lt;VirtualHost 192.168.126.128:80&gt;    ServerName sample003.com    DocumentRoot &quot;/var/www/html/003&quot;&lt;/VirtualHost&gt;</code></pre><ol start="2"><li>添加解析内容到 /etc/hosts文件中</li></ol><blockquote><p>端口号</p></blockquote><p>基于端口号的虚拟主机功能可以让用户通过指定的端口号来访问服务器上的网站资源。一般来说，使用80、443、8080等端口号来提供网站访问服务。</p><p>配置文件</p><pre><code>1、 添加监听端口Listen 9001Listen 9002Listen 90032. 追加写入两个基于端口号的虚拟主机网站参数&lt;VirtualHost 192.168.126.128:9001&gt;    DocumentRoot &quot;/var/www/html/001&quot;    ServerName sample.com&lt;/VirtualHost&gt;&lt;VirtualHost 192.168.126.128:9002&gt;    DocumentRoot &quot;/var/www/html/002&quot;    ServerName sample.com&lt;/VirtualHost&gt;&lt;VirtualHost 192.168.126.128:9003&gt;    DocumentRoot &quot;/var/www/html/003&quot;    ServerName sample.com&lt;/VirtualHost&gt;</code></pre><ol start="3"><li>访问</li></ol><h5 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h5><ol><li>如果访问主机的时候在后边加上server-status可以查看本机服务器的状态页面</li></ol><p>需要在配置文件中，允许本地网段访问</p><pre class="line-numbers language-xml"><code class="language-xml">&lt;Location /server-status>    SetHandler server-status    Order deny,allow    Deny from all    Allow from 192.168.126.128<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Location</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.oschina.net/" target="_blank" rel="noopener">https://www.oschina.net/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebPack打包工具</title>
      <link href="/2019/05/webpack-da-bao-gong-ju.html"/>
      <url>/2019/05/webpack-da-bao-gong-ju.html</url>
      
        <content type="html"><![CDATA[<h1 id="WebPack"><a href="#WebPack" class="headerlink" title="WebPack"></a>WebPack</h1><p>是一个资源加载打包工具</p><p><strong>使用</strong></p><pre><code>npm -g 全局安装（C:\Users\Administrator\AppData\Roaming\npm）npm install &lt;Model Name&gt; 本地安装</code></pre><pre><code>//安装npm install webpack -gnpm install webpack-cli -g//使用npx webpack main.js </code></pre><p><strong>本地安装-不同文件不同版本号</strong></p><pre><code>npm init -ynpm install webpack@4.13.5 -Dnpx webpack </code></pre><h5 id="模块打包工具"><a href="#模块打包工具" class="headerlink" title="模块打包工具"></a>模块打包工具</h5><p>分析项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其转换和打包为合适的格式供浏览器使用</p><h5 id="模块配置文件"><a href="#模块配置文件" class="headerlink" title="模块配置文件"></a>模块配置文件</h5><p><strong>创建</strong></p><p><code>touch webpack.config.js</code></p><p><strong>进行配置</strong></p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//引入核心模块</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    mode<span class="token punctuation">:</span><span class="token string">'production'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//development | production</span>    entry<span class="token punctuation">:</span><span class="token punctuation">{</span>        main<span class="token punctuation">:</span><span class="token string">'./src/index.js'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//入口文件</span>    output<span class="token punctuation">:</span><span class="token punctuation">{</span>        filename<span class="token punctuation">:</span><span class="token string">"bundle.js"</span><span class="token punctuation">,</span>        path<span class="token punctuation">:</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'dist'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后只要在html中引入<code>./bundle.js</code>就可以了</p>]]></content>
      
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> 工具的使用 </tag>
            
            <tag> WebPack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-文件系统</title>
      <link href="/2019/05/linux-wen-jian-xi-tong.html"/>
      <url>/2019/05/linux-wen-jian-xi-tong.html</url>
      
        <content type="html"><![CDATA[<h1 id="文件的表示"><a href="#文件的表示" class="headerlink" title="文件的表示"></a>文件的表示</h1><p><code>ls</code></p><p><img src="/2019/05/linux-wen-jian-xi-tong/1558192008545.png" alt></p><p>10位字符表示</p><p>0-确定文件类型</p><p>1-3 确定文件的所有者的权限</p><p>4-6 确定文件的同一组的权限</p><p>7-9 确定文件的其他用户的权限</p><ul><li>0字符 确定了文件的类型(目录|文件|链接)<ul><li>[d]目录</li><li>[-]文件</li><li>[l]链接文档</li><li>[b]接口设备</li><li>[c]串行设备</li></ul></li><li>r可读</li><li>w可写</li><li>x可执行</li></ul><p>r,w,x 分别也可以用数字4，2，1表示</p><ul><li>表示没有权限</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Samba服务实验</title>
      <link href="/2019/05/samba-fu-wu-shi-yan.html"/>
      <url>/2019/05/samba-fu-wu-shi-yan.html</url>
      
        <content type="html"><![CDATA[<h1 id="Samba服务器"><a href="#Samba服务器" class="headerlink" title="Samba服务器"></a>Samba服务器</h1><p>Samba服务程序现在已经成为在Linux系统与Windows系统之间共享文件的最佳选择</p><p><strong>安装</strong></p><p>查看是否安装</p><p><code>rpm -qa|grep samba</code></p><pre><code>[admin@localhost 桌面]$ rpm -qa|grep sambasamba4-pidl-4.0.0-55.el6.rc4.i686samba-common-3.6.9-151.el6.i686samba-winbind-clients-3.6.9-151.el6.i686samba-winbind-3.6.9-151.el6.i686</code></pre><p><code>yum install samba</code></p><h2 id="配置文件参数"><a href="#配置文件参数" class="headerlink" title="配置文件参数"></a>配置文件参数</h2><p><code>cat /etc/samba/smb.conf</code></p><p>配置文件包括全局配置参数和区域配置参数。全局配置参数用于设置整体的资源共享环境，对里面的每一个独立的共享资源都有效。区域配置参数则用于设置单独的共享资源，且仅对该资源有效。</p><p>查看一下这个配置参数</p><pre><code>[global]    workgroup = SAMBA #工作组名称    security = user     #安全验证的方式，总共有4种    passdb backend = tdbsam     #定义用户后台的类型，共有3种    printing = cups    printcap name = cups    load printers = yes    #设置在Samba服务启动时是否共享打印机设备    cups options = raw    #打印机的选项[homes]    comment = Home Directories    valid users = %S, %D%w%S    browseable = No    read only = No    inherit acls = Yes[printers]    comment = All Printers    path = /var/tmp    printable = Yes    create mask = 0600    browseable = No[print$]    comment = Printer Drivers    path = /var/lib/samba/drivers    write list = @printadmin root    force group = @printadmin    create mask = 0664    directory mask = 0775</code></pre><blockquote><p>共享文件设置参数</p></blockquote><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>[database]</td><td>共享名称为database</td></tr><tr><td>comment = Do not arbitrarily modify the database file</td><td>警告用户不要随意修改数据库</td></tr><tr><td>path = /home/database</td><td>共享目录为/home/database</td></tr><tr><td>public = no</td><td>关闭“所有人可见</td></tr><tr><td>writable = yes</td><td>允许写入操作</td></tr><tr><td>create mask = 0700</td><td>#创建的文件权限为700</td></tr><tr><td>directory mode = 0700</td><td>#创建的文件目录为 700</td></tr></tbody></table><blockquote><p>添加Samba账户</p></blockquote><p><strong>注意</strong></p><p>创建samba用户必须创建系统用户，系统用户和samba用户名一样，但密码可以设置成不一样</p><pre><code>useradd test01passwd test01smbpasswd -a test01</code></pre><p>smbpasswd命令的常用方法</p><ul><li>smbpasswd -a 增加用户（要增加的用户必须以是系统用户）</li><li>smbpasswd -d 冻结用户，就是这个用户不能在登录了</li><li>smbpasswd -e 恢复用户，解冻用户，让冻结的用户可以在使用</li><li>smbpasswd -n 把用户的密码设置成空.要在global中写入 null passwords -true</li><li>smbpasswd -x  删除用户</li></ul><h2 id="samba软件结构"><a href="#samba软件结构" class="headerlink" title="samba软件结构"></a>samba软件结构</h2><ul><li>/etc/samba/smb.conf（#samba服务的主要配置文件）</li><li>/etc/samba/lmhosts（#samba服务的域名设定，主要设置IP地址对应的域名，类似linux系统的/etc/hosts）</li><li>/etc/samba/smbusers （#samba服务设置samba虚拟用户的配置文件）</li><li>/var/log/samba （#samab服务存放日志文件）</li><li>/var/lib/samba/private/{passdb.tdb,secrets.tdb}（#存放samba的用户账号和密码数据库文档）</li></ul><h2 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h2><ul><li>/etc/init.d/iptables stop</li><li>chkconfig –list iptables    </li><li>chkconfig iptables off （#关闭防火墙开机自动启动）</li></ul><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p><strong>安装</strong></p><p>yum install samba</p><p><strong>创建共享目录</strong></p><p>mkdir /home/admin/share</p><p>sudu chmod 777 /home/admin/share</p><p><strong>创建Samba配置</strong></p><p>sudo cp /etc/samba/smb.conf /etc/samba/smb.conf.bak</p><p>vim /etc/samba/smb.conf</p><p>添加</p><pre><code>[share] #共享参数    path = /home/admin/share    public = yes    writable = yes #定义是否可以执行写入操作    create mask = 0777    directory mask = 0777    force user = nobody    force group = nogroup    available = yes    browseable = yes #指定共享信息是否在“网上邻居”中可见</code></pre><p><strong>创建SMB账户</strong></p><p>sudo touch /etc/samba/smbpasswd</p><p>useradd TT</p><p>sudo smbpasswd -a TT</p><p><strong>重启服务</strong></p><p>sudo /etc/init.d/smb restart</p><h2 id="出现的问题"><a href="#出现的问题" class="headerlink" title="出现的问题"></a>出现的问题</h2><blockquote><p>课堂上虚拟机与主机ping不同。</p></blockquote><blockquote><p>init.d启动找不到samba</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.linuxprobe.com/chapter-12.html" target="_blank" rel="noopener">https://www.linuxprobe.com/chapter-12.html</a></p><p><a href="https://www.cnblogs.com/colinsupport/articles/9646994.html" target="_blank" rel="noopener">https://www.cnblogs.com/colinsupport/articles/9646994.html</a></p><p><a href="https://www.cnblogs.com/zoulongbin/p/7216246.html" target="_blank" rel="noopener">https://www.cnblogs.com/zoulongbin/p/7216246.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-总结</title>
      <link href="/2019/05/spring-zong-jie.html"/>
      <url>/2019/05/spring-zong-jie.html</url>
      
        <content type="html"><![CDATA[<p>Spring 是一个轻量级的控制反转（IOC）和面向切面（AOP）的容器框架。</p><p>Spring是一个从实际开发中抽取出来的框架，因此完成了大量开发中通用的步骤</p><h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><ol><li>Spring的安装配置</li><li>Spring应用的步骤</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-事务</title>
      <link href="/2019/05/spring-shi-wu.html"/>
      <url>/2019/05/spring-shi-wu.html</url>
      
        <content type="html"><![CDATA[<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p>如果一组处理的步骤或者全部发生或者一步也不执行，则称该组处理步骤为一个事务。</p><ul><li>原子性</li><li>一致性</li><li>隔离性</li><li>持久性</li></ul><p>回顾一下|JDBC版本的事务处理</p><pre><code>try{    //更改JDBC提交方式    conn.setAutoCommit(false);    //一连串的SQL操作    //提交JDBC事务    conn.commit();    //恢复JDBC事务    conn.setAutoCommit(true);}catch(Exception e){        //如果发生错误回滚        conn.rollback();}</code></pre><h2 id="Spring框架的事务处理"><a href="#Spring框架的事务处理" class="headerlink" title="Spring框架的事务处理"></a>Spring框架的事务处理</h2><p>Spring提供了两种事务管理方式</p><ol><li>编程式的事务管理(Programmatic Transaction Management)</li><li>声明式的事务管理(Declarative Transaction Management)</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-JDBC</title>
      <link href="/2019/05/spring-jdbc.html"/>
      <url>/2019/05/spring-jdbc.html</url>
      
        <content type="html"><![CDATA[<p>Spring框架会对定义在配置文件中的bean实例自动管理，也就是说Bean就是Java的实例Java组件</p><h2 id="模板写法"><a href="#模板写法" class="headerlink" title="模板写法"></a>模板写法</h2><p>Spring对JDBC也提供了很多方案。<code>org.springframework.jdbc.core.JdbcTemplate</code></p><ol><li>导入Spring相关jar包，导入mysql包</li><li>创建好数据库相关的库和表</li><li>使用JDBC模板</li></ol><pre><code>@Testpublic void t1(){        //1. 建立连接        DriverManagerDataSource dataSource = new DriverManagerDataSource();        dataSource.setDriverClassName(&quot;com.mysql.cj.jdbc.Driver&quot;);        dataSource.setUrl(&quot;jdbc:mysql:///spring?serverTimezone=UTC&quot;);        dataSource.setUsername(&quot;root&quot;);        dataSource.setPassword(&quot;&quot;);        System.out.println(dataSource);        //2. 创建jdbc模板        JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);        /**         *  更新数据         * */        jdbcTemplate.update(&quot;update student set name = &#39;jack&#39; where id=1&quot;);        /**         *  插入数据         * */        jdbcTemplate.update(&quot;insert into student values(?,?,?,?)&quot;,3,&quot;Tashi&quot;,21,&quot;Teacher&quot;);}</code></pre><p><strong>使用Spring</strong></p><ol><li>配置文件</li></ol><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;       xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/aop        http://www.springframework.org/schema/aop/spring-aop.xsd&quot;&gt;&lt;!--AOP配置开启注解--&gt;&lt;aop:aspectj-autoproxy/&gt;&lt;bean id=&quot;datasource&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;    &lt;property name=&quot;driverClassName&quot; value=&quot;JDBC.T2&quot;/&gt;    &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql:///spring?serverTimezone=UTC&quot;/&gt;    &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;    &lt;property name=&quot;password&quot; value=&quot;&quot;/&gt;&lt;/bean&gt;&lt;bean id=&quot;template&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;    &lt;property name=&quot;dataSource&quot; ref=&quot;datasource&quot;/&gt;&lt;/bean&gt;&lt;/beans&gt;</code></pre><ol start="2"><li>测试</li></ol><pre><code>//注解@RunWith(SpringJUnit4ClassRunner.class)@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)public class T2 {    @Autowired    @Qualifier(&quot;template&quot;)//注入    private JdbcTemplate jdbcTemplate;    @Test    public void test(){        jdbcTemplate.update(&quot;insert into student values(?,?,?,?)&quot;,4,&quot;TT&quot;,21,&quot;Teacher&quot;);    }}</code></pre><h5 id="连接池的配置"><a href="#连接池的配置" class="headerlink" title="连接池的配置"></a>连接池的配置</h5><p>上面的测试都是默认的连接池，现在使用开源的连接池</p><ol><li>导入Jar包</li><li>修改配置文件bean 的class</li></ol><p><strong>dbcp连接池</strong></p><pre><code>&lt;bean id=&quot;dbcp&quot; class=&quot;org.apache.commons.dbcp.BasicDataSource&quot;&gt;    //配置&lt;/bean&gt;</code></pre><p><img src="/2019/05/spring-jdbc/1557659121320.png" alt></p><p><strong>c3p0连接池</strong></p><ol><li>导包</li><li>修改class <code>com.mchange.v2.c3p0.ComboPooledDataSource</code></li></ol><pre><code>&lt;bean id=&quot;c3p0&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;    &lt;property name=&quot;driverClass&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;    &lt;property name=&quot;jdbcUrl&quot; value=&quot;jdbc:mysql:///spring?serverTimezone=UTC&quot;/&gt;    &lt;property name=&quot;user&quot; value=&quot;root&quot;/&gt;    &lt;property name=&quot;password&quot; value=&quot;&quot;/&gt;&lt;/bean&gt;</code></pre><p><img src="/2019/05/spring-jdbc/1557659452621.png" alt></p><p>需要注意的是属性的名字可能与其他有所不同。</p><p><strong>druid连接池</strong></p><pre><code>&lt;bean id=&quot;druid&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot;&gt;    &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;    &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql:///spring?serverTimezone=UTC&quot;/&gt;    &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;    &lt;property name=&quot;password&quot; value=&quot;&quot;/&gt;&lt;/bean&gt;</code></pre><p><img src="/2019/05/spring-jdbc/1557660630934.png" alt></p><p>当然还可以添加更多的属性功能</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--连接池的最大连接数--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxPoolSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>40<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!--连接池的最小连接数--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>minPoolSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!--指定连接池的初始化连接数--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>initialPoolSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!--指定连接数据库连接池连接的最大空闲时间--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxIdleTime<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="加载properties文件"><a href="#加载properties文件" class="headerlink" title="加载properties文件"></a>加载properties文件</h5><p>通过配置连接池我们发现写入配置文件方便了很多，那么现在将它写入properties文件 </p><p><strong>方式一<bean>方式</bean></strong></p><ol><li>创建jdbc.properties文件</li><li>加载属性文件</li></ol><pre><code>driverClass:com.mysql.jdbc.Driverurl:&quot;jdbc:mysql:///spring?serverTimezone=UTC&quot;username:rootpassword:</code></pre><pre><code>&lt;!--加载属性文件--&gt;&lt;bean class=&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;&gt;        &lt;property name=&quot;location&quot; value=&quot;jdbc.properties&quot;/&gt;&lt;/bean&gt;</code></pre><p><img src="/2019/05/spring-jdbc/1557661224351.png" alt></p><p><strong>方式二<context>方式</context></strong></p><pre><code>1. 引入属性文件</code></pre><pre><code>    &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;       xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context/spring        http://www.springframework.org/schema/context/spring-context.xsd        http://www.springframework.org/schema/aop        http://www.springframework.org/schema/aop/spring-aop.xsd&quot;&gt;&lt;!--AOP配置开启注解--&gt;&lt;aop:aspectj-autoproxy/&gt;&lt;!--加载属性文件--&gt;&lt;context:property-placeholder location=&quot;classpath:jdbc.properties&quot;/&gt;&lt;!--使用连接池--&gt;&lt;bean id=&quot;druid1&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot;&gt;    &lt;!--注意：这里的value名称不能和配置文件的name一样--&gt;    &lt;property name=&quot;driverClassName&quot; value=&quot;${jdbc.driverClass}&quot;/&gt;    &lt;property name=&quot;url&quot; value=&quot;${jdbc.url}&quot;/&gt;    &lt;property name=&quot;username&quot; value=&quot;${jdbc.username}&quot;/&gt;    &lt;property name=&quot;password&quot; value=&quot;${jdbc.password}&quot;/&gt;&lt;/bean&gt;&lt;bean id=&quot;template&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;    &lt;property name=&quot;dataSource&quot; ref=&quot;druid1&quot;/&gt;&lt;/bean&gt;&lt;/beans&gt;</code></pre><h2 id="CRUD操作"><a href="#CRUD操作" class="headerlink" title="CRUD操作"></a>CRUD操作</h2><ol><li>已经配置好了数据库的连接</li><li>测试</li></ol><pre><code>import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Qualifier;import org.springframework.jdbc.core.JdbcTemplate;import org.springframework.jdbc.core.RowMapper;import org.springframework.test.context.ContextConfiguration;import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;//注解@RunWith(SpringJUnit4ClassRunner.class)@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)public class T2 {    @Autowired    @Qualifier(&quot;template&quot;)//注入    private JdbcTemplate jdbcTemplate;    @Test    public void insert(){        jdbcTemplate.update(&quot;insert into student values(?,?,?,?)&quot;,2,&quot;TT&quot;,21,&quot;Teacher&quot;);    }    @Test    public void update(){        jdbcTemplate.update(&quot;update student set name=? where id=?&quot;,&quot;Luck&quot;,2);    }    @Test    public void delete(){        jdbcTemplate.update(&quot;delete from student where id=? &quot;,2);    }    @Test    public void query(){        String s = jdbcTemplate.queryForObject(&quot;select name from student where id=?&quot;, String.class, 819);        System.out.println(s);    }    @Test//查询单个对象所有    public void queryAll(){        Student student = jdbcTemplate.queryForObject(&quot;select * from student where id=?&quot;, new MyRowMap(), 819);        System.out.println(student);    }    @Test//查询所有对象    public void queryAll2(){        List&lt;Student&gt; query = jdbcTemplate.query(&quot;select * from student&quot;, new MyRowMap());        System.out.println(query);    }}//查询所有class MyRowMap implements RowMapper&lt;Student&gt;{    @Override    public Student mapRow(ResultSet rs, int rowNum) throws SQLException {        Student student = new Student();        student.setId(rs.getInt(&quot;id&quot;));        student.setName(rs.getString(&quot;name&quot;));        student.setAge(rs.getInt(&quot;age&quot;));        student.setJob(rs.getString(&quot;job&quot;));        return student;    }}</code></pre><p>这里最麻烦的是查询操作。如果查询多个我们的操作是创建一个模型类用来返回， 创建测试类实现<code>RowMapper&lt;对象&gt;</code> 接口。并覆盖方法<code>mapRow()</code>  </p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NMap</title>
      <link href="/2019/05/nmap.html"/>
      <url>/2019/05/nmap.html</url>
      
        <content type="html"><![CDATA[<h2 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h2><p><strong>主机发现</strong></p><p>用于发现目标主机是否活动状态</p><p><strong>端口扫描</strong></p><p>还可以扫描主机上的端口状态</p><ul><li>开放（open）</li><li>关闭（closed）</li><li>过滤（filtered）</li><li>未过滤（unfiltered）</li><li>开放或过滤（open|filtered）</li><li>关闭或过滤（closed|filtered）</li></ul><p><strong>版本勘测</strong></p><p>还可以识别端口上的主机系统，运行程序。</p><p><strong>防火墙/IDS规避和哄骗</strong></p><p>提供多种机制来规避防火墙、IDS的的屏蔽和检查，便于秘密地探查目标主机的状况。</p><p>基本的规避方式包括：分片、IP诱骗、IP伪装、MAC地址伪装</p><h4 id="扫描目标设置"><a href="#扫描目标设置" class="headerlink" title="扫描目标设置"></a>扫描目标设置</h4><ol><li>单个目标 nmap target</li><li>多个目标 nmap host1,host2</li><li>IP地址段</li></ol><p>命令格式 </p><pre><code>nmap 192.168.5.1-192.168.5.253nmap 192.168.5.1-253//上面两个命令效果一样</code></pre><pre><code>nmap 192.168.5.* //扫描网段里的所有ip</code></pre><ol start="5"><li>随机扫描  nmap -iR 10</li><li>过滤性扫描  192.168.xx.xx -exclude 192.168.xx.3</li></ol><h4 id="扫描类型"><a href="#扫描类型" class="headerlink" title="扫描类型"></a>扫描类型</h4><ol><li>-sP 只进行ping扫描 输出对ping扫描做出响应的主机 </li><li>-sT //TCP连接扫描 会进行大量的请求和错误信息，需要进行三次握手 效率低，速度慢</li></ol><p>一种最为普通的扫描方法，这种扫描方法的特点是：扫描的速度快，准确性高，对操作者没有权限上的要求，但是容易被防火墙和IDS(防入侵系统)发现</p><ol start="4"><li>-sS //SYN扫描。 Nmap发送SYN包到远程主机，但是它不会产生任何会话，目标主机几乎不会把连接记入系统日志。（防止对方判断为扫描攻击），扫描速度快，效率高，在工作中使用频率最高</li><li>-P0 //扫描之前不需要Ping</li><li>-sA //穿过防火墙的规则集</li><li>-sV探测端口号版本</li></ol><p><img src="/2019/05/nmap/1557566722187.png" alt></p><ol start="8"><li>-sU //UDP扫描，速度慢</li></ol><h4 id="扫描参数"><a href="#扫描参数" class="headerlink" title="扫描参数"></a>扫描参数</h4><ul><li>-v //显示扫描过程</li><li>-h //显示帮助文档</li><li>-p // 指定端口号 [1-10000]</li><li>-O //全面系统监测</li><li>-A // 全面系统监测 使用脚本监测</li><li>-iL //批量扫描 读取主机列表 </li></ul><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><blockquote><p>判断nmap.org的主机是否开启</p></blockquote><p>nmap -F -sT -v nmap.org</p><ul><li>-F：扫描100个最有可能开放的端口  </li><li>-v 获取扫描的信息 </li><li>-sT：采用的是TCP扫描</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 工具的使用 </tag>
            
            <tag> 安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AOP</title>
      <link href="/2019/05/aop.html"/>
      <url>/2019/05/aop.html</url>
      
        <content type="html"><![CDATA[<h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><p><strong>简介</strong></p><p>面向切面编程</p><p>通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。</p><p>Aop采用横向抽取机制取代了传统纵向继承。</p><p>不破坏原来的类，生成一个代理类，在原来类的基础上增强可以随时添加，取消添加的功能</p><p><strong>JDK动态代理</strong></p><p><strong>cglib动态代理</strong></p><h2 id="AOP使用"><a href="#AOP使用" class="headerlink" title="AOP使用"></a>AOP使用</h2><p><strong>步骤</strong></p><ol><li>引入基本jar包</li><li>引入aop开发jar包</li><li>配置文件引入aop约束</li><li>测试</li><li>编写切面类</li><li>切面交给Spring</li><li>配置AOP完成代理</li></ol><blockquote><p>配置文件</p></blockquote><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;       xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/aop        http://www.springframework.org/schema/aop/spring-aop.xsd&quot;&gt;&lt;/beans&gt;</code></pre><blockquote><p>切面交给Spring</p></blockquote><p><img src="/2019/05/aop/1557411752171.png" alt></p><blockquote><p>配置AOP代理</p></blockquote><p><img src="/2019/05/aop/1557412299216.png" alt></p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;       xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/aop        http://www.springframework.org/schema/aop/spring-aop.xsd&quot;&gt;    &lt;bean id=&quot;goods&quot; class=&quot;Unit1.GoodsDaoImpl&quot;&gt;&lt;/bean&gt;    &lt;bean id=&quot;check&quot; class=&quot;Unit1.myCheck&quot;&gt;&lt;/bean&gt;&lt;!--配置AOP--&gt;    &lt;aop:config&gt;        &lt;!--切点：选定方法--&gt;        &lt;aop:pointcut id=&quot;savepoint&quot; expression=&quot;execution(* Unit1.GoodsDaoImpl.save(..))&quot;/&gt;        &lt;!--切面：增强的功能--&gt;        &lt;aop:aspect ref=&quot;check&quot;&gt;            &lt;!--                   :before 之前通知                   method: 要执行的方法                   pointcut-ref: 给那个切入点通知            --&gt;            &lt;aop:before method=&quot;check&quot; pointcut-ref=&quot;savepoint&quot; /&gt;        &lt;/aop:aspect&gt;    &lt;/aop:config&gt;&lt;/beans&gt;</code></pre><h2 id="AOP通知类型"><a href="#AOP通知类型" class="headerlink" title="AOP通知类型"></a>AOP通知类型</h2><p>刚才的使用用了<code>&lt;aop:before method=&quot;&quot; pointcut-ref=&quot;&quot;&gt;</code></p><p>除了这个还有很多。</p><pre><code>1. 前置通知&lt;aop:before method=&quot;check&quot; pointcut-ref=&quot;savepoint&quot; /&gt;2. 后置通知它可以接收一个返回值 returning属性&lt;aop:after-returning method=&quot;log&quot; pointcut-ref=&quot;savepoint&quot; returning=&quot;与相应方法的参数相同&quot;/&gt;3. 环绕通知在目标执行之前与执行之后都进行操作&lt;aop:around method=&quot;log&quot; pointcut-ref=&quot;savepoint&quot;/&gt;4. 异常通知当程序出现错误的时候就会通知&lt;aop:after-throwing method=&quot;&quot; pointcut-ref=&quot;&quot;/&gt;5. 最终通知&lt;aop:after method=&quot;&quot; pointcut-ref=&quot;&quot;/&gt;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring注解</title>
      <link href="/2019/05/spring-zhu-jie.html"/>
      <url>/2019/05/spring-zhu-jie.html</url>
      
        <content type="html"><![CDATA[<h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><blockquote><p>前提</p></blockquote><p>引入aop的包</p><p>配置文件引入context约束</p><pre><code>&lt;beans    xmlns=&quot;http://www.springframework.org/schema/beans&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xmlns:p=&quot;http://www.springframework.org/schema/p&quot;    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd    http://www.springframework.org/schema/context    http://www.springframework.org/schema/context/spring-context-3.0.xsd&quot;&gt;&lt;!--指定注解扫描包--&gt;&lt;context:component-scan base-package=&quot;Unit1&quot;/&gt;&lt;/beans&gt;</code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>配置文件加入</p><pre><code>&lt;!--指定注解扫描包--&gt;&lt;context:component-scan base-package=&quot;Unit1&quot;/&gt;</code></pre><p>类</p><pre><code>@Component(&quot;stu&quot;)public class Student {    @Value(&quot;张三&quot;)    public String name;    @Override    public String toString() {        return &quot;Student{&quot; +                &quot;name=&#39;&quot; + name + &#39;\&#39;&#39; +                &#39;}&#39;;    }}</code></pre><p>测试</p><pre><code>@org.junit.Testpublic void t1(){        //加载配置文件 - 自动创建对象        ApplicationContext applicationContext =                        new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);        //根据ID获取对象        Student stu = (Student)applicationContext.getBean(&quot;stu&quot;);        System.out.println(stu);}</code></pre><p>注意：要给属性初值，如果由set方法在set方法上添加@value() 如果没有set在属性上添加@value()</p><h2 id="注解详细解释"><a href="#注解详细解释" class="headerlink" title="注解详细解释"></a>注解详细解释</h2><p><code>@Component</code> 修改一个类将这个类给Spring管理，相当于配置文件中<code>&lt;bean id=&quot;&quot; class=&quot;&quot;&gt;</code></p><p>@Component 衍生注解</p><ul><li>@Component <ul><li>@Controller web层</li><li>@Service service层</li><li>@Repository dao层</li></ul></li></ul><p>三个注解功能都一样</p><p><strong>属性注入</strong></p><ul><li>@value() 设置普通属性值</li><li>@Autowired 设置对象属性直接使用是按照类型完全属性注入<ul><li>@Qualifier()  /<em>根据名称注入</em>/</li><li>@Resource(name=””) /<em>等同于@Autowired + @Qualifier</em>/</li></ul></li><li>@PostConstruct 初始化方法</li><li>@PreDestroy 销毁方法</li><li>@scope 作用范围<ul><li>prototype 多例</li></ul></li></ul><h5 id="XML与注解比较"><a href="#XML与注解比较" class="headerlink" title="XML与注解比较"></a>XML与注解比较</h5><p>XML可以适用任何场景，结构清晰。</p><p>注解的形式，贴标签的形式开发简单。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>属性注入</title>
      <link href="/2019/05/shu-xing-zhu-ru.html"/>
      <url>/2019/05/shu-xing-zhu-ru.html</url>
      
        <content type="html"><![CDATA[<h1 id="Spring属性注入"><a href="#Spring属性注入" class="headerlink" title="Spring属性注入"></a>Spring属性注入</h1><ul><li>构造方法的方式属性注入</li><li>Set方法的属性注入</li><li>Set方法设置对象类型属性</li><li>P名称空间的属性注入</li><li>spEL表达式属性注入</li><li>集合类属性注入<ul><li>数组</li><li>List集合</li><li>Set集合</li><li>Map集合</li></ul></li></ul><blockquote><p>构造方法的方式属性注入</p></blockquote><p><img src="/2019/05/shu-xing-zhu-ru/1557326652676.png" alt></p><blockquote><p>Set方法的属性注入</p></blockquote><p><img src="/2019/05/shu-xing-zhu-ru/1557326631873.png" alt></p><blockquote><p>Set方法设置对象类型属性</p></blockquote><p><img src="/2019/05/shu-xing-zhu-ru/1557326612956.png" alt></p><blockquote><p>P名称空间的属性注入</p></blockquote><p>使用P名称空间，就不需要写很多的property</p><p>使用之前需要添加名称空间</p><pre><code>xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</code></pre><p><img src="/2019/05/shu-xing-zhu-ru/1557326586553.png" alt></p><blockquote><p>spEL表达式属性注入</p></blockquote><p><img src="/2019/05/shu-xing-zhu-ru/1557326567257.png" alt></p><blockquote><p>集合类属性注入</p></blockquote><ul><li>数组|List集合|Set集合</li></ul><p>通过list标签里的value标签 定义值</p><pre><code>&lt;bean id=&quot;stu&quot; class=&quot;Unit1.Student&quot;&gt;        &lt;property name=&quot;name&quot; value=&quot;#{&#39;Luck&#39;}&quot;/&gt;        &lt;property name=&quot;arr&quot;&gt;                &lt;list&gt;                        &lt;value&gt;站衫&lt;/value&gt;                        &lt;value&gt;李四&lt;/value&gt;                        &lt;value&gt;王五&lt;/value&gt;                &lt;/list&gt;        &lt;/property&gt;&lt;/bean&gt;</code></pre><ul><li>Map集合</li></ul><p>通过mao标签在内部的entry标签里的key与value定义map里的key-value</p><pre><code>&lt;bean id=&quot;stu&quot; class=&quot;Unit1.Student&quot;&gt;        &lt;property name=&quot;name&quot; value=&quot;#{&#39;Luck&#39;}&quot;/&gt;        &lt;property name=&quot;map&quot;&gt;                &lt;map&gt;                        &lt;entry key=&quot;a&quot; value=&quot;1&quot;&gt;&lt;/entry&gt;                        &lt;entry key=&quot;b&quot; value=&quot;2&quot;&gt;&lt;/entry&gt;                        &lt;entry key=&quot;c&quot; value=&quot;3&quot;&gt;&lt;/entry&gt;                &lt;/map&gt;        &lt;/property&gt;&lt;/bean&gt;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Array(总结)</title>
      <link href="/2019/05/arrayzong-jie.html"/>
      <url>/2019/05/arrayzong-jie.html</url>
      
        <content type="html"><![CDATA[<h1 id="Array数组"><a href="#Array数组" class="headerlink" title="Array数组"></a>Array数组</h1><p><strong>定义</strong></p><p>存放多个变量的集合</p><p><strong>创建数组</strong></p><pre><code>方式一 Array构造函数var arr1 = new Array(); //创建一个空数组var arr2 = new Array(20); //创建了一个长度为20的数组var arr3 = new Array(&quot;Hello&quot;,16,true);</code></pre><pre><code>方式二 使用数组字面量var arr1 = [];  //创建一个空数组var arr2 = [1,2,3,4,5]; //静态初始化</code></pre><p>注意：这里的数组可以存放任意类型的数据</p><blockquote><ol><li>toString()</li></ol></blockquote><p>返回以数组中的每个值的字符串形式拼接而成的一个以逗号分割的字符串</p><pre><code>arr = [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,1,2,3];var str = arr.toString();typeof(str); //string</code></pre><blockquote><ol start="2"><li>valueOf()</li></ol></blockquote><p>返回数组对象的原始值。返回的还是数组</p><blockquote><ol start="3"><li>join</li></ol></blockquote><p>通过指定的分隔符进行分隔并返回一个字符串</p><pre><code>var arr = [1, 2, 3, 4, 5, 6];var joinArr = arr.join(&#39;&amp;&#39;);&gt;&gt;&gt; &quot;1&amp;2&amp;3&amp;4&amp;5&amp;6&quot;</code></pre><blockquote><ol start="4"><li>push</li></ol></blockquote><p>向数组的末尾添加一个或更多元素，并返回新的长度</p><pre><code>var pushArr = [1, 2, 3, 4, 5, 6];pushArr.push(7)console.log(pushArr)&gt;&gt;&gt; [1, 2, 3, 4, 5, 6, 7]</code></pre><blockquote><ol start="5"><li>.pop</li></ol></blockquote><p>删除数组的最后一个元素并返回删除的元素, 如果数组为空就返回undefined</p><blockquote><ol start="6"><li>shift</li></ol></blockquote><p>删除并返回数组的第一个元素, 如果数组为空，则shift() 方法不进行任何操作，返回undefined</p><blockquote><ol start="7"><li>unshift</li></ol></blockquote><p>向数组的开头添加一个或更多元素，并返回新的长度</p><blockquote><ol start="8"><li>reverse</li></ol></blockquote><p>反转数组的元素顺序</p><blockquote><ol start="9"><li>sort</li></ol></blockquote><p>对数组的元素进行排序</p><blockquote><ol start="10"><li>concat</li></ol></blockquote><p>连接两个或更多的数组，并返回结果</p><pre><code>var a = [1,2,3]var b = [4,5,6]var c = a.concat(b);&gt;&gt;&gt; [1,2,3,4,5,6]</code></pre><blockquote><ol start="11"><li>slice(start,end)</li></ol></blockquote><p>选取数组的的一部分，并返回一个新数组, start必须，end可选.[start,end)</p><pre><code>var a = [1,2,3,4,5,6];a.slice(3,5);&gt;&gt; [4,5]</code></pre><blockquote><ol start="12"><li>splice</li></ol></blockquote><p> 从数组中添加或删除元素</p><blockquote><ol start="13"><li>copyWithin(target, start, end)</li></ol></blockquote><p>从数组的指定位置拷贝元素到数组的另一个指定位置中</p><blockquote><ol start="14"><li>fill(value, start, end)</li></ol></blockquote><ul><li>value: 必需。填充的值。</li><li>start: 可选。开始填充位置。</li><li>end: 可选。停止填充位置 (默认为 array.length)</li></ul><p>用于将一个固定值替换数组的元素</p><blockquote><ol start="15"><li>indexOf(item,start)</li></ol></blockquote><p>可返回某个指定的字符串值在字符串中首次出现的位置</p><blockquote><ol start="16"><li>lastIndexOf(item,start)</li></ol></blockquote><p>返回一个指定的字符串值最后出现的位置，在一个字符串中的指定位置从后向前搜索</p><blockquote><ol start="17"><li>forEach(function(currentValue, index, arr), thisValue)</li></ol></blockquote><p>用于调用数组的每个元素，并将元素传递给回调函数。没有返回值</p><blockquote><ol start="18"><li>map(function(currentValue, index, arr), thisValue)</li></ol></blockquote><p>返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DHCP动态管理主机地址</title>
      <link href="/2019/05/dhcp-dong-tai-guan-li-zhu-ji-di-zhi.html"/>
      <url>/2019/05/dhcp-dong-tai-guan-li-zhu-ji-di-zhi.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>DHCP动态管理主机地址</p></blockquote><h1 id="DHCP-Dynamic-Host-Configuration-Protocol"><a href="#DHCP-Dynamic-Host-Configuration-Protocol" class="headerlink" title="DHCP(Dynamic Host Configuration Protocol)"></a>DHCP(Dynamic Host Configuration Protocol)</h1><p>DHCP是动态主机配置协议，动态主机设置协议是一个局域网的网络协议，使用UDP协议工作。该协议允许服务器向客户端动态分配 IP 地址和配置信息。DHCP协议支持C/S结构，主要分为客户端和服务端。</p><p>用于自动管理局域网内主机的IP地址，子网掩码、网关地址、Dns地址。</p><p>有效的提升IP地址的利用率，提高配置效率，降低管理与维护成本</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><strong>是否安装</strong></p><p>npm -qa|grep dhcp</p><p><strong>安装</strong></p><p>yum install dhcp</p><p><strong>查看配置文件内容</strong></p><p>cat /etc/dhcp/dhcpd.conf</p><pre><code># DHCP Server Configuration file.# see /usr/share/doc/dhcp*/dhcpd.conf.example# see dhcpd.conf(5) man page</code></pre><p><strong>启动</strong></p><p>service dhcpd start //RHEL6</p><p>systemctl restart dhcpd //RHEL7</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><img src="https://i.loli.net/2019/05/08/5cd239ccaf61e.png" alt></p><ul><li><p>网段声明：以subnet字段开头</p></li><li><p>主机声明：以host字段开头</p></li><li><p>配置选项：由“option”引导，后面跟具体的配置关键字和对应的值</p></li><li><p>配置参数：由配置关键字和对应的值组成，总是以分号“；”结束</p></li></ul><p>这是示例配置文件</p><pre><code># dhcpd.conf## Sample configuration file for ISC dhcpd## option definitions common to all supported networks...option domain-name &quot;example.org&quot;;option domain-name-servers ns1.example.org, ns2.example.org;default-lease-time 600;max-lease-time 7200;# Use this to enble / disable dynamic dns updates globally.#ddns-update-style none;# If this DHCP server is the official DHCP server for the local# network, the authoritative directive should be uncommented.#authoritative;# Use this to send dhcp log messages to a different log file (you also# have to hack syslog.conf to complete the redirection).log-facility local7;# No service will be given on this subnet, but declaring it helps the # DHCP server to understand the network topology.subnet 10.152.187.0 netmask 255.255.255.0 {}# This is a very basic subnet declaration.subnet 10.254.239.0 netmask 255.255.255.224 {  range 10.254.239.10 10.254.239.20;  option routers rtr-239-0-1.example.org, rtr-239-0-2.example.org;}# This declaration allows BOOTP clients to get dynamic addresses,# which we don&#39;t really recommend.subnet 10.254.239.32 netmask 255.255.255.224 {  range dynamic-bootp 10.254.239.40 10.254.239.60;  option broadcast-address 10.254.239.31;  option routers rtr-239-32-1.example.org;}# A slightly different configuration for an internal subnet.subnet 10.5.5.0 netmask 255.255.255.224 {  range 10.5.5.26 10.5.5.30;  option domain-name-servers ns1.internal.example.org;  option domain-name &quot;internal.example.org&quot;;  option routers 10.5.5.1;  option broadcast-address 10.5.5.31;  default-lease-time 600;  max-lease-time 7200;}# Hosts which require special configuration options can be listed in# host statements.   If no address is specified, the address will be# allocated dynamically (if possible), but the host-specific information# will still come from the host declaration.host passacaglia {  hardware ethernet 0:0:c0:5d:bd:95;  filename &quot;vmunix.passacaglia&quot;;  server-name &quot;toccata.fugue.com&quot;;}# Fixed IP addresses can also be specified for hosts.   These addresses# should not also be listed as being available for dynamic assignment.# Hosts for which fixed IP addresses have been specified can boot using# BOOTP or DHCP.   Hosts for which no fixed address is specified can only# be booted with DHCP, unless there is an address range on the subnet# to which a BOOTP client is connected which has the dynamic-bootp flag# set.host fantasia {  hardware ethernet 08:00:07:26:c0:a5;  fixed-address fantasia.fugue.com;}# You can declare a class of clients and then do address allocation# based on that.   The example below shows a case where all clients# in a certain class get addresses on the 10.17.224/24 subnet, and all# other clients get addresses on the 10.0.29/24 subnet.class &quot;foo&quot; {  match if substring (option vendor-class-identifier, 0, 4) = &quot;SUNW&quot;;}shared-network 224-29 {  subnet 10.17.224.0 netmask 255.255.255.0 {    option routers rtr-224.example.org;  }  subnet 10.0.29.0 netmask 255.255.255.0 {    option routers rtr-29.example.org;  }  pool {    allow members of &quot;foo&quot;;    range 10.17.224.10 10.17.224.250;  }  pool {    deny members of &quot;foo&quot;;    range 10.0.29.10 10.0.29.230;  }}</code></pre><h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a><strong>全局配置</strong></h3><ul><li><p>option domain-name 默认搜索区域</p></li><li><p>option domain-name-servers  DNS服务器地址</p></li><li><p>option subnet-mask 定义客户端的子网掩码</p></li><li><p>ignore client-updates; 忽略客户端更新DNS记录</p></li><li><p>default-lease-time 默认租约时间（单位为秒）<br>表示客户端可以从DHCP服务器租用某个IP地址的默认时间</p></li><li><p>max-lease-time 最大租约时间（单位为秒）<br>表示允许DHCP客户端请求的最大租约时间</p></li><li><p>ddns-update-style 动态DNS更新模式</p><ul><li>none 不支持动态更新</li><li>interim 互动更新模式<br>设置与DHCP服务相关联的DNS数据动态更新模式</li></ul></li></ul><h3 id="网段配置"><a href="#网段配置" class="headerlink" title="网段配置"></a><strong>网段配置</strong></h3><p>只作用指定的网段，可以声明网段可以有多个</p><ul><li>range     定义用于分配的IP地址池</li><li>option routers 192.168.1.254; 定义客户端的网关地址</li><li>option broadcast-address 192.168.1.255; 定义客户端的广播地址</li><li>default-lease-time 600; 默认续约时间</li><li>max-lease-time 7200; 最大续约时间</li></ul><pre><code>subnet 192.168.1.0 netmask 255.255.255.224 {  range 192.168.1.100 192.168.1.200; //IP地址池  option domain-name-servers ns1.internal.example.org;  option domain-name &quot;internal.example.org&quot;;  option routers 192.168.1.254;  option broadcast-address 192.168.1.255;  default-lease-time 600;  max-lease-time 7200;}</code></pre><h3 id="host主机声明（可选）"><a href="#host主机声明（可选）" class="headerlink" title="host主机声明（可选）"></a><strong>host主机声明（可选）</strong></h3><p>host声明用于设置单个主机的网络属性，通常用于为网络打印机或个别服务器分配固定的IP地址（保留地址），这些主机的共同特点是要求每次获取的IP地址相同，以确保服务的稳定性</p><ul><li>hardware 指定网卡接口的类型与MAC地址</li><li>fixed-address     将某个固定的IP地址分配给指定主机</li></ul><pre><code>host prtsvr{ //设置Host关键字     hardware ethernet 00:0c:c3:32:23:21; //网卡地址    fixed-address 192.168.1.100; //指定保留的IP地址}</code></pre><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><pre><code>systemctl start dhcpd  启动Dhcp服务systemctl enable dhcpd  加入开机启动项</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IOC</title>
      <link href="/2019/05/ioc.html"/>
      <url>/2019/05/ioc.html</url>
      
        <content type="html"><![CDATA[<h1 id="IOC（Inbersion-Of-Control）控制反转"><a href="#IOC（Inbersion-Of-Control）控制反转" class="headerlink" title="IOC（Inbersion Of Control）控制反转"></a>IOC（Inbersion Of Control）控制反转</h1><p>将对象的创建权转给Spring</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><blockquote><p>下载</p></blockquote><p><a href="http://repo.spring.io/libs-release-local/org/springframework/spring/" target="_blank" rel="noopener">http://repo.spring.io/libs-release-local/org/springframework/spring/</a></p><ol><li>添加Jar包</li><li>创建配置文件<code>applicationContext.xml</code></li></ol><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;        /*自定义对象的名字与类所在路径*/    &lt;bean id=&quot;stu&quot; class=&quot;Unit1.Student&quot;&gt;&lt;/bean&gt;&lt;/beans&gt;</code></pre><ol><li>测试</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*创建好Student类*/</span><span class="token annotation punctuation">@org</span><span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">t1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//加载配置文件 参数填写配置文件路径</span>        ApplicationContext applicationContext <span class="token operator">=</span>                        <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//根据ID获取对象</span>        Student stu <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span>applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"stu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//执行对象的方法</span>        stu<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="DI"><a href="#DI" class="headerlink" title="DI"></a>DI</h1><p><strong>依赖注入</strong></p><p>前提必须具有IOC环境，给Spring管理类当中依赖的属性，通过配置文件进行赋值的过程</p><p>配置文件(类中属性要Public还要提供set方法)</p><pre><code>   &lt;bean id=&quot;stu&quot; class=&quot;Unit1.Student&quot;&gt;        &lt;!--            name:注入的名称            value:注入的值        --&gt;        &lt;property name=&quot;name&quot; value=&quot;张三&quot; /&gt;    &lt;/bean&gt;</code></pre><h1 id="工厂类"><a href="#工厂类" class="headerlink" title="工厂类"></a>工厂类</h1><ul><li>BeanFactory</li><li>ApplicationContext（加载配置文件就会创建好实例对象）</li><li>ApplicationContext 实现类<ul><li>根据路径配置文件常见类<code>ClassPathXmlApplicationContext</code></li><li>加载文件系统下的配置文件<code>FileSystemXmlApplicationContext</code></li></ul></li></ul><h1 id="Bean相关配置"><a href="#Bean相关配置" class="headerlink" title="Bean相关配置"></a>Bean相关配置</h1><p>核心配置文件信息</p><p>beans标签是配置文件的根元素 它可以有多个bean元素的子元素。每个bean元素代表了一个Java组件。</p><blockquote><p>Bean标签</p></blockquote><ul><li>id 指向该Bean的唯一标识，程序通过id属性值访问bean实例 </li><li>class  类路径，实现类，利用反射来创建该实现类的实例</li><li><p>scope </p><ul><li>singleton 单例(默认值：无论创建多少对象都是一个)</li><li>prototype 多例模式</li><li>request 这个类存在req范围中</li><li>session 这个类存在session范围中</li><li>globalsession<br><strong>生命周期</strong></li></ul></li><li><p>init-method 初始化执行的方法</p></li><li>destory-method 销毁执行的方法</li></ul><p>初始化就会先执行Student类的init()方法。</p><pre><code>&lt;bean id=&quot;stu&quot; class=&quot;Unit1.Student&quot; init-method=&quot;init&quot; destroy-method=&quot;des&quot;&gt;        &lt;!--                name:注入的名称                value:注入的值        --&gt;        &lt;property name=&quot;name&quot; value=&quot;张三&quot; /&gt;&lt;/bean&gt;</code></pre><pre><code> @org.junit.Testpublic void t1(){        //加载配置文件 - 自动创建对象        ApplicationContext applicationContext =                        new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);        //根据ID获取对象        Student stu = (Student)applicationContext.getBean(&quot;stu&quot;);        //执行对象的方法        stu.say();        //关闭工程 - 销毁        ((ClassPathXmlApplicationContext) applicationContext).close();}</code></pre><h5 id="工厂实例化方式"><a href="#工厂实例化方式" class="headerlink" title="工厂实例化方式"></a><strong>工厂实例化方式</strong></h5><ul><li>无参构造</li><li>静态工厂</li><li>实例工厂</li></ul><p><img src="/2019/05/ioc/1557240424028.png" alt></p><p><img src="/2019/05/ioc/1557240446080.png" alt></p><p><img src="/2019/05/ioc/1557240403866.png" alt></p><h5 id="分模块配置"><a href="#分模块配置" class="headerlink" title="分模块配置"></a><strong>分模块配置</strong></h5><p>可以将自己单独的模块做出配置 然后再引入即可</p><ul><li>方式一：在引入配置文件添加多个参数</li></ul><pre><code>public void t1(){        //加载配置文件 - 自动创建对象        ApplicationContext applicationContext =                new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;,&quot;self.xml&quot;);    }</code></pre><ul><li>方式二：配置文件引入其他配置文件</li></ul><p>All</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;    &lt;import resource=&quot;self.xml&quot;/&gt;&lt;/beans&gt;</code></pre><p>Self</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;    &lt;bean id=&quot;tea&quot; class=&quot;Unit1.Teacher&quot;&gt;&lt;/bean&gt;    &lt;bean id=&quot;stu&quot; class=&quot;Unit1.Student&quot; factory-bean=&quot;tea&quot;&gt;&lt;/bean&gt;&lt;/beans&gt;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-Router</title>
      <link href="/2019/05/vue-router.html"/>
      <url>/2019/05/vue-router.html</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-Router"><a href="#Vue-Router" class="headerlink" title="Vue-Router"></a>Vue-Router</h1><h2 id="第一个单页应用"><a href="#第一个单页应用" class="headerlink" title="第一个单页应用"></a>第一个单页应用</h2><blockquote><p>导入</p></blockquote><pre><code>&lt;script src=&quot;https://cdn.bootcss.com/vue-router/3.0.6/vue-router.common.js&quot;&gt;&lt;/script&gt;</code></pre><blockquote><p>使用</p></blockquote><p><strong>HTML</strong></p><pre><code>&lt;div id=&quot;app&quot;&gt;    &lt;!-- 使用 router-link 组件来导航. --&gt;    &lt;!-- 通过传入 `to` 属性指定链接. --&gt;    &lt;!-- &lt;router-link&gt; 默认会被渲染成一个 `&lt;a&gt;` 标签 --&gt;    &lt;div class=&quot;columns box is-mobile&quot;&gt;        &lt;div class=&quot;column&quot;&gt;&lt;router-link to=&quot;/home&quot;&gt;Home&lt;/router-link&gt;&lt;/div&gt;        &lt;div class=&quot;column&quot;&gt;&lt;router-link to=&quot;/more&quot;&gt;More&lt;/router-link&gt;&lt;/div&gt;        &lt;div class=&quot;column&quot;&gt;&lt;router-link to=&quot;/work&quot;&gt;Work&lt;/router-link&gt;&lt;/div&gt;        &lt;div class=&quot;column&quot;&gt;&lt;router-link to=&quot;/about&quot;&gt;About&lt;/router-link&gt;&lt;/div&gt;    &lt;/div&gt;    &lt;!-- 路由出口 --&gt;    &lt;!-- 路由匹配到的组件将渲染在这里 --&gt;    &lt;!--&lt;router-view&gt;&lt;/router-view&gt;--&gt;    &lt;router-view&gt;    &lt;/router-view&gt;&lt;/div&gt;</code></pre><p><strong>JavaScript</strong></p><ol><li>创建组件</li></ol><pre><code>&lt;template id=&quot;home&quot;&gt;    &lt;div class=&quot;hero is-medium is-info&quot;&gt;        &lt;div class=&quot;hero-body&quot;&gt;            &lt;h1 class=&quot;title&quot;&gt;Home&lt;/h1&gt;        &lt;/div&gt;    &lt;/div&gt;&lt;/template&gt;&lt;template id=&quot;More&quot;&gt;    &lt;div class=&quot;hero is-medium is-info&quot;&gt;        &lt;div class=&quot;hero-body&quot;&gt;            &lt;h1 class=&quot;title&quot;&gt;More&lt;/h1&gt;        &lt;/div&gt;    &lt;/div&gt;&lt;/template&gt;&lt;template id=&quot;Work&quot;&gt;    &lt;div class=&quot;hero is-medium is-info&quot;&gt;        &lt;div class=&quot;hero-body&quot;&gt;            &lt;h1 class=&quot;title&quot;&gt;Work&lt;/h1&gt;        &lt;/div&gt;    &lt;/div&gt;&lt;/template&gt;&lt;template id=&quot;About&quot;&gt;    &lt;div class=&quot;hero is-medium is-info&quot;&gt;        &lt;div class=&quot;hero-body&quot;&gt;            &lt;h1 class=&quot;title&quot;&gt;About&lt;/h1&gt;        &lt;/div&gt;    &lt;/div&gt;&lt;/template&gt;//Step1:创建组件const Home = Vue.extend({        template:&quot;#Home&quot;});const More = Vue.extend({        template:&quot;#More&quot;});const Work = Vue.extend({        template:&quot;#Work&quot;});const About = Vue.extend({        template:&quot;#About&quot;});</code></pre><ol start="2"><li>定义路由</li></ol><p>每条路由以key-value 形式存在</p><pre><code>//Step2:定义路由const routes = [        {path:&#39;/home&#39;, component:Home,},        {path:&#39;/more&#39;, component:More,},        {path:&#39;/work&#39;, component:Work,},        {path:&#39;/about&#39;, component:About,},];</code></pre><ol start="3"><li>创建路由实例</li></ol><pre><code>//Step3:创建路由实例const router = new VueRouter({        routes // （缩写）相当于 routes: routes});</code></pre><ol start="4"><li>创建Vue实例 挂载</li></ol><pre><code> //Step4:创建Vue实例并挂载var app = new Vue({        router}).$mount(&#39;#app&#39;);</code></pre><p><img src="/2019/05/vue-router/1557206449085.gif" alt></p><p><strong>执行过程</strong></p><p>当点击<code>v-link</code>指令元素，vue-router 首先会查找<code>v-link</code>指令的路由映射，然后根据路由映射找到匹配组件，最后将组件渲染<code>&lt;router-view&gt;</code>标签</p><h2 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h2><p>实现嵌套路由两个要点</p><ol><li>组件内部使用<code>&lt;router-view&gt;</code>标签</li><li>路由器对象给组件定义子路由</li></ol><pre><code>const routes = [        {    path:&#39;/home&#39;,             component:Home,              subRoutes:{                        path:&#39;&#39;,//子组件                        component:&quot;&quot;, //子组件                }        },        {path:&#39;/more&#39;, component:More,},        {path:&#39;/work&#39;, component:Work,},        {path:&#39;/about&#39;, component:About,},];</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-插槽</title>
      <link href="/2019/05/vue-cha-cao.html"/>
      <url>/2019/05/vue-cha-cao.html</url>
      
        <content type="html"><![CDATA[<h1 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h1><h2 id="slot-实现内容分发"><a href="#slot-实现内容分发" class="headerlink" title="slot-实现内容分发"></a>slot-实现内容分发</h2><ul><li>实名插槽</li><li>匿名插槽</li></ul><blockquote><p>匿名插槽</p></blockquote><p><code>&lt;slot&gt; 标签</code></p><pre><code>&lt;div id=&quot;app&quot;&gt;    &lt;show&gt;        &lt;p&gt;I&#39;m new here&lt;/p&gt;    &lt;/show&gt;&lt;/div&gt;&lt;template id=&quot;try&quot;&gt;    &lt;div class=&quot;main&quot;&gt;        &lt;h1&gt;Start&lt;/h1&gt;        &lt;!--预留插槽--&gt;        &lt;slot&gt;替换任何标签， 没有则显示提示的内容&lt;/slot&gt;        &lt;h3&gt;End&lt;/h3&gt;    &lt;/div&gt;&lt;/template&gt;Vue.component(&quot;show&quot;,{        template:&quot;#try&quot;});</code></pre><p><img src="/2019/05/vue-cha-cao/1557203141511.png" alt></p><blockquote><p>实名插槽</p></blockquote><p>插槽标签给定属性名字，外面调用的时候给定<code>slot=&#39;name&#39;</code> 。与匿名插槽不同的是只会显示插槽上给定的内容，其他的内容并不会显示。</p><pre><code>&lt;div id=&quot;app&quot;&gt;    &lt;person&gt;        path &lt;!--并不会显示--&gt;        &lt;p slot=&quot;ming&quot;&gt;小明的座位&lt;/p&gt;        &lt;h1 slot=&quot;gang&quot;&gt;是小刚啊&lt;/h1&gt;        path    &lt;/person&gt;&lt;/div&gt;&lt;template id=&quot;try&quot;&gt;    &lt;section&gt;        &lt;slot name=&quot;hong&quot;&gt;小红&lt;/slot&gt;&lt;br&gt;        &lt;slot name=&quot;ming&quot;&gt;小明&lt;/slot&gt;&lt;br&gt;        &lt;slot name=&quot;gang&quot;&gt;小刚&lt;/slot&gt;&lt;br&gt;        &lt;slot name=&quot;hui&quot;&gt;小惠&lt;/slot&gt;&lt;br&gt;    &lt;/section&gt;&lt;/template&gt;//注册全局组件Vue.component(&quot;person&quot;,{        template:&quot;#try&quot;});</code></pre><p><img src="/2019/05/vue-cha-cao/1557203545673.png" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-过滤器</title>
      <link href="/2019/05/vue-guo-lu-qi.html"/>
      <url>/2019/05/vue-guo-lu-qi.html</url>
      
        <content type="html"><![CDATA[<h1 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h1><p><code>Vue.filter</code></p><pre><code>&lt;div id=&quot;app&quot;&gt;    &lt;h1&gt;{{price|currency}}&lt;/h1&gt;&lt;/div&gt;</code></pre><pre><code>/*过滤器*/Vue.filter(&quot;currency&quot;,function (val) {        val=val||0;        return &quot;￥&quot;+val;});var app = new Vue({        el: &#39;#app&#39;,        data: {                price:10        }})</code></pre><p><strong>过滤器传递参数</strong></p><pre><code>&lt;div id=&quot;app&quot;&gt;    &lt;h1&gt;{{price|currency('元')}}&lt;/h1&gt;&lt;/div&gt;Vue.filter(&quot;currency&quot;,function (val,end) {        val=val||0;        return &quot;￥&quot;+val+end;});</code></pre><p><img src="/2019/05/vue-guo-lu-qi/1557127359113.png" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-组件</title>
      <link href="/2019/05/vue-zu-jian.html"/>
      <url>/2019/05/vue-zu-jian.html</url>
      
        <content type="html"><![CDATA[<h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><blockquote><p><strong>全局组件</strong></p></blockquote><p><code>Vue.component</code></p><pre><code>&lt;div id=&quot;app&quot;&gt;    &lt;tao&gt;&lt;/tao&gt;&lt;/div&gt;//创建构造器var Alert = Vue.extend( {        template:&#39;&lt;button @click=&quot;cle&quot;&gt;点击&lt;/button&gt;&#39;,        methods:{                cle:function () {                        alert(&quot;Hi&quot;);                }        }});//注册全局组件Vue.component(&quot;tao&quot;,Alert);</code></pre><blockquote><p><strong>局部组件</strong></p></blockquote><pre><code>&lt;div id=&quot;app&quot;&gt;    &lt;show&gt;&lt;/show&gt;&lt;/div&gt;&lt;script&gt;    var showH1 = Vue.extend({        template:&quot;&lt;h1&gt;Show!&lt;/h1&gt;&quot;    });    var app = new Vue({        el: &#39;#app&#39;,        components:{            &quot;show&quot;:showH1        }    })&lt;/script&gt;</code></pre><p>当然也可以这样写。</p><pre><code>var app = new Vue({        el: &#39;#app&#39;,        components:{                show:{                        template: &quot;Hello&lt;button @click=&#39;c&#39;&gt;Try!&lt;/button&gt;&quot;,                        methods:{                                c:function () {                                        alert(&quot;Click Me!&quot;);                                }                        }                }        }})</code></pre><blockquote><p>Vue组件中使用数据</p></blockquote><pre><code>&lt;div id=&quot;app&quot;&gt;    &lt;show&gt;&lt;/show&gt;&lt;/div&gt;Vue.component(&#39;show&#39;,{        template:&quot;&lt;div&gt;&lt;button @click=&#39;c&#39;&gt;Click&lt;/button&gt; &lt;h1&gt;{{num}}&lt;/h1&gt;&lt;/div&gt;&quot;,        data:function(){                return{                        num:0                }        },        methods:{                c:function () {                        this.num+=1;                }        }});</code></pre><p><strong>注意</strong></p><p>可以看到再写组件的时候我在外面包了一层DIV标签，这是因为每个组件必须只有一个根元素。如果没有的话会显示一个错误<code>every component must have a single root element</code></p><p>组件中使用data注意的是<code>data</code>必须是一个函数。因为每个实例维护一份返回对象，如果不是函数返回，那么其他相关组件都会跟着受影响。</p><h5 id="组件的复用"><a href="#组件的复用" class="headerlink" title="组件的复用"></a>组件的复用</h5><pre><code>&lt;div id=&quot;app&quot;&gt;    &lt;show&gt;&lt;/show&gt;    &lt;show&gt;&lt;/show&gt;    &lt;show&gt;&lt;/show&gt;&lt;/div&gt;</code></pre><p>点击按钮每个组件都会维护各自的数据。因为每用一个组件，就会有一个新实例被创建</p><p><img src="/2019/05/vue-zu-jian/1557117429947.png" alt></p><blockquote><p>组件之间的嵌套</p></blockquote><p>子组件</p><pre><code>let son1 = Vue.extend({        template:&quot;&lt;h1&gt;Son1&lt;/h1&gt;&quot;});let son2 = Vue.extend({        template:&quot;&lt;h1&gt;Son2&lt;/h1&gt;&quot;});</code></pre><p>父组件</p><pre><code>//父Vue.component(&quot;parent&quot;,{        components:{                &quot;child1&quot;:son1,                &quot;child2&quot;:son2        },        template:&quot;&lt;div&gt;&lt;child1&gt;&lt;/child1&gt;&lt;child2&gt;&lt;/child2&gt;&lt;/div&gt;&quot;,});</code></pre><p>最后只要渲染Parent标签就可以了</p><pre><code>&lt;div id=&quot;app&quot;&gt;    &lt;parent&gt;&lt;/parent&gt;&lt;/div&gt;</code></pre><blockquote><p>自定义模板标签</p></blockquote><pre><code>&lt;div id=&quot;app&quot;&gt;    &lt;my-div&gt;&lt;/my-div&gt;&lt;/div&gt;&lt;template id=&quot;my-div&quot;&gt;    &lt;div&gt;        &lt;h1&gt;Yo!&lt;/h1&gt;    &lt;/div&gt;&lt;/template&gt;Vue.component(&quot;my-div&quot;,{        template:&quot;#my-div&quot;});</code></pre><p>这样就渲染了一个自己的模板只要指明他的ID</p><blockquote><p><strong>传递数据</strong></p></blockquote><p><code>Prop</code></p><p>Prop可以在组件上注册一些自定义特性</p><h4 id="父子通信"><a href="#父子通信" class="headerlink" title="父子通信"></a>父子通信</h4><p>在渲染一个组件的时候有时候需要向组件传递一些数据，并且展示</p><p>Demo</p><p>创建一个模板组件</p><pre><code>&lt;template id=&quot;info&quot;&gt;    &lt;div&gt;        &lt;h1&gt;你所在的城市&lt;/h1&gt;&lt;h1&gt;{{city}}&lt;/h1&gt;    &lt;/div&gt;&lt;/template&gt;</code></pre><p>注册</p><pre><code>Vue.component(&quot;info&quot;,{        template:&quot;#info&quot;,        props:[&#39;city&#39;]});</code></pre><p>传递参数 在标签<code>&lt;info city=&quot;Beijing&quot;&gt;&lt;/info&gt;</code> 写入属性city就把值传递过去了</p><pre><code>&lt;div id=&quot;app&quot;&gt;    &lt;info city=&quot;北京&quot;&gt;&lt;/info&gt;    &lt;info city=&quot;南昌&quot;&gt;&lt;/info&gt;    &lt;info city=&quot;运城&quot;&gt;&lt;/info&gt;&lt;/div&gt;</code></pre><p><img src="/2019/05/vue-zu-jian/1557118649413.png" alt></p><h4 id="子父通信"><a href="#子父通信" class="headerlink" title="子父通信"></a>子父通信</h4><p><code>$emit方法</code></p><p>子组件需要与父组件进行沟通。沟通的方式为事件</p><p>Demo</p><pre><code>//子组件Vue.component(&#39;show&#39;,{        template: &#39;&lt;button @click=&quot;on_click&quot;&gt;信息详情&lt;/button&gt;&#39;,        methods:{                on_click:function () {                        /**                         *  $emit()                         *  参数1：                         *      事件的名称                         *  参数2：                         *      传递的数据                         * */                        this.$emit(&#39;show-info&#39;,{name:&#39;Dandy&#39;, pets:[&#39;dog&#39;,&#39;cat&#39;]});                }        }});//父组件Vue.component(&#39;info&#39;,{        /**         *  show来监听事件         *  @show-info         * */        template:&#39;&lt;div&gt;&lt;show @show-info=&quot;show_mes&quot;&gt;&lt;/show&gt;&lt;div v-if=&quot;show&quot;&gt;展示消息了&lt;/div&gt;&lt;/div&gt;&#39;,        data:function () {                return{                        show:false                }        },        methods: {                /***                 * 传递数据funtion后面添加参数data                 */                show_mes:function (data) {                        this.show = true;                        console.log(&#39;data&#39;,data)                }        }});</code></pre><pre><code>&lt;div id=&quot;app&quot;&gt;    &lt;info&gt;&lt;/info&gt;&lt;/div&gt;</code></pre><p>当点击按钮后子组件button会修改父组件的data属性 父组件相应显示数据。</p><p>同时也可以将子组件的数据传递给父组件上</p><p><img src="/2019/05/vue-zu-jian/1557125584976.png" alt></p><h4 id="兄弟之间的通信"><a href="#兄弟之间的通信" class="headerlink" title="兄弟之间的通信"></a>兄弟之间的通信</h4><p>需要一个任务调度器</p><p>例子：输入与输出</p><pre><code>//中心事件调度器var Event = new Vue();</code></pre><pre><code>//输入Vue.component(&#39;in&#39;,{        template: &quot;&lt;div&gt;Input: &lt;input  @keyup=&#39;change&#39; type=&#39;text&#39; v-model=&#39;msg&#39;&gt;&lt;/div&gt;&quot;,        data:function(){                return{                        msg:&#39;&#39;,                }        },        methods:{                change:function () {                        Event.$emit(&#39;isSend&#39;,this.msg);                }        }});</code></pre><pre><code>//输出Vue.component(&#39;out&#39;,{        template: &quot;&lt;div&gt;Output: &lt;h3&gt;{{rece}}&lt;/h3&gt;&lt;/div&gt;&quot;,        data:function () {                return{                        rece:&#39;&#39;,                }        },        mounted:function(){                var me = this;                Event.$on(&#39;isSend&#39;,function (data) {                        console.log(data);                        me.rece = data; //变量来指代当前rece                })        }});</code></pre><p><img src="/2019/05/vue-zu-jian/1557127014992.png" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇-介绍</title>
      <link href="/2019/05/di-yi-pian-jie-shao.html"/>
      <url>/2019/05/di-yi-pian-jie-shao.html</url>
      
        <content type="html"><![CDATA[<h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><p>Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架</p><blockquote><p>渐进式 Progressive</p></blockquote><p>主张最少。根据开发者的需求不断渐进。</p><p><img src="/2019/05/di-yi-pian-jie-shao/1557066598234.jpg" alt></p><p>Vue的核心库只关注视图层。</p><h2 id="MVC-与-MVVM"><a href="#MVC-与-MVVM" class="headerlink" title="MVC 与 MVVM"></a>MVC 与 MVVM</h2><blockquote><p>MVC</p></blockquote><p>MVC的思想：一句话描述就是Controller负责将Model的数据用View显示出来。</p><p>Model（模型）：是应用程序中用于处理应用程序数据逻辑的部分</p><p>View（视图）：是应用程序中处理数据显示的部分</p><p>Controller（控制器）：是应用程序中处理用户交互的部分</p><p><img src="/2019/05/di-yi-pian-jie-shao/1558360772252.gif" alt></p><blockquote><p>MVVM</p></blockquote><p>我们需要数据所以有了M，我们需要界面所以有了V，而我们需要找一个地方把M赋值给V来显示，所以有了C，然而我们忽略了一个很重要的操作：数据解析。于是为数据解析创建出了一个新的类：ViewModel</p><p>VM的出现使Controller存在感降低</p><p><strong>MVVM设计模式的优点</strong></p><ol><li><p>双向绑定技术，当Model变化时，View-Model会自动更新，View也会自动变化。很好的做到数据的一致性</p></li><li><p>由于控制器的功能大都移动到View上处理，大大的对控制器进行了瘦身</p></li><li><p>View的功能进一步强化，具有控制的部分功能，</p></li></ol><p><strong>教程</strong></p><p><a href="https://vuejs.bootcss.com/" target="_blank" rel="noopener">中文文档</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ognl与值栈</title>
      <link href="/2019/05/ognl-yu-zhi-zhan.html"/>
      <url>/2019/05/ognl-yu-zhi-zhan.html</url>
      
        <content type="html"><![CDATA[<h1 id="Ognl-Object-Graph-Navigation-Language"><a href="#Ognl-Object-Graph-Navigation-Language" class="headerlink" title="Ognl(Object-Graph Navigation Language)"></a>Ognl(Object-Graph Navigation Language)</h1><p><strong>是什么</strong></p><p>强大的表达式语言，通过它简单一致的表达式语法。可以存取对象的属性，调用对象的方法。遍历整个对象</p><p><strong>与EL表达式优势</strong></p><p>OGNL 对象图像导航语言。EL表达式只能从域中获取数据。OGNL可以调用对象方法，获取struts值栈的数据</p><p><strong>功能</strong></p><ul><li>支持运算符</li><li>对象方法</li><li>静态方法调用</li><li>访问OGNL上下文</li><li>操作集合对象</li><li>可以创建对象</li></ul><p><strong>使用要素</strong></p><ol><li>表达式</li><li>根对象</li><li>Context对象</li></ol><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>Ognl核心OgnlContext()</p><h4 id="存取数据"><a href="#存取数据" class="headerlink" title="存取数据"></a>存取数据</h4><p><strong>根对象存取数据</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@org</span><span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">t1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> OgnlException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//Ognl 使用</span>        OgnlContext ognlContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OgnlContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stu<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stu<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stu<span class="token punctuation">.</span><span class="token function">setJob</span><span class="token punctuation">(</span><span class="token string">"Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stu<span class="token punctuation">.</span><span class="token function">setSchool</span><span class="token punctuation">(</span><span class="token string">"Home Learn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ognlContext<span class="token punctuation">.</span><span class="token function">setRoot</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//存数据 根对象</span>        <span class="token comment" spellcheck="true">/*取所有数据        *        *》》》 Student{name='张三', age=26, job='Student', school='Home Learn'}         * */</span>        Object root <span class="token operator">=</span> Ognl<span class="token punctuation">.</span><span class="token function">getRoot</span><span class="token punctuation">(</span>ognlContext<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*        *   取单个数据        * 》》》张三        * */</span>        Object root1 <span class="token operator">=</span> ognlContext<span class="token punctuation">.</span><span class="token function">getRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object name <span class="token operator">=</span> Ognl<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> ognlContext<span class="token punctuation">,</span> root1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>非根对象存取数据</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@org</span><span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> OgnlException <span class="token punctuation">{</span>        OgnlContext ognlContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OgnlContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*对象*/</span>        stu<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stu<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stu<span class="token punctuation">.</span><span class="token function">setJob</span><span class="token punctuation">(</span><span class="token string">"Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stu<span class="token punctuation">.</span><span class="token function">setSchool</span><span class="token punctuation">(</span><span class="token string">"Home Learn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ognlContext<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Student"</span><span class="token punctuation">,</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取root</span>        Object root <span class="token operator">=</span> ognlContext<span class="token punctuation">.</span><span class="token function">getRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student astu <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span>Ognl<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"#Student"</span><span class="token punctuation">,</span> ognlContext<span class="token punctuation">,</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>astu<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意点：非根对象不可以取单一字段取的时候取的就是存的内容。表达式前加上#</p><h4 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h4><ul><li>调用普通方法</li><li>调用静态方法</li></ul><pre><code>@org.junit.Testpublic void f3() throws OgnlException {        OgnlContext ognlContext = new OgnlContext();        Object root = ognlContext.getRoot();        //调用普通方法        Object value = Ognl.getValue(&quot;&#39;hello&#39;.length()&quot;, ognlContext,root );        System.out.println(value);System.out.println(Integer.MAX_VALUE);        //调用静态方法        Object value1 = Ognl.getValue(&quot;@java.lang.Math@random()&quot;, ognlContext, root);        System.out.println(value1);}</code></pre><h1 id="值栈"><a href="#值栈" class="headerlink" title="值栈"></a>值栈</h1><p>ValueStack实际上就是一个容器。是一个接口，实现类是OgnlValueStack。</p><p>当用于访问action对象的业务方法时首先会创建ActionContext对象。OgnlValueStack对象Action对象。</p><p>Struts默认拦截器会将请求中的数据进行封装。并入ValueStack栈顶。</p><p>Struts框架数据都保存在ValueStack中，不存域中。因为存到域中只能在页面中进行提取。而在栈值中可以在任意地方取出数据。</p><p>ValueStack贯穿整个action生命周期。action一旦创建，就会创建一个valuestack对象。</p><h3 id="值栈的内部结构"><a href="#值栈的内部结构" class="headerlink" title="值栈的内部结构"></a>值栈的内部结构</h3><p>值栈分为根区与非根区</p><p>根区：存放当前action相关数据</p><p>非根区：是一些整个程序相关数据 比如req域、 session域 、application域。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>goods<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取值栈</span>        ValueStack valueStack <span class="token operator">=</span> ActionContext<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValueStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*域中写入信息*/</span>        ActionContext<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"啊哈"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ActionContext<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"Sessions"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ActionContext<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"Application"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>valueStack<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过查看断点</p><p><img src="/2019/05/ognl-yu-zhi-zhan/1557039743564.png" alt></p><h4 id="存放数据与出栈"><a href="#存放数据与出栈" class="headerlink" title="存放数据与出栈"></a>存放数据与出栈</h4><p><strong>根区</strong></p><pre><code>//获取值栈ValueStack valueStack = ActionContext.getContext().getValueStack();valueStack.push(); /*两个方法等价*/valueStack.getRoot().push();</code></pre><p><strong>非根区</strong></p><pre><code>//获取值栈ValueStack valueStack = ActionContext.getContext().getValueStack();ActionContext.getContext().put(&quot;name&quot;, &quot;啊哈&quot;);</code></pre><p>如果出栈则使用<code>pop()</code>方法</p><h5 id="在页面调试数据"><a href="#在页面调试数据" class="headerlink" title="在页面调试数据"></a>在页面调试数据</h5><ol><li>打开开发者模式</li></ol><pre><code>&lt;constant name=&quot;struts.devMode&quot; value=&quot;true&quot;&gt;&lt;/constant&gt;</code></pre><ol start="2"><li>JSP页面</li></ol><pre><code>&lt;%@ taglib prefix=&quot;s&quot; uri=&quot;/struts-tags&quot;%&gt;&lt;s:debug&gt;&lt;/s:debug&gt;</code></pre><h4 id="页面展示数据"><a href="#页面展示数据" class="headerlink" title="页面展示数据"></a>页面展示数据</h4><p><strong>取根元素</strong></p><pre><code>&lt;a href=&quot;date.action?name=篮子&amp;price=66.6&quot;&gt;Click！&lt;/a&gt;</code></pre><pre><code>&lt;!--Success.jsp--&gt;&lt;%@ taglib prefix=&quot;s&quot; uri=&quot;/struts-tags&quot;%&gt;&lt;s:property  value=&quot;name&quot;/&gt;&lt;s:property value=&quot;price&quot;&gt;&lt;/s:property&gt;</code></pre><p>直接就可以取出栈顶元素。</p><p><strong>非根元素</strong></p><p><code>#</code>+名称</p><pre><code>&lt;s:property value=&quot;#name&quot;/&gt;&lt;s:property value=&quot;#session.name&quot;/&gt; #获取session域数据&lt;s:property value=&quot;#application.name&quot;/&gt; #获取application域数据</code></pre><p><strong>调用方法</strong></p><pre><code>&lt;s:property  value=&quot;&#39;itao&#39;.length()&quot;/&gt;</code></pre><p><strong>静态方法</strong></p><pre><code>&lt;!--允许静态访问--&gt;&lt;constant name=&quot;struts.ognl.allowStaticMethodAccess&quot; value=&quot;true&quot;&gt;&lt;/constant&gt;</code></pre><pre><code>&lt;s:property value=&quot;@java.lang.Math@random()&quot;/&gt;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Struts2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接受参数</title>
      <link href="/2019/05/jie-shou-can-shu.html"/>
      <url>/2019/05/jie-shou-can-shu.html</url>
      
        <content type="html"><![CDATA[<h4 id="接受参数"><a href="#接受参数" class="headerlink" title="接受参数"></a>接受参数</h4><p>三种方式</p><ul><li>完全解耦</li><li>原生ServletAPI</li><li>接口注入方式</li></ul><blockquote><p>完全解耦</p></blockquote><p><strong>Demo-获取表单的提交数据</strong></p><pre><code>&lt;index.jsp&gt;&lt;form action=&quot;hobby.action&quot;&gt;    用户名：&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;&lt;br&gt;    密码：&lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;&lt;br&gt;    &lt;input type=&quot;radio&quot; name=&quot;fruit&quot; value=&quot;apple&quot; &gt;苹果    &lt;input type=&quot;radio&quot; name=&quot;fruit&quot; value=&quot;banana&quot; &gt;香蕉    &lt;input type=&quot;radio&quot; name=&quot;fruit&quot; value=&quot;pear&quot; &gt;梨    &lt;input type=&quot;submit&quot;&gt;&lt;/form&gt;&lt;!--struts.xml--&gt;&lt;struts&gt;    &lt;package name=&quot;unit1&quot; extends=&quot;struts-default&quot;&gt;            &lt;action name=&quot;hobby&quot; class=&quot;Unit1.HobbyAction&quot; &gt;&lt;/action&gt;    &lt;/package&gt;&lt;/struts&gt;</code></pre><pre><code>import com.opensymphony.xwork2.ActionContext;import com.opensymphony.xwork2.ActionSupport;import org.apache.struts2.dispatcher.HttpParameters;import org.apache.struts2.dispatcher.Parameter;import java.util.Map;import java.util.Set;public class HobbyAction extends ActionSupport {    public String execute(){        System.out.println(&quot;接受表单&quot;);        /*接受表单的数据|参数*/        //获取参数        ActionContext context = ActionContext.getContext();        //获取参数        HttpParameters parameters = context.getParameters();        //获取单个指定参数        String username = parameters.get(&quot;username&quot;).getValue();        System.out.println(username);        //获取全部参数        Set&lt;Map.Entry&lt;String, Parameter&gt;&gt; entries = parameters.entrySet();        for(Map.Entry&lt;String,Parameter&gt;entry: entries){            System.out.print(entry.getKey() + &quot;\t\t&quot;);            System.out.print(entry.getValue() + &quot;\n&quot;);        }        return null;    }}</code></pre><h5 id="往域中提交数据"><a href="#往域中提交数据" class="headerlink" title="往域中提交数据"></a>往域中提交数据</h5><pre><code>ActionContext context = ActionContext.getContext();//reqcontext.put(&quot;属性&quot;,&quot;值&quot;);//session域context.getSession().put(&quot;属性&quot;,值&quot;);//application域context.getAoolication().put(&quot;属性&quot;,&quot;值&quot;)</code></pre><pre><code>//提取数据${属性}</code></pre><blockquote><p>原生ServletAPI</p></blockquote><pre><code>public class HobbyAction extends ActionSupport {    public String execute(){        System.out.println(&quot;接受表单&quot;);        //获取原生API        HttpServletRequest request = ServletActionContext.getRequest();        //获取单个参数        String username = request.getParameter(&quot;username&quot;);        System.out.println(username);        //获取多个参数        Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();        for(Map.Entry&lt;String,String[]&gt;entry : parameterMap.entrySet()){            System.out.println(entry.getKey() + &quot;\t\t&quot;+ Arrays.toString(entry.getValue()));        }        //域中存数据        request.setAttribute(&quot;&quot;, &quot;&quot;);        request.getSession().setAttribute(&quot;&quot;, &quot;&quot;);        ServletActionContext.getServletContext().setAttribute(&quot;&quot;, &quot;&quot;);        return null;    }}</code></pre><blockquote><p>接口注入方式</p></blockquote><pre><code>public class HobbyAction implements ServletRequestAware, ServletContextAware {    private HttpServletRequest httpServletRequest;    private ServletContext servletContext; //获取context    public String execute(){        System.out.println(&quot;接受表单&quot;);            //Main_Code        return null;    }    @Override    public void setServletRequest(HttpServletRequest httpServletRequest) {        this.httpServletRequest = httpServletRequest;    }    @Override    public void setServletContext(ServletContext servletContext) {        this.servletContext = servletContext;    }}</code></pre><h5 id="配置全局结果页"><a href="#配置全局结果页" class="headerlink" title="配置全局结果页"></a>配置全局结果页</h5><p>先去自己的action找结果页，如果没有再到全局结果页</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>global-results</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span> <span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>/login.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>global-results</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="Struts接受参数"><a href="#Struts接受参数" class="headerlink" title="Struts接受参数"></a>Struts接受参数</h4><p>三种方式</p><p><strong>提供属性set方法方式.</strong></p><p>例如：一个学生信息表有姓名、年龄、工作、学校字段 。提供set方法会自动接受参数并且转换类型</p><pre><code>public class HobbyAction extends ActionSupport {    private String name;    private Integer age;    private String job;    private String school;    public void setName(String name) {        this.name = name;    }    public void setAge(Integer age) {        this.age = age;    }    public void setJob(String job) {        this.job = job;    }    public void setSchool(String school) {        this.school = school;    }    public String execute(){        System.out.println(&quot;接受表单&quot;);        System.out.println(name);        System.out.println(age);        System.out.println(job);        System.out.println(school);        return null;    }}</code></pre><p><strong>domain属性接受参数</strong></p><ol><li>创建一个接受参数的模型</li><li>Action当中提供一个对象属性，提供对象属性的get|set方法</li><li>JSP页面需要带上Action当中对象属性的名称</li></ol><pre><code>/*建立模型*/public class Student {    private String name;    private Integer age;    private String job;    private String school;    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }    public Integer getAge() {        return age;    }    public void setAge(Integer age) {        this.age = age;    }    public String getJob() {        return job;    }    public void setJob(String job) {        this.job = job;    }    public String getSchool() {        return school;    }    public void setSchool(String school) {        this.school = school;    }    @Override    public String toString() {        return &quot;Student{&quot; +                &quot;name=&#39;&quot; + name + &#39;\&#39;&#39; +                &quot;, age=&quot; + age +                &quot;, job=&#39;&quot; + job + &#39;\&#39;&#39; +                &quot;, school=&#39;&quot; + school + &#39;\&#39;&#39; +                &#39;}&#39;;    }}</code></pre><pre><code>/*Action*/public class HobbyAction extends ActionSupport {    private Student stu;    public Student getStu() {        return stu;    }    public void setStu(Student stu) {        this.stu = stu;    }    public String execute(){        System.out.println(&quot;接受表单&quot;);        System.out.println(stu);        return null;    }}</code></pre><pre><code>&lt;!--index.jsp--&gt;&lt;form action=&quot;hobby.action&quot;&gt;    姓名：&lt;input type=&quot;text&quot; name=&quot;stu.name&quot;&gt;&lt;br&gt;    年龄：&lt;input type=&quot;text&quot; name=&quot;stu.age&quot;&gt;&lt;br&gt;    职业：&lt;input type=&quot;text&quot; name=&quot;stu.job&quot;&gt;&lt;br&gt;    学校：&lt;input type=&quot;text&quot; name=&quot;stu.school&quot;&gt;&lt;br&gt;    &lt;input type=&quot;submit&quot;&gt;&lt;/form&gt;</code></pre><p><strong>模型驱动</strong></p><ol><li>创建模型</li><li>Action实现接口ModelDriver<t></t></li><li>实现接口方法getModel()</li><li>创建模型对象在接口方法中返回</li></ol><pre><code>public class HobbyAction extends ActionSupport implements ModelDriven&lt;Student&gt; {    private Student stu = new Student();    @Override    public Student getModel() {        return stu;    }    /*模型驱动*/    public String execute(){        System.out.println(&quot;接受表单&quot;);        System.out.println(stu);        return null;    }}</code></pre><pre class="line-numbers language-jsp"><code class="language-jsp">    <form action="hobby.action">    姓名：<input type="text" name="name"><br>    年龄：<input type="text" name="age"><br>    职业：<input type="text" name="job"><br>    学校：<input type="text" name="school"><br>    <input type="submit">  </form><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="接收参数错误处理"><a href="#接收参数错误处理" class="headerlink" title="接收参数错误处理"></a>接收参数错误处理</h5><p>接收参数如果输入值错误则会引发错误。所以我们需要对错误进行处理。</p><pre><code>全局结果页    &lt;result name=&quot;input&quot;&gt;/error.jsp&lt;/result&gt;</code></pre><p>只要有任何一个拦截器在执行过程当中出现错误都会向错误信息当中添加错误信息。</p><p>如果没有直接到目标action,如果有就跳转到input逻辑视图</p>]]></content>
      
      
      
        <tags>
            
            <tag> Struts2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Struts2基本使用</title>
      <link href="/2019/05/struts2-ji-ben-shi-yong.html"/>
      <url>/2019/05/struts2-ji-ben-shi-yong.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Stuts2是一个基于MVC设计的web应用框架。</p><p><strong>执行流程</strong></p><p><img src="/2019/05/struts2-ji-ben-shi-yong/1557044037444.png" alt></p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ol><li>创建web工程</li><li>引入jar包</li><li>创建jsp文件</li></ol><pre><code>&lt;a href=&quot;hello.action&quot;&gt;Yo!&lt;/a&gt;</code></pre><ol start="4"><li>编写Action类</li></ol><p>Action类是最基本的逻辑处理单元，在MVC模式中分发器分给不同的Action类来处理请求。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloAction</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"收到了请求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"Success"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回结果</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>创建配置文件<code>struts.xml</code></li></ol><p>所有的请求与分发以及其他配置都在这个文件里定义。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span> <span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE struts PUBLIC        <span class="token string">"-//Apache Software Foundation//DTD Struts Configuration 2.5//EN"</span>        <span class="token string">"http://struts.apache.org/dtds/struts-2.5.dtd"</span><span class="token operator">></span><span class="token operator">&lt;</span>struts<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token keyword">package</span> name<span class="token operator">=</span><span class="token string">"struts"</span> <span class="token keyword">extends</span><span class="token operator">=</span><span class="token string">"struts-default"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>action name<span class="token operator">=</span><span class="token string">"hello"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"Unit1.HelloAction"</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>结果页<span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>result name<span class="token operator">=</span><span class="token string">"Success"</span><span class="token operator">></span><span class="token operator">/</span>tao<span class="token punctuation">.</span>jsp<span class="token operator">&lt;</span><span class="token operator">/</span>result<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>action<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">package</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>struts<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>前端控制器<code>web.xml</code></li></ol><p>这个配置非常简单，提供简单的过滤器 并设置所有的请求(/*) 都要通过这个过滤器</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>web<span class="token operator">-</span>app xmlns<span class="token operator">=</span><span class="token string">"http://xmlns.jcp.org/xml/ns/javaee"</span>         xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>         xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span><span class="token string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span>         version<span class="token operator">=</span><span class="token string">"4.0"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>filter<span class="token operator">></span>        <span class="token operator">&lt;</span>filter<span class="token operator">-</span>name<span class="token operator">></span>action2<span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">-</span>name<span class="token operator">></span>        <span class="token operator">&lt;</span>filter<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>struts2<span class="token punctuation">.</span>dispatcher<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>StrutsPrepareAndExecuteFilter<span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">></span>    <span class="token operator">&lt;</span>filter<span class="token operator">-</span>mapping<span class="token operator">></span>        <span class="token operator">&lt;</span>filter<span class="token operator">-</span>name<span class="token operator">></span>action2<span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">-</span>name<span class="token operator">></span>        <span class="token operator">&lt;</span>url<span class="token operator">-</span>pattern<span class="token operator">></span><span class="token operator">/</span><span class="token operator">*</span><span class="token operator">&lt;</span><span class="token operator">/</span>url<span class="token operator">-</span>pattern<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">-</span>mapping<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>web<span class="token operator">-</span>app<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h4><p><img src="/2019/05/struts2-ji-ben-shi-yong/1556939323232.png" alt></p><h5 id="配置文件加载顺序"><a href="#配置文件加载顺序" class="headerlink" title="配置文件加载顺序"></a>配置文件加载顺序</h5><p><strong>源码</strong></p><ul><li>init_DefaultProperties();</li><li>init_TraditionalXmlConfigurations();</li><li>init_LegacyStrutsProperties();</li><li>init_CustomConfigurationProviders();</li><li>init_FilterInitParameters();</li><li>init_AliasStandardObjects();</li></ul><p><strong>配置文件加载顺序</strong></p><ul><li>default.properties</li><li>struts-default.xml</li><li>struts-plugin.xml</li><li>struts.xml</li><li>struts.properties</li><li>web.xml</li></ul><p>注意：后配的会把前配置的覆盖</p><h5 id="配置文件细解"><a href="#配置文件细解" class="headerlink" title="配置文件细解"></a>配置文件细解</h5><p>常用的配置文件<code>web.xml</code>  <code>struts.xml</code>  <code>struts.properties</code>  <code>struts-default.xml</code></p><p><code>struts.xml</code></p><p>struts.xml主要用来建立动作Action类与视图的映射。这个文件以<struts>为根元素的，子元素包括package、constant、bean、include。</struts></p><p>package包，这个包为了更好管理action配置</p><ul><li>name 包的名称不能重名</li><li>extends 继承那个包。</li><li>namespace 命名空间。与action标签的name属性共同决定了路径访问</li><li>abstract 为了让别人继承而使用的。</li></ul><p>action</p><p>action用来定义一个动作，每个动作都需要一个名称反应动作的含义。</p><ul><li>name</li><li>class 类的全路径</li><li>method 执行Action中的那个方法</li><li>converter 自定义类型转换器</li></ul><p>result</p><p>它用来指定结果类型，即定义在动作完成后将控制权转到那里。一个action可能会有多个result元素，每个元素对应动作方法的一种返回值。</p><p><strong>常量配置</strong></p><p>在struts2修该常量。可以在struts.xml中进行修改。也可以在struts.properties修改web.xml中修改。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--struts.xml--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constant</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>___<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>___<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>    ...    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>include</strong></p><p>配置文件可以引入其他配置文件。适合团队合作开发</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--struts.xml--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>itao.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>web.xml</code></p><p>Web应用都应该有一个配置文件<code>web.xml</code> 文件用来对整个应用程序进行配置。</p><p><strong>配置Struts2核心的名称和实现类</strong></p><pre><code>&lt;filter&gt;        &lt;filter-name&gt;action2&lt;/filter-name&gt;        &lt;filter-class&gt;org.apache.struts2.dispatcher.filter.StrutsPrepareAndExecuteFilter&lt;/filter-class&gt;&lt;/filter&gt;</code></pre><p><strong>使用配置的Filter名称拦截所有URL请求</strong></p><pre><code>&lt;filter-mapping&gt;        &lt;filter-name&gt;action2&lt;/filter-name&gt;        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;&lt;/filter-mapping&gt;</code></pre><h4 id="Action类的写法"><a href="#Action类的写法" class="headerlink" title="Action类的写法"></a>Action类的写法</h4><p>Action起始就是一个普通的Java类。类包含一个execute()方法</p><ul><li>普通类</li><li>接口Action</li><li>继承ActionSupport</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloAction</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"收到了请求!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"Success"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回结果</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接口定义了5个常量可以直接拿来使用</p><p><code>String SUCCESS=&quot;success&quot;</code>  <code>None</code> <code>ERROR</code> <code>INPUT</code>  <code>LOGIN</code></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>opensymphony<span class="token punctuation">.</span>xwork2<span class="token punctuation">.</span>Action<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Method1</span> <span class="token keyword">implements</span> <span class="token class-name">Action</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">return</span> SUCCESS<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>import com.opensymphony.xwork2.ActionSupport;public class Method2 extends ActionSupport {    @Override    public String execute() throws Exception {        return SUCCESS;//返回成功    }}</code></pre><h4 id="Action方法访问"><a href="#Action方法访问" class="headerlink" title="Action方法访问"></a>Action方法访问</h4><p><strong>常规写法</strong></p><pre><code>&lt;!--index.jsp--&gt;&lt;body&gt;    &lt;a href=&quot;add.action&quot;&gt;添加&lt;/a&gt;    &lt;a href=&quot;del.action&quot;&gt;删除&lt;/a&gt;    &lt;a href=&quot;update.action&quot;&gt;修改&lt;/a&gt;    &lt;a href=&quot;find.action&quot;&gt;查看&lt;/a&gt;&lt;/body&gt;</code></pre><pre><code>&lt;package name=&quot;ac_method&quot; extends=&quot;struts-default&quot; namespace=&quot;&quot;&gt;        &lt;action name=&quot;add&quot; class=&quot;Unit1.Method1&quot; method=&quot;add&quot;&gt;&lt;/action&gt;        &lt;action name=&quot;del&quot; class=&quot;Unit1.Method1&quot; method=&quot;del&quot;&gt;&lt;/action&gt;        &lt;action name=&quot;update&quot; class=&quot;Unit1.Method1&quot; method=&quot;update&quot;&gt;&lt;/action&gt;        &lt;action name=&quot;find&quot; class=&quot;Unit1.Method1&quot; method=&quot;find&quot;&gt;&lt;/action&gt;&lt;/package&gt;</code></pre><pre><code>import com.opensymphony.xwork2.ActionSupport;public class Method1 extends ActionSupport {    public String add(){        System.out.println(&quot;Click 添加&quot;);        return null;    }    public String del(){        System.out.println(&quot;Click 删除&quot;);        return null;    }    public String update(){        System.out.println(&quot;Click 修改&quot;);        return null;    }    public String find(){        System.out.println(&quot;Click 查看&quot;);        return null;    }}</code></pre><p>简单写法 <strong>通配符写法</strong></p><pre><code>&lt;a href=&quot;goods_add.action&quot;&gt;添加&lt;/a&gt;&lt;a href=&quot;goods_del.action&quot;&gt;删除&lt;/a&gt;&lt;a href=&quot;goods_update.action&quot;&gt;修改&lt;/a&gt;&lt;a href=&quot;goods_find.action&quot;&gt;查看&lt;/a&gt;</code></pre><p>method=”{1}” 1表示前面匹配第几个*。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--___.xml--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ac_method<span class="token punctuation">"</span></span> <span class="token attr-name">extends</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>struts-default<span class="token punctuation">"</span></span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>goods_*<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Unit1.Method1<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{1}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!-- 允许通过通配符访问的方法 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>allowed-methods</span><span class="token punctuation">></span></span>add,update,del,find<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>allowed-methods</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>action</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>package</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用通配符调用方法，需要在内部验证是否允许访问该方法。</p><p><strong>动态方法访问</strong></p><p>默认不开启动态访问的，所以要修改</p><pre><code>&lt;constant name=&quot;struts.enable.DynamicMethodInvocation&quot; value=&quot;true&quot;&gt;&lt;/constant&gt;&lt;package name=&quot;ac_method&quot; extends=&quot;struts-default&quot; namespace=&quot;&quot;&gt;        &lt;action name=&quot;goods&quot; class=&quot;Unit1.Method1&quot;&gt;                &lt;!-- 允许通过通配符访问的方法 --&gt;                &lt;allowed-methods&gt;add,update,del,find&lt;/allowed-methods&gt;        &lt;/action&gt;&lt;/package&gt;</code></pre><pre><code>&lt;a href=&quot;goods!add.action&quot;&gt;添加&lt;/a&gt;&lt;a href=&quot;goods!del.action&quot;&gt;删除&lt;/a&gt;&lt;a href=&quot;goods!update.action&quot;&gt;修改&lt;/a&gt;&lt;a href=&quot;goods!find.action&quot;&gt;查看&lt;/a&gt;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Struts2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-Map集合</title>
      <link href="/2019/05/java-map-ji-he.html"/>
      <url>/2019/05/java-map-ji-he.html</url>
      
        <content type="html"><![CDATA[<h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><ul><li>HashMap</li></ul><p>最常用的Map,它根据键的HashCode 值存储数据,根据键可以直接获取它的值，具有很快的访问速度。HashMap最多只允许一条记录的键为Null(多条会覆盖);允许多条记录的值为 Null。非同步的</p><ul><li>TreeMap</li></ul><p>能够把它保存的记录根据键(key)排序,默认是按升序排序，也可以指定排序的比较器，当用Iterator 遍历TreeMap时，得到的记录是排过序的。TreeMap不允许key的值为null。非同步的</p><ul><li>Hashtable</li></ul><p>ey和value的值均不允许为null;它支持线程的同步，即任一时刻只有一个线程能写Hashtable,因此也导致了Hashtale在写入时会比较慢</p><ul><li>LinkedHashMap</li></ul><p>保存了记录的插入顺序，在用Iterator遍历LinkedHashMap时，先得到的记录肯定是先插入的.在遍历的时候会比HashMap慢。key和value均允许为空，非同步的。</p><h4 id="插入元素"><a href="#插入元素" class="headerlink" title="插入元素"></a>插入元素</h4><pre><code>public static void  main(String[] args){    HashMap&lt;Character, Integer&gt; map = new HashMap&lt;&gt;();    map.put(&#39;a&#39;,6);    map.put(&#39;b&#39;, 87);    System.out.println(map);}&gt;&gt;&gt; {a=6, b=87}</code></pre><h4 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h4><pre><code>Integer num = map.get(&#39;b&#39;);</code></pre><h4 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h4><pre><code>map.remove(&#39;b&#39;);</code></pre><h4 id="清空map"><a href="#清空map" class="headerlink" title="清空map"></a>清空map</h4><pre><code>map.clear();</code></pre><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><p><strong>方式一</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span>Character key<span class="token operator">:</span>map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token operator">+</span><span class="token string">"\t"</span><span class="token operator">+</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>本质是两个集合</p><p><code>map.keySet()</code></p><p><code>map.values()</code></p><p><strong>方式二</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>Character<span class="token punctuation">,</span>Integer<span class="token operator">></span>entry <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>方式三：迭代器</strong></p><pre class="line-numbers language-java"><code class="language-java">Iterator<span class="token operator">&lt;</span>Character<span class="token operator">></span> it <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Character key <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>方式四：entrySet()</strong></p><p><code>entrySet()</code> 返回此地图中包含的映射的Set视图</p><pre class="line-numbers language-java"><code class="language-java">Iterator<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>Character<span class="token punctuation">,</span> Integer<span class="token operator">>></span> it <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>Character<span class="token punctuation">,</span> Integer<span class="token operator">></span> entry <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>遍历速度测试</strong></p><p>for循环是比较慢的，最快的是entrySet迭代器遍历</p><h4 id="Map排序"><a href="#Map排序" class="headerlink" title="Map排序"></a>Map排序</h4><p><strong>TreeMap 排序</strong></p><p>使用比较器</p><p>返回值-1逆序 返回值1顺序</p><pre><code>public static void  main(String[] args){    TreeMap&lt;Character, Integer&gt; map = new TreeMap&lt;&gt;(new Comparator&lt;Character&gt;() {        @Override        public int compare(Character o1, Character o2) {            return -1;        }    });    map.put(&#39;a&#39;,6);    map.put(&#39;b&#39;, 87);    map.put(&#39;c&#39;, 666);    Iterator&lt;Map.Entry&lt;Character, Integer&gt;&gt; it = map.entrySet().iterator();    System.out.println(map);}</code></pre><p><strong>按照value排序</strong></p><pre><code>public static void  main(String[] args){    TreeMap&lt;Character, Integer&gt; map = new TreeMap&lt;&gt;();    map.put(&#39;a&#39;,700);    map.put(&#39;b&#39;, 400);    map.put(&#39;c&#39;, 800);    //通过ArrayList构造函数把map.entrySet()转换成list    ArrayList&lt;Map.Entry&lt;Character,Integer&gt;&gt; list = new ArrayList&lt;Map.Entry&lt;Character, Integer&gt;&gt;(map.entrySet());    //通过比较器实现比较排序    Collections.sort(list, new Comparator&lt;Map.Entry&lt;Character, Integer&gt;&gt;() {        @Override        public int compare(Map.Entry&lt;Character, Integer&gt; o1, Map.Entry&lt;Character, Integer&gt; o2) {            return o1.getValue().compareTo(o2.getValue());        }    });    System.out.println(map);}</code></pre><h4 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h4><ul><li>clear()</li><li>remove(Object key)</li><li>put(Object key, Object value)</li><li>putAll(Map t) Map复制</li><li>entrySet() 返回 Map 中所包含映射的 Set 视图.可以使用 getKey() 和 getValue() 方法</li><li>keySet()</li><li>values()</li><li>get(Object key)</li><li>containsKey(Object key)</li><li>containsValue(Object value)</li><li>isEmpty()</li><li>size()</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>选择元素</title>
      <link href="/2019/05/xuan-ze-yuan-su.html"/>
      <url>/2019/05/xuan-ze-yuan-su.html</url>
      
        <content type="html"><![CDATA[<h2 id="选择被操作的元素"><a href="#选择被操作的元素" class="headerlink" title="选择被操作的元素"></a>选择被操作的元素</h2><h4 id="基本的CSS选择"><a href="#基本的CSS选择" class="headerlink" title="基本的CSS选择"></a>基本的CSS选择</h4><ul><li>类选择器</li><li>id选择器</li><li><code>*</code></li><li>selector1,selector2,selectorN</li></ul><h4 id="层次选择器"><a href="#层次选择器" class="headerlink" title="层次选择器"></a>层次选择器</h4><ul><li>ser1 ser2 后代选择器</li><li>parent&gt;child 子选择器</li><li>prev+ next 相邻兄弟选择器</li><li>prev ~ siblings 任意兄弟选择器</li></ul><h4 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h4><ul><li>first 获取第一个元素</li><li>last</li><li>even 匹配所有索引值为偶数的元素</li><li>odd  匹配所有索引值为奇数的元素</li><li>not(selector) 去除所有与给定选择器匹配的元素<pre><code>//查找没有选中的input元素$(&quot;input:not(:checked)&quot;)</code></pre></li><li>eq(index)匹配一个给定索引值的元素</li><li>gt(index)匹配所有大于给定索引值的元素</li><li>lt(index)</li></ul><hr><ul><li>header 匹配标题元素</li><li>animated匹配执行动画的元素</li><li>focus 匹配当前获取焦点的元素</li><li>root 选择该文档的根元素</li></ul><h4 id="子元素"><a href="#子元素" class="headerlink" title="子元素"></a>子元素</h4><ul><li>:first-child</li><li>:first-of-type</li><li>:last-child</li><li>:last-of-type</li><li>:nth-child</li><li>:nth-last-child()</li><li>:nth-last-of-type()</li><li>:nth-of-type()</li><li>:only-child</li><li>:only-of-type</li></ul><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><ul><li>[attribute] 指定属性的元素</li><li>[attribute=value] 属性是特定值的元素</li><li>[attribute!=value] 属性不是特定值的元素</li><li>[attribute^=value] 匹配给定的属性是以某些值开始的元素</li><li>[attribute$=value] 匹配给定的属性是以某些值结尾的元素</li><li>[attribute*=value] 匹配给定的属性是以包含某些值的元素</li><li>[attrSel1][attrSel2][attrSelN] 复合属性选择器，需要同时满足多个条件时使用</li></ul><pre><code>//选择具有src的属性$(&#39;[src]&#39;)//id属性且name属性以man结尾$(&quot;input[id][name$=&#39;man&#39;]&quot;)</code></pre><h4 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h4><ul><li>:hidden</li><li>:visible 匹配所有的可见元素</li></ul><h4 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h4><ul><li>:input</li><li>:text</li><li>:password</li><li>:radio</li><li>:checkbox</li><li>:submit</li><li>:image</li><li>:reset</li><li>:button</li><li>:file</li></ul><hr><ul><li>:enabled</li><li>:disabled</li><li>:checked</li><li>:selected</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS-边框</title>
      <link href="/2019/05/css-bian-kuang.html"/>
      <url>/2019/05/css-bian-kuang.html</url>
      
        <content type="html"><![CDATA[<h1 id="Border"><a href="#Border" class="headerlink" title="Border"></a>Border</h1><p>CSS3增加了三种边框属性</p><ul><li>border-radius 圆角边框</li><li>border-shadow 边框阴影</li><li>border-image 图片边框</li></ul><h4 id="圆角边框"><a href="#圆角边框" class="headerlink" title="圆角边框"></a>圆角边框</h4><p><code>border-radius</code></p><pre><code>.box{            width:300px;            height:150px;            background:#2b542c;            border-radius: 10px;        }</code></pre><p><img src="/2019/05/css-bian-kuang/1556771167793.png" alt></p><p>当然也可以设置不同的弧度的圆角</p><pre><code>.box{            width:300px;            height:150px;            background:#2b542c;            border-top-right-radius:50%;            border-bottom-left-radius: 50%;        }</code></pre><p><img src="/2019/05/css-bian-kuang/1556771286896.png" alt></p><h4 id="边框阴影"><a href="#边框阴影" class="headerlink" title="边框阴影"></a>边框阴影</h4><p><code>box-shadow</code></p><p>参数值：</p><ul><li>h-shadow 水平位置</li><li>v-shadow 垂直位置</li><li>blur 阴影模糊距离</li><li>spread 阴影尺寸</li><li>color 颜色</li><li>inset 外部阴影还是内部阴影</li></ul><pre><code>box-shadow: 0px 3px 8px 0 rgba(0,0,0,.2);</code></pre><p><img src="/2019/05/css-bian-kuang/1556771699629.png" alt></p><h4 id="图片边框"><a href="#图片边框" class="headerlink" title="图片边框"></a>图片边框</h4><ul><li>border-image-source 图片路径</li><li>border-image-slice 内偏移</li><li>border-image-width 边框的宽度</li><li>border-image-outset 超出边框的量</li><li>border-image-repeat 是否平铺</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> CSS3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS-元素定位</title>
      <link href="/2019/05/css-yuan-su-ding-wei.html"/>
      <url>/2019/05/css-yuan-su-ding-wei.html</url>
      
        <content type="html"><![CDATA[<h1 id="关于元素定位的核心概念"><a href="#关于元素定位的核心概念" class="headerlink" title="关于元素定位的核心概念"></a>关于元素定位的核心概念</h1><h2 id="构建块"><a href="#构建块" class="headerlink" title="构建块"></a>构建块</h2><p>CSS 采用盒子模型来处理每一个 HTML 元素，盒子可以是一个 “块级” 盒子，也可以是一个 “内联” 盒子</p><h2 id="包含元素"><a href="#包含元素" class="headerlink" title="包含元素"></a>包含元素</h2><p>如果一个块级元素位于另一个块级内部，那么这个外部的框就成为父元素</p><h2 id="控制元素的位置"><a href="#控制元素的位置" class="headerlink" title="控制元素的位置"></a>控制元素的位置</h2><p>CSS 中包含三种用于控制页面布局的定位机制：普通流 | 相对定位 | 绝对定位。</p><ul><li>普通流</li><li>相对定位</li><li>绝对定位 (脱离标准流)</li><li>固定定位 (脱离标准流)</li><li>浮动元素 (脱离标准流)</li></ul><p>任何元素从普通流脱离时，盒子会产生重叠。可以使用 z-index 属性来控制将哪个盒子显示在上层</p><h3 id="定位流"><a href="#定位流" class="headerlink" title="定位流"></a>定位流</h3><h4 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h4><p><code>position:absolute</code></p><p>绝对定位不区分块级元素 / 行内元素 / 行内块级元素，可以设置宽 高</p><p><strong>规律</strong></p><ul><li>默认情况下所有绝对定位的元素，无论有没有祖先元素都会以 body 作为参考点</li><li>绝对定位的元素祖先元素也是定位流，那么这个绝对定位的元素就会以那个祖先元素作为参考点</li><li>定位流指 绝对定位 / 相对定位 / 固定定位 (唯有静态定位不行)</li><li>绝对定位的祖先元素也是定位流， 而且祖先元素中有多个元素都是定位流，那么这个绝对定位的元素会以离它最近的那个定位流祖先元素为参考点</li></ul><p><strong>牢记</strong></p><p>子绝父相</p><p><strong>注意</strong></p><ul><li>绝对定位的元素若以 body 为参考点，其实是以网页首屏的宽度和高度作为参考点，而不是以整个网页的宽度和高度作为参考点</li><li>一个绝对定位的元素会忽略祖先元素的 padding 属性</li></ul><h4 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h4><p><code>position:relative</code></p><ul><li>相对定位是相对于自己以前在标准流中的位置来移动</li><li>相对定位是不脱离标准流的，会在标准流中占一份空间</li><li>同一个方向上的定位属性只能使用一个</li><li>相对定位区分块级元素 / 行内元素 / 行内块级元素</li><li>相对定位设置 margin/padding 属性是根据未定位之前的位置移动的</li></ul><h4 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h4><p><code>position:fixed</code></p><p>固定定位与背景关联方式很像</p><p>背景定位 <code>(background-attachment:fixed)</code>可以让背景图片不随着滚动条的滚动而滚动</p><p>固定定位 (position:fixed) 可以让某个盒子不随着滚动条的滚动而滚动</p><p><strong>注意</strong></p><ul><li>固定定位的元素脱离标准流，不占用标准流的空间</li><li>固定定位和绝对定位一样不区分行内 / 块级 / 行内块元素</li></ul><h5 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h5><ol><li><code>z-index</code>属性。z-index 属性的作用是专门用于控制定位流元素的覆盖关系的</li><li>默认情况定位流的元素会覆盖标准流的元素</li><li>定位流的元素会盖住前面的定位流</li></ol><ul><li>如果两个元素的父元素都没有设置 z-index 属性，那么谁的 z-index 属性大 谁就显示在上面</li><li>如果两个元素的父元素设置了 z-index 属性，子元素的 z-index 属性就失效</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> CSS3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSV文件存储</title>
      <link href="/2019/04/python-csvsave.html"/>
      <url>/2019/04/python-csvsave.html</url>
      
        <content type="html"><![CDATA[<h1 id="CSV文件存储"><a href="#CSV文件存储" class="headerlink" title="CSV文件存储"></a>CSV文件存储</h1><p>CSV，（Comma-Separated Values）其文件以纯文本形式存储表格数据。</p><h3 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> csv<span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'data.csv'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#打开data.csv文件</span>    writer <span class="token operator">=</span> csv<span class="token punctuation">.</span>writer<span class="token punctuation">(</span>f<span class="token punctuation">,</span> delimiter<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#分隔符为逗号</span>    writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'ID'</span><span class="token punctuation">,</span><span class="token string">'NAME'</span><span class="token punctuation">,</span><span class="token string">'AGE'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#writerow()可以写入一行数据</span>    writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'001'</span><span class="token punctuation">,</span><span class="token string">'Tashi'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'002'</span><span class="token punctuation">,</span> <span class="token string">'Aha'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'003'</span><span class="token punctuation">,</span> <span class="token string">'Yile'</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>说明</p></blockquote><ul><li>writerow()写入一行数据</li><li>writerows()写入多行数据</li></ul><h3 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> csv<span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'data.csv'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    reader <span class="token operator">=</span> csv<span class="token punctuation">.</span>reader<span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> reader<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Json存储</title>
      <link href="/2019/04/python-jsonsave.html"/>
      <url>/2019/04/python-jsonsave.html</url>
      
        <content type="html"><![CDATA[<h1 id="JSON格式"><a href="#JSON格式" class="headerlink" title="JSON格式"></a>JSON格式</h1><h3 id="转换JSON"><a href="#转换JSON" class="headerlink" title="转换JSON"></a>转换JSON</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> jsonstr <span class="token operator">=</span> <span class="token triple-quoted-string string">"""[    {           "id":"001",        "name":"Aha",        "age":"18"    },    {        "id":"002",        "name":"Tashi",        "age":"20"    }]"""</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span>data <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#可以将JSON文本字符串转换JSON对象</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">str</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token string">'001'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Aha'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token string">'18'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token string">'002'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Tashi'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token string">'20'</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">list</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="输出JSON"><a href="#输出JSON" class="headerlink" title="输出JSON"></a>输出JSON</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> jsondata <span class="token operator">=</span><span class="token punctuation">[</span>    <span class="token punctuation">{</span>           <span class="token string">"id"</span><span class="token punctuation">:</span><span class="token string">"001"</span><span class="token punctuation">,</span>        <span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"Aha"</span><span class="token punctuation">,</span>        <span class="token string">"age"</span><span class="token punctuation">:</span><span class="token string">"18"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token string">"id"</span><span class="token punctuation">:</span><span class="token string">"002"</span><span class="token punctuation">,</span>        <span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"Tashi"</span><span class="token punctuation">,</span>        <span class="token string">"age"</span><span class="token punctuation">:</span><span class="token string">"20"</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span>str <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>type<span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token string">"001"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Aha"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token string">"18"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token string">"002"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Tashi"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token string">"20"</span><span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">str</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="写入JSON格式文件"><a href="#写入JSON格式文件" class="headerlink" title="写入JSON格式文件"></a>写入JSON格式文件</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> jsondata <span class="token operator">=</span><span class="token punctuation">[</span>    <span class="token punctuation">{</span>           <span class="token string">"id"</span><span class="token punctuation">:</span><span class="token string">"001"</span><span class="token punctuation">,</span>        <span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"Aha"</span><span class="token punctuation">,</span>        <span class="token string">"age"</span><span class="token punctuation">:</span><span class="token string">"18"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token string">"id"</span><span class="token punctuation">:</span><span class="token string">"002"</span><span class="token punctuation">,</span>        <span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"Tashi"</span><span class="token punctuation">,</span>        <span class="token string">"age"</span><span class="token punctuation">:</span><span class="token string">"20"</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'data.json'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>data<span class="token punctuation">,</span> indent<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hibernate-多表问题</title>
      <link href="/2019/04/hibernate-duo-biao-wen-ti.html"/>
      <url>/2019/04/hibernate-duo-biao-wen-ti.html</url>
      
        <content type="html"><![CDATA[<p><strong>建立模型</strong></p><p>学生表与成绩表</p><p><img src="/2019/04/hibernate-duo-biao-wen-ti/1556529801826.png" alt></p><blockquote><ol><li>创建ORM模型</li></ol></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Getter<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Setter<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashSet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@Setter</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Students</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Long stu_id<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//主键</span>    <span class="token keyword">private</span> String stu_name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//姓名</span>    <span class="token keyword">private</span> Integer stu_age<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//年龄</span>    <span class="token keyword">private</span> Integer stu_gra<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//外键</span>    <span class="token comment" spellcheck="true">//一个学生多个成绩</span>    <span class="token keyword">private</span> Set<span class="token operator">&lt;</span>Grade<span class="token operator">></span> gras <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>import lombok.Getter;import lombok.Setter;@Setter@Getterpublic class Grade {    private Integer gra_id;    private String gra_name;    private Integer gra_num;    private Integer stu_gra;    //某个成绩只对一个学生有效    private Students stu;}</code></pre><blockquote><ol start="2"><li>配置映射文件<br><code>grade.hbm.xml</code>  <code>students.hbm.xml</code></li></ol></blockquote><pre><code>&lt;!--student.hbm.xml--&gt;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE hibernate-mapping PUBLIC        &quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;        &quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;&gt;&lt;hibernate-mapping&gt;    &lt;class name=&quot;多表查询.Students&quot; table=&quot;students&quot; &gt;        &lt;!--建立类属性哪一个是主键  还要跟数据库当中主键进行对象--&gt;        &lt;id name=&quot;stu_gra&quot; column=&quot;stu_gra&quot; &gt;            &lt;generator class=&quot;native&quot;/&gt;        &lt;/id&gt;        &lt;!--建立类中的普通属性与数据库当中字段进行关联--&gt;        &lt;property name=&quot;stu_name&quot; column=&quot;stu_name&quot; /&gt;        &lt;property name=&quot;stu_age&quot; column=&quot;stu_age&quot;/&gt;        &lt;!--一对多的配置--&gt;        &lt;set name=&quot;gras&quot; &gt; &lt;!--属性名称--&gt;            &lt;key column=&quot;stu_link_gra&quot;&gt; &lt;!--外键名称--&gt;&lt;/key&gt;            &lt;one-to-many class=&quot;多表查询.Grade&quot;&gt;&lt;/one-to-many&gt;        &lt;/set&gt;    &lt;/class&gt;&lt;/hibernate-mapping&gt;</code></pre><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE hibernate-mapping PUBLIC        &quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;        &quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;&gt;&lt;hibernate-mapping&gt;    &lt;class name=&quot;多表查询.Grade&quot; table=&quot;students&quot; &gt;        &lt;!--建立类属性哪一个是主键  还要跟数据库当中主键进行对象--&gt;        &lt;id name=&quot;gra_id&quot; column=&quot;gra_id&quot; &gt;            &lt;generator class=&quot;native&quot;/&gt;        &lt;/id&gt;        &lt;!--建立类中的普通属性与数据库当中字段进行关联--&gt;        &lt;property name=&quot;gra_name&quot; column=&quot;gra_name&quot; /&gt;        &lt;property name=&quot;gra_num&quot; column=&quot;gra_num&quot;/&gt;        &lt;many-to-one name=&quot;stu&quot; class=&quot;多表查询.Students&quot; column=&quot;stu_link_gra&quot;&gt;        &lt;/many-to-one&gt;    &lt;/class&gt;&lt;/hibernate-mapping&gt;</code></pre><p>注意：映射不需要添加外键。<code>&lt;set&gt;&lt;/set&gt;</code> 中name属性指的是ORM模型中最后的变量，colmn是数据库中外键的名称，class属性是ORM类的路径。</p><p>加载映射文件</p><pre><code>&lt;!--hibernate.cfg.xml--&gt;&lt;!--映射文件--&gt;&lt;mapping resource=&quot;多表查询/grade.hbm.xml&quot;/&gt;&lt;mapping resource=&quot;多表查询/student.hbm.xml&quot;/&gt;</code></pre><blockquote><ol start="3"><li>操作</li></ol></blockquote><p><strong>添加</strong></p><pre><code>@Test    public void t1(){        Session session = HibernateUtil.openSession();        Transaction transaction = session.beginTransaction();//开启事务        /*配置*/        Students stu1 = new Students();        Students stu2 = new Students();        Students stu3 = new Students();        stu1.setStu_name(&quot;小红&quot;);        stu2.setStu_name(&quot;小明&quot;);        stu3.setStu_name(&quot;小刚&quot;);        Grade gra1 = new Grade();        Grade gra2 = new Grade();        Grade gra3 = new Grade();        gra1.setGra_name(&quot;数学&quot;); gra1.setGra_num(90);        gra2.setGra_name(&quot;语文&quot;); gra1.setGra_num(75);        gra3.setGra_name(&quot;英语&quot;); gra1.setGra_num(80);        stu1.getGras().add(gra1); /*添加*/        stu2.getGras().add(gra2);        stu3.getGras().add(gra3);        session.save(stu1); /*保存*/        session.save(stu2);        session.save(stu3);        session.save(gra1);        session.save(gra2);        session.save(gra3);        transaction.commit();    }</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Hibernate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scrapy-爬虫</title>
      <link href="/2019/04/scrapy-pa-chong.html"/>
      <url>/2019/04/scrapy-pa-chong.html</url>
      
        <content type="html"><![CDATA[<p><strong>安装</strong></p><pre><code>pip install --upgrade pip pip install Scrapy</code></pre><p><strong>爬取步骤</strong></p><ol><li>新建项目</li><li>明确目标</li><li>制作爬虫</li><li>存储内容</li></ol><blockquote><p>新建项目</p></blockquote><pre><code>scrapy startproject FTry</code></pre><p><img src="/2019/04/scrapy-pa-chong/1556434893665.jpg" alt></p><ul><li>scrapy.cfg 配置文件</li><li>items.py 项目的目标文件</li><li>pipelines.py 项目的管道文件</li><li>settings.py 项目设置文件</li><li>spiders 存储爬虫代码目录</li></ul><blockquote><p>明确目标</p></blockquote><pre><code>scrapy genspider baidu www.baidu.com</code></pre><p><img src="/2019/04/scrapy-pa-chong/1556436394356.png" alt></p><ul><li>name 用于区别spider。该名字是唯一的。</li><li>start_urls 包含了Spider在启动时进行爬取的url列表。</li><li>parse() 是spider的一个方法。调用时，每个初始URL完成下载后生成的response对象将会作为唯一的参数传递给该函数。</li></ul><blockquote><p>制作爬虫</p></blockquote><pre><code>scrapy crawl your_app_name</code></pre><p><img src="/2019/04/scrapy-pa-chong/1556434869102.jpg" alt></p><h4 id="选择器简介"><a href="#选择器简介" class="headerlink" title="选择器简介"></a>选择器简介</h4><p>从网页中提取数据。Scrapy使用了一种基于Xpath与CSS表达式机制。</p><p><strong>基本方法</strong></p><ul><li>xpath()</li><li>css() 传入css表达式</li><li>extract() 序列化该结点并返回list</li><li>re() 根据传入的正则表达式对数据进行提取，返回unicode字符串list列表</li></ul><h4 id="保存数据"><a href="#保存数据" class="headerlink" title="保存数据"></a>保存数据</h4><p><code>-o 文件.格式</code></p><ul><li>json 标准json格式</li><li>jl 一行一行的格式</li><li>csv </li><li>xml</li><li>ftp 远程文件上传</li></ul><pre><code>scrapy crawl your_app_name -o   target_name.jsonscrapy crawl your_app_name -o ftp://......</code></pre><h4 id="Shell-操作"><a href="#Shell-操作" class="headerlink" title="Shell 操作"></a>Shell 操作</h4><p>Scrapy内置的 Scrapy shell  可以在命令行操作</p><p><strong>开始</strong></p><pre><code>scrapy shell &quot;http://www.itaolaity.com&quot;</code></pre><p><img src="/2019/04/scrapy-pa-chong/1556441373691.png" alt></p><p><strong>css选择</strong></p><pre><code>response.css(&#39;__选择规则___&#39;)</code></pre><p>返回一个selector的集合。如果想要提取文本可以：<code>extract()</code></p><p><img src="/2019/04/scrapy-pa-chong/1556441486823.png" alt></p><p>需要注意的是如果我们添加<code>::text</code>到css查询 那我们可以直接取出html代码里的文本否则取出的是完整的标签文本</p><p>如果只想要第一个结果<code>extract_first()</code></p><hr><h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a><strong>应用</strong></h4><p><strong>目标爬取导航网站</strong></p><p>就拿我自己的网站来爬取吧。获取网站的标题、时间、种类</p><p><img src="/2019/04/scrapy-pa-chong/1556443631441.png" alt></p><p>首先对获取的数据进行建模</p><pre><code># items.pyimport scrapyclass FtryItem(scrapy.Item):    title = scrapy.Field()    time = scrapy.Field()    type = scrapy.Field()    pass</code></pre><pre><code>#itao.pyimport scrapyfrom ..items import *class ItaoSpider(scrapy.Spider):    name = &#39;itao&#39;    allowed_domains = [&#39;www.itaolaity.com&#39;]    start_urls = [&#39;http://www.itaolaity.com/&#39;]    def parse(self, response):        post_item = response.css(&#39;.post-card-container&#39;)        for item in post_item:            title = item.css(&#39;.post-card-title::text&#39;).extract_first(),            time = item.css(&#39;.post-card-info span:nth-child(1)::text&#39;).extract_first(),            type = item.css(&#39;.post-card-info span:nth-child(2)::text&#39;).extract_first(),            oIt = FtryItem()            oIt[&#39;title&#39;] = title            oIt[&#39;time&#39;] = time            oIt[&#39;type&#39;] = type            yield  oIt</code></pre><p>保存json格式文件</p><pre><code>scrapy crawl itao -o main.json</code></pre><p><img src="/2019/04/scrapy-pa-chong/1556443760761.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> Scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django-Cookie与Session</title>
      <link href="/2019/04/django-cookie-yu-session.html"/>
      <url>/2019/04/django-cookie-yu-session.html</url>
      
        <content type="html"><![CDATA[<p><code>cookie</code>在网站中，http请求是无状态的。也就是说即使第一次和服务器连接后并且登录成功后，第二次请求服务器依然不能知道当前请求是哪个用户。cookie的出现就是为了解决这个问题，第一次登录后服务器返回一些数据（cookie）给浏览器，然后浏览器保存在本地，当该用户发送第二次请求的时候，就会自动的把上次请求存储的cookie数据自动的携带给服务器，服务器通过浏览器携带的数据就能判断当前用户是哪个了。cookie存储的数据量有限，不同的浏览器有不同的存储大小，但一般不超过4KB。因此使用cookie只能存储一些小量的数据</p><p><code>session</code>session和cookie的作用有点类似，都是为了存储用户相关的信息。不同的是，cookie是存储在本地浏览器，session是一个思路、一个概念、一个服务器存储授权信息的解决方案，不同的服务器，不同的框架，不同的语言有不同的实现。虽然实现不一样，但是他们的目的都是服务器为了方便存储数据的。session的出现，是为了解决cookie存储数据不安全的问题的</p><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p><strong>设置</strong></p><p>response对象来设置，设置cookie可以通过response.set_cookie来设置</p><pre><code>from django.shortcuts import renderfrom django.http import HttpResponsefrom django.template import loader,contextdef index(request):    response = render(request,&#39;index.html&#39;)    response.set_cookie(&quot;name&quot;,&quot;tashi&quot;)    return response</code></pre><p>参数</p><ul><li>key：这个cookie的key。</li><li>value：这个cookie的value。</li><li>max_age：最长的生命周期。单位是秒。</li><li>expires：过期时间。跟max_age是类似的，只不过这个参数需要传递一个具体的日期</li><li>path：对域名下哪个路径有效。默认是对域名下所有路径都有效。</li><li>domain：针对哪个域名有效。默认是针对主域名下都有效，如果只要针对某个子域名才有效，那么可以设置这个属性.</li><li>secure：是否是安全的，如果设置为True，那么只能在https协议下才可用。</li><li>httponly：默认是False。如果为True，那么在客户端不能通过JavaScript进行操作</li></ul><p><strong>删除</strong></p><p>通过delete_cookie即可删除cookie。实际上删除cookie就是将指定的cookie的值设置为空的字符串，然后使用将他的过期时间设置为0，也就是浏览器关闭后就过期</p><p><strong>获取</strong></p><p>获取浏览器发送过来的cookie信息。可以通过request.COOKIES来或者。这个对象是一个字典类型。</p><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><pre><code>def index(request):    request.session[&quot;name&quot;]=&quot;tashi&quot;    request.session[&quot;age&quot;] = &quot;20&quot;</code></pre><p><strong>常用方法</strong></p><ul><li><p>get：用来从session中获取指定值。</p></li><li><p>pop：从session中删除一个值。</p></li><li><p>keys：从session中获取所有的键。</p></li><li><p>items：从session中获取所有的值。</p></li><li><p>clear：清除当前这个用户的session数据。</p></li><li><p>flush：删除session并且删除在浏览器中存储的session_id，一般在注销的时候用得比较多。</p></li><li><p>set_expiry(value)：设置过期时间。</p></li></ul><p>整形：代表秒数，表示多少秒后过期。</p><p>0：代表只要浏览器关闭，session就会过期。</p><p>None：会使用全局的session配置。在settings.py中可以设置SESSION_COOKIE_AGE来配置全局的过期时间。默认是1209600秒，也就是2周的时间。</p><ul><li>clear_expired：清除过期的session。Django并不会清除过期的session，需要定期手动的清理，或者是在终端，使用命令行python manage.py clearsessions来清除过期的session</li></ul><p><strong>修改session的存储机制</strong></p><p>默认情况下，session数据是存储到数据库中的。当然也可以将session数据存储到其他地方。可以通过设置SESSION_ENGINE来更改session的存储位置</p><ul><li>django.contrib.sessions.backends.db使用数据库</li><li>django.contrib.sessions.backends.file使用文件来存储</li><li>django.contrib.sessions.backends.cache使用缓存来存储session</li><li>django.contrib.sessions.backends.cached_db在存储数据的时候，会将数据先存到缓存中，再存到数据库中。这样就可以保证万一缓存系统出现问题，session数据也不会丢失。在获取数据的时候，会先从缓存中获取，如果缓存中没有，那么就会从数据库中获取</li><li>django.contrib.sessions.backends.signed_cookies将session信息加密后存储到浏览器的cookie中</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django-表单</title>
      <link href="/2019/04/django-biao-dan.html"/>
      <url>/2019/04/django-biao-dan.html</url>
      
        <content type="html"><![CDATA[<h1 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h1><p>必须指定的东西</p><ul><li>目的地 用户将数据发送的目的</li><li>方式 发送数据的HTTP方法</li></ul><h2 id="Django自带表单类"><a href="#Django自带表单类" class="headerlink" title="Django自带表单类"></a>Django自带表单类</h2><h4 id="编写表单类"><a href="#编写表单类" class="headerlink" title="编写表单类"></a>编写表单类</h4><ul><li>提前导入forms模块</li><li>所有的表单类都要继承forms.Form类</li><li>每个表单字段都有自己的字段类型比如CharField</li><li>例子中的label用于设置说明标签</li></ul><pre><code>from django import formsclass MessageForm(forms.Form):    title = forms.CharField(max_length=20, min_length=3)    content = forms.CharField(widget=forms.Textarea)    email = forms.EmailField()    reply = forms.BooleanField(required=False)</code></pre><h4 id="渲染表单views-py"><a href="#渲染表单views-py" class="headerlink" title="渲染表单views.py"></a>渲染表单<code>views.py</code></h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponse<span class="token keyword">from</span> <span class="token punctuation">.</span>form <span class="token keyword">import</span> MessageForm <span class="token comment" spellcheck="true">#导入包</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>views<span class="token punctuation">.</span>generic <span class="token keyword">import</span> View <span class="token comment" spellcheck="true">#类视图</span><span class="token keyword">class</span> <span class="token class-name">IndexView</span>（View<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        form <span class="token operator">=</span> MessageForm        <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'index.html'</span><span class="token punctuation">,</span> context<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'form'</span><span class="token punctuation">:</span>form<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        form <span class="token operator">=</span> MessageForm<span class="token punctuation">(</span>request<span class="token punctuation">.</span>POST<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>form<span class="token punctuation">.</span>cleaned_data<span class="token punctuation">)</span>        <span class="token keyword">if</span> form<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#数据验证</span>            title <span class="token operator">=</span> form<span class="token punctuation">.</span>cleaned_data<span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">)</span>            content <span class="token operator">=</span> form<span class="token punctuation">.</span>cleaned_data<span class="token punctuation">(</span><span class="token string">'content'</span><span class="token punctuation">)</span>            email <span class="token operator">=</span> form<span class="token punctuation">.</span>cleaned_data<span class="token punctuation">(</span><span class="token string">'email'</span><span class="token punctuation">)</span>            reply <span class="token operator">=</span> form<span class="token punctuation">.</span>cleaned_data<span class="token punctuation">(</span><span class="token string">'reply'</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> content<span class="token punctuation">,</span> email<span class="token punctuation">,</span> reply<span class="token punctuation">)</span>        <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'Success'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#用来发表文章的视图</span><span class="token keyword">def</span> <span class="token function">Test</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    context <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'GET'</span><span class="token punctuation">:</span>        form <span class="token operator">=</span> ArticleForm        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"GET\n"</span><span class="token punctuation">,</span> form<span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        form <span class="token operator">=</span> ArticleForm<span class="token punctuation">(</span>request<span class="token punctuation">.</span>POST<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#表单绑定</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"POST\n"</span><span class="token punctuation">,</span> form<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>form<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 数据校验</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>form<span class="token punctuation">.</span>cleaned_data<span class="token punctuation">)</span>            title <span class="token operator">=</span> form<span class="token punctuation">.</span>cleaned_data<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span>            content <span class="token operator">=</span> form<span class="token punctuation">.</span>cleaned_data<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span>            c <span class="token operator">=</span> Article<span class="token punctuation">(</span>title<span class="token operator">=</span>title<span class="token punctuation">,</span> content<span class="token operator">=</span>content<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#保存数据库</span>            c<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>    context<span class="token punctuation">[</span><span class="token string">'form'</span><span class="token punctuation">]</span> <span class="token operator">=</span> form    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'test.html'</span><span class="token punctuation">,</span> context<span class="token operator">=</span>context<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="模板处理"><a href="#模板处理" class="headerlink" title="模板处理"></a>模板处理</h4><pre><code>&lt;form action=&quot;# &quot; method=&quot;post&quot;&gt;    {% csrf_token %}            form     &lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&gt;&lt;/form&gt;</code></pre><p><strong>常用字段</strong></p><ul><li>CharField<ul><li>max_length</li><li>required 字段是否是必须的</li></ul></li><li>EmailField</li><li>FloatField<ul><li>max_value</li><li>min_value</li></ul></li><li>IntegerField</li><li>URLField 接受<code>URL</code>格式的字符串</li></ul><p><strong>验证数据</strong></p><ul><li>错误提示<pre class="line-numbers language-python"><code class="language-python">email <span class="token operator">=</span> forms<span class="token punctuation">.</span>EmailField<span class="token punctuation">(</span>error_messages <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token string">'invalid'</span><span class="token punctuation">:</span><span class="token string">'请输入正确的邮箱'</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>常用验证器</strong></p><ol><li>MaxValueValidator 最大值</li><li>MinValueValidator 最小值</li><li>MinLengthValidator 验证最小长度</li><li>EmailValidator 验证邮箱格式</li><li>URLValidator验证URL格式</li><li>RegexValidator 正则表达式验证器</li></ol><pre><code>form django.core import validatorsclass SForm(forms.Form):    phone = forms.CharField(validators=[validators.RegexValidator(&#39;1[345678]\d{9}&#39;, message=&#39;请输入正确手机号&#39;)])</code></pre><p><strong>表单渲染格式</strong></p><ul><li>form.as_table</li><li>form.as_p</li><li>form.as_ul</li></ul><p>手动渲染表单字段</p><p><code>form.name_of_field</code></p><h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><hr><p><strong>前端</strong></p><ul><li><code>form</code>标签内 指定<code>enctype=&quot;multipart/form-data&quot;</code></li><li><code>form</code>标签内 <code>input</code>标签 指定name以及<code>type=‘file’</code></li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myfile<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>input</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token keyword">from</span> django<span class="token punctuation">.</span>views<span class="token punctuation">.</span>generic <span class="token keyword">import</span> View<span class="token keyword">import</span> os<span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponse<span class="token keyword">class</span> <span class="token class-name">IndexView</span><span class="token punctuation">(</span>View<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'index.html'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        myFile <span class="token operator">=</span> request<span class="token punctuation">.</span>FILES<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'myfile'</span><span class="token punctuation">)</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'Main.png'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            <span class="token keyword">for</span> chunk <span class="token keyword">in</span> myFile<span class="token punctuation">.</span>chunks<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>chunk<span class="token punctuation">)</span>        <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'OK'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用模型来处理上传文件</p></blockquote><p>通过<code>models.py</code>中指定的文件目录可以直接保存</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#models.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token keyword">class</span> <span class="token class-name">Article</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    file <span class="token operator">=</span> models<span class="token punctuation">.</span>FileField<span class="token punctuation">(</span>upload_to<span class="token operator">=</span><span class="token string">'Image'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># views.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token keyword">from</span> django<span class="token punctuation">.</span>views<span class="token punctuation">.</span>generic <span class="token keyword">import</span> View<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Article<span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponse<span class="token keyword">class</span> <span class="token class-name">IndexView</span><span class="token punctuation">(</span>View<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'index.html'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        file <span class="token operator">=</span> request<span class="token punctuation">.</span>FILES<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'myfile'</span><span class="token punctuation">)</span>        Article<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>file<span class="token operator">=</span>file<span class="token punctuation">)</span>        <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'OK!'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>指定MEDIA_ROOT 与 MEDIA_URL</p></blockquote><pre><code>#settings.py#添加MEDIA_ROOT = os.path.join(BASE_DIR, &#39;Image&#39;) #设置访问路径MEDIA_URL = &#39;&#39;</code></pre><blockquote><p>限制上传的文件扩展名:</p></blockquote><pre><code>from django.db import modelsfrom django.core import validators #验证class Article(models.Model):    file = models.FileField(validators=[validators.FileExtensionValidator([&#39;txt&#39;],message=&#39;必须为TXT格式的文件&#39;)])</code></pre><pre><code># forms.pyclass ArticleForm(forms.ModelForm):    class Meta:    model = Article    fields = &#39;__all__&#39;</code></pre><blockquote><p>上传图片</p></blockquote><p><code>models.py</code></p><ul><li>ImageField()</li></ul><p><code>forms.py</code></p><pre><code>class MyForm(forms.ModelForm):    class Meta:    model = Article #数据模型    fields = &#39;__all__&#39;</code></pre><p><strong>注意</strong>使用ImageField必须安装Pillow库<code>pip install pillow</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hibernate-主键生成策略</title>
      <link href="/2019/04/hibernate-zhu-jian-sheng-cheng-ce-lue.html"/>
      <url>/2019/04/hibernate-zhu-jian-sheng-cheng-ce-lue.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>概要</p></blockquote><ul><li>主键生成策略</li><li>持久化</li><li>一级缓存</li><li>事务管理</li></ul><h2 id="主键生成策略"><a href="#主键生成策略" class="headerlink" title="主键生成策略"></a>主键生成策略</h2><p><img src="/2019/04/hibernate-zhu-jian-sheng-cheng-ce-lue/1556031726793.png" alt></p><h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><p><strong>是什么</strong></p><p>将内存中的一个对象持久化到数据库的过程。Hibernate框架是一个持久化的框架</p><p><strong>持久化类</strong></p><p>Java类+映射文件</p><p><strong>编写步骤</strong></p><ol><li>对持久化类提供一个无参的构造方法。因为底层会通过反射创建对象</li><li>对内部私有的字段提供get方法与post方法。</li><li>对象持久化类提供一个ID与数据库当中的主键对应</li><li>持久化类中的属性使用包装类型</li></ol><p><strong>持久化划分</strong></p><ul><li>瞬时态</li><li>持久态</li><li>游离态、托管态</li></ul><p>瞬时态，刚new出对象时，还没有设置id，还没有被session管理。 持久态，拥有了id调用session方法，把对象给session被session管理 添加到session之后，对象一直处于持久态。游离态，把session关闭(close)。需要注意的是，持久态的对象会自动更新数据库。</p><p><img src="/2019/04/hibernate-zhu-jian-sheng-cheng-ce-lue/1556097027056.PNG" alt></p><p><img src="/2019/04/hibernate-zhu-jian-sheng-cheng-ce-lue/1556032864749.png" alt></p><h2 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h2><p><strong>是什么</strong></p><p>将数据存入到内存当中，使用的时候直接从缓存中获取</p><p><strong>一级缓存的特点</strong></p><ol><li>当调用save(),update(),saveOrUpdate() 时如果session缓存没有相应的对象，则会自动从数据库查询相应的信息。</li><li>当调用load(),get() 方法，以及Query 接口的list iterator方法会判断缓存当中是否存在该对象，有则返回，不会查询数据库。</li></ol><pre><code>@org.junit.Test    public void T9(){        Session session = HibernateUtil.openSession();        //开启事务        Transaction transaction = session.beginTransaction();        Students stu1 = session.get(Students.class, 3);        System.out.println(stu1);//会自动把数据存放到一级缓存        Students stu2 = session.get(Students.class, 3);//直接使用上个数据        System.out.println(stu2);        System.out.println(stu1 == stu2 );        //提交        transaction.commit();        //释放资源        session.close();    }</code></pre><h2 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h2><p>Hibernate设置事务的隔离级别。在核心配置文件<code>hibernate.cfg.xml</code>配置，通过数字来代表不同的隔离级别。</p><p><img src="/2019/04/hibernate-zhu-jian-sheng-cheng-ce-lue/1556034136178.png" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hibernate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hibernate-常用API</title>
      <link href="/2019/04/hibernate-chang-yong-api.html"/>
      <url>/2019/04/hibernate-chang-yong-api.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>抽取工具类</p></blockquote><pre><code>//Utilimport org.hibernate.Session;import org.hibernate.SessionFactory;import org.hibernate.cfg.Configuration;public class HibernateUtil {    public static final SessionFactory sessionFactory;        /*只需加载一次所以static*/    static {        //1. 加载Hibernate核心配置文件        Configuration configure = new Configuration().configure(); //就去找配置文件        //2. 创建sessionFactory        sessionFactory = configure.buildSessionFactory();    }    public static Session openSession(){        //3. 获取session        Session session = sessionFactory.openSession();        return session;    }}</code></pre><hr><p><strong>保存</strong></p><pre><code>@org.junit.Test    public void saveDemo()    {        Session session = HibernateUtil.openSession();        Students su = new Students();        su.setName(&quot;Tahsi&quot;);        su.setAge(6654);        su.setId(5);        //保存        session.save(su);        //释放        session.close();    }</code></pre><p><strong>查询</strong></p><pre><code>@org.junit.Test    public void queryOne(){        Session session = HibernateUtil.openSession();        // 查询一条        Students students = session.get(Students.class, 11); //ID为1的同学消息        System.out.println(students);        session.close();    }</code></pre><p><img src="/2019/04/hibernate-chang-yong-api/1556028998966.png" alt></p><pre><code>@org.junit.Test    public void Test7(){        Session session = HibernateUtil.openSession();        //开启实务        Transaction transaction = session.beginTransaction();        //HQL        Query query = session.createQuery(&quot;from  Demo1.Students&quot; );        List&lt;Students&gt; list = query.list();        for(Students s: list){            System.out.println(s);        }        //提交事务        transaction.commit();        session.close();    }</code></pre><p><img src="/2019/04/hibernate-chang-yong-api/1556029702994.png" alt></p><pre><code>/*原生SQL*/@org.junit.Test    public void Test8(){        Session session = HibernateUtil.openSession();        //开启实务        Transaction transaction = session.beginTransaction();        NativeQuery sqlQuery = session.createSQLQuery(&quot;select * from students&quot;);        List&lt;Object[]&gt; list = sqlQuery.list();        for(Object[] objects: list){            System.out.println(Arrays.toString(objects));        }        //提交事务        transaction.commit();        session.close();    }</code></pre><p><strong>修改</strong></p><pre><code>@org.junit.Test    public void updateDemo(){        Session session = HibernateUtil.openSession();        //开启实务        Transaction transaction = session.beginTransaction();        //更新操作        /*         * 注意 如果没有指定其他的字段 会把其他的字段设置为null         * */        Students su = new Students();        su.setId(1);        su.setName(&quot;李四&quot;);        su.setAge(15);        session.update(su);        //提交事务        transaction.commit();        session.close();    }</code></pre><pre><code>@org.junit.Test    public void Test4(){        Session session = HibernateUtil.openSession();        //开启实务        Transaction transaction = session.beginTransaction();        //更新操作        Students s = session.get(Students.class, 1);        s.setName(&quot;tao 666&quot;);        session.update(s);        //提交事务        transaction.commit();        session.close();    }</code></pre><p><strong>删除</strong></p><pre><code>@org.junit.Test    public void Test5(){        Session session = HibernateUtil.openSession();        //开启实务        Transaction transaction = session.beginTransaction();        //删除操作        Students s = session.get(Students.class, 1);        session.delete(s);        //提交事务        transaction.commit();        session.close();    }</code></pre><p><strong>保存或更新</strong></p><pre><code>@org.junit.Test    public void Test6(){        Session session = HibernateUtil.openSession();        //开启实务        Transaction transaction = session.beginTransaction();       Students s = new Students();       s.setName(&quot;mySQL&quot;);       session.saveOrUpdate(s);        //提交事务        transaction.commit();        session.close();    }</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Hibernate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hibernate-配置</title>
      <link href="/2019/04/hibernate-pei-zhi.html"/>
      <url>/2019/04/hibernate-pei-zhi.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>什么是持久化技术</p></blockquote><p>持久化技术。就是把数据保存到可永久保存的存储设备中。持久化的主要应用是将内存中的对象存储在关系型数据库中。</p><blockquote><p>什么是ORM</p></blockquote><p>对象关系映射。</p><p>通过ORM我们可以通过类的方式去操作数据库，而不用原生的SQL语句。通过把表映射成类，把行当作实例，把字段当作属性。</p><p>ORM在执行对象操作的时候最终还是会把对应的操作转换为数据库原生语句。</p><h4 id="新建工程"><a href="#新建工程" class="headerlink" title="新建工程"></a>新建工程</h4><p><strong>步骤</strong></p><ol><li>导入相关的包</li><li>创建orm类</li><li>创建Hibernate核心配置文件</li><li>创建映射关系</li><li>创建类执行</li></ol><p><strong>导包</strong></p><ul><li>必须依赖的包hibernate-release-5.3.1.Final\lib\required</li><li>数据库包</li><li>c3p0连接池c3p0.jar</li><li>单元测试junit-4.9.jar</li></ul><p><strong>创建ORM类</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//学生类</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Getter<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Setter<span class="token punctuation">;</span><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@Setter</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Students</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>   <span class="token keyword">private</span> String name<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token string">"Students{"</span> <span class="token operator">+</span>              <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>              <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>              <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>              <span class="token string">'}'</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>核心配置文件</strong></p><p><code>hibernate.cfg.xml</code></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token doctype">&lt;!DOCTYPE hibernate-configuration PUBLIC    "-//Hibernate/Hibernate Configuration DTD 3.0//EN"    "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hibernate-configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-factory</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 连接数据库的基本参数 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>connection.url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>jdbc:mysql://localhost:3306/hibernate_test?serverTimezone=UTC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>connection.driver_class<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>com.mysql.jdbc.Driver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>connection.username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>connection.password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置Hibernate的方言 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hibernate.dialect<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>org.hibernate.dialect.MySQL5Dialect<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 打印SQL --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hibernate.show_sql<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 格式化SQL --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hibernate.format_sql<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 自动创建表 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hibernate.hbm2ddl.auto<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>update<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapping</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Demo1/Students.hbm.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-factory</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hibernate-configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>创建映射关系</strong></p><p>通过xml的配置进行配置。</p><p><img src="/2019/04/hibernate-pei-zhi/1556095794450.PNG" alt></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE hibernate-mapping PUBLIC    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"        "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hibernate-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>class</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Demo1.Students<span class="token punctuation">"</span></span> <span class="token attr-name">table</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>students<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--建立类属性哪一个是主键  还要跟数据库当中主键进行对象--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>generator</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>native<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--建立类中的普通属性与数据库当中字段进行关联--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hibernate-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>执行</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>hibernate<span class="token punctuation">.</span>Session<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>hibernate<span class="token punctuation">.</span>SessionFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>hibernate<span class="token punctuation">.</span>Transaction<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>hibernate<span class="token punctuation">.</span>cfg<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*1.加载配置文件*/</span>        Configuration configure <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*2. 创建会话工厂 - JDBC连接 */</span>        SessionFactory sessionFactory <span class="token operator">=</span> configure<span class="token punctuation">.</span><span class="token function">buildSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*3. 获取session - JDBC连接对象 */</span>        Session session <span class="token operator">=</span> sessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Students per <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Students</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        per<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        per<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        per<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        session<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>per<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*释放资源*/</span>        session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sessionFactory<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2019/04/hibernate-pei-zhi/1556012406566.png" alt></p><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p><strong>映射配置</strong></p><p><img src="/2019/04/hibernate-pei-zhi/1556014193448.png" alt></p><p><code>hibernate-mapping标签</code></p><p>注意的是一个映射文件只可以有一个hibernate-mapping标签</p><p><code>class标签</code></p><p>作用：建立类与表的映射关系</p><p>属性：</p><ul><li>name 类的全路径</li><li>table 表名。类名与表名一直，table可以省略，如果没有该表，自动创建表</li><li>catalog</li><li>proxy 代理设置 为延迟加载提供支持</li><li>lazy 是否使用延迟加载</li><li>dynamic-update 指定生成Update SQL 时是否仅包含发生变动的字段</li><li>dynamic-insert 指定生成InsertSQL 时是否包含非空字段</li><li>mutable 类的实例是否可变</li></ul><p><code>id标签</code></p><p>作用：建立类中的属性与表中的主键对应关系</p><p>属性：</p><ul><li>name 属性的名称</li><li>column 数据库中主键的名称</li><li>length </li><li>type hibernate类型</li></ul><p><code>property标签</code></p><p>作用：建立类中的普通属性与表的对应关系</p><ul><li>name</li><li>type</li><li>column</li><li>access </li><li>not-null 属性值是否可以为空</li><li>generated 是否由数据库生成</li></ul><p><strong>核心配置</strong></p><p><img src="/2019/04/hibernate-pei-zhi/1556014516906.png" alt></p><p>自动建表<code>hibernate.hbm2ddl.auto</code></p><p>格式化SQL<code>hibernate.format_sql</code></p><p>显示SQL <code>hibernate.show_sql</code></p><p><strong>DTD配置</strong></p><p>File -&gt; Settings -&gt; Sehemas and DTD</p><p><img src="/2019/04/hibernate-pei-zhi/1556014950257.png" alt></p><p><strong>配置连接池</strong></p><pre><code>&lt;!--C3PO--&gt;        &lt;property name=&quot;connection.provider_class&quot;&gt;org.hibernate.c3p0.internal.C3P0ConnectionProvider&lt;/property&gt;        &lt;!--在连接池中可用的数据库连接的最少数目 --&gt;        &lt;property name=&quot;c3p0.min_size&quot;&gt;5&lt;/property&gt;        &lt;!--在连接池中所有数据库连接的最大数目  --&gt;        &lt;property name=&quot;c3p0.max_size&quot;&gt;20&lt;/property&gt;        &lt;!--设定数据库连接的过期时间,以秒为单位,        如果连接池中的某个数据库连接处于空闲状态的时间超过了timeout时间,就会从连接池中清除 --&gt;        &lt;property name=&quot;c3p0.timeout&quot;&gt;120&lt;/property&gt;        &lt;!--每3000秒检查所有连接池中的空闲连接 以秒为单位--&gt;        &lt;property name=&quot;c3p0.idle_test_period&quot;&gt;3000&lt;/property&gt;        &lt;!--设置事务的隔离级别--&gt;        &lt;property name=&quot;hibernate.connection.isolation&quot;&gt;4&lt;/property&gt;        &lt;!--创建一个session绑定到当前线程--&gt;        &lt;property name=&quot;current_session_context_class&quot;&gt;thread&lt;/property&gt;</code></pre><h2 id="日志查看"><a href="#日志查看" class="headerlink" title="日志查看"></a>日志查看</h2><p><strong>导包</strong></p><p><code>log4j-1.2.16.jar</code> </p><p><code>log4j.preperties</code>放在src目录下</p><p><strong>级别</strong></p><ul><li>error</li><li>warn</li><li>info</li><li>debug默认</li><li>trace</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Hibernate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSP-内置对象</title>
      <link href="/2019/04/jsp-nei-zhi-dui-xiang.html"/>
      <url>/2019/04/jsp-nei-zhi-dui-xiang.html</url>
      
        <content type="html"><![CDATA[<p>Jsp翻译成servlet之后，有9个对象定义并且初始化完毕，可以直接使用这些对象</p><ul><li>request 请求对象</li><li>response 响应对象</li><li>out 向客户端输出内容</li><li>session 会话信息</li><li>application 共享信息servletContext</li><li>pageContext</li><li>config 服务器配置可以获取初始化参数</li><li>page 转换servlet类的实例</li><li>exception 异常页面会有该对象</li></ul><h4 id="request"><a href="#request" class="headerlink" title="request"></a>request</h4><p>接受客户端提交的各种信息。</p><p><strong>常用方法</strong></p><ul><li>getParameter(String name) 获取客户端传给服务器的参数值</li><li>getParameterNames() 获取客户端传给服务器的所有参数的名字，返回结果时一个枚举实例</li><li>getCookies()</li><li>getCharacterEncoding()</li><li>getMethod()</li><li>getRequestURL()</li><li>getRemoteAddr() 获取客户端的IP地址</li><li>getServerName() 获取服务器的名字</li><li>getServerPort() 获取服务器的端口号</li><li>getServletPath() 获取客户端请求脚本的路径</li></ul><pre><code>&lt;%--客户使用的协议--%&gt;&lt;h1&gt;&lt;%= request.getProtocol()%&gt;&lt;/h1&gt;&lt;%--客户端请求脚本的路径--%&gt;&lt;h1&gt;&lt;%= request.getServletPath()%&gt;&lt;/h1&gt;&lt;%--提交信息的长度--%&gt;&lt;h1&gt;&lt;%= request.getContentLength()%&gt;&lt;/h1&gt;&lt;%--提交信息的方式--%&gt;&lt;h1&gt;&lt;%= request.getMethod()%&gt;&lt;/h1&gt;&lt;%--UserAgent头信息--%&gt;&lt;h1&gt;&lt;%= request.getHeader(&quot;User-Agent&quot;)%&gt;&lt;/h1&gt;&lt;%--Host头信息--%&gt;&lt;h1&gt;&lt;%= request.getHeader(&quot;Host&quot;)%&gt;&lt;/h1&gt;&lt;%--Ip地址--%&gt;&lt;h1&gt;&lt;%= request.getRemoteAddr()%&gt;&lt;/h1&gt;&lt;%--客户机名称--%&gt;&lt;h1&gt;&lt;%= request.getRemoteHost()%&gt;&lt;/h1&gt;&lt;%--服务器名称--%&gt;&lt;h1&gt;&lt;%= request.getServerName()%&gt;&lt;/h1&gt;&lt;%--服务器端口号--%&gt;&lt;h1&gt;&lt;%= request.getServerPort()%&gt;&lt;/h1&gt;</code></pre><h4 id="response"><a href="#response" class="headerlink" title="response"></a>response</h4><p>对客户请求做出响应。 向客户端发送数据</p><p><strong>常用方法</strong></p><ul><li>addCookie(Cookie cookie) 添加一个Cookie对象，保存客户端信息</li><li>addHeader(String name,String value) 添加HTTP头信息</li><li>constrainsHeader(String name) 判断名称头是否已经存在</li><li>flushBuffer()  强制吧缓冲区内容发送客户端</li><li>getBufferSize() 获取缓冲区大小</li><li>setHeader() </li><li>setRedirect(String url) 把响应发送到另一个位置进行处理</li></ul><pre><code>&lt;%--自动跳转连接--%&gt;&lt;%    response.setHeader(&quot;refresh&quot;,&quot;3;URL=http://www.baidu.com&quot;);%&gt;</code></pre><pre><code>// 禁用页面缓存&lt;%    response.setHeader(&quot;Cache-Control&quot;,&quot;no-cache&quot;);    response.setHeader(&quot;Pragma&quot;,&quot;no-cache&quot;);    response.setHeader(&quot;Expires&quot;,&quot;0&quot;);%&gt;</code></pre><h4 id="page"><a href="#page" class="headerlink" title="page"></a>page</h4><p>page对象表示当前一个JSP页面，可以理解为一个对象本身，即：把一个JSP当作一个对象来看待。</p><h4 id="out"><a href="#out" class="headerlink" title="out"></a>out</h4><p>　out对象用于向客户端发送文本数据</p><p> out对象的类型JspWriter，这是一个带有缓存功能的PrintWriter。默认8Kb,如果设置为0代表关闭out缓冲区直接写道response缓冲区。设置JSP页面的page指令的buffer属性可以调整它的缓存大小，甚至关闭它的缓存</p><p> <strong>常用方法</strong></p><ul><li>clear() 清除缓冲区数据</li><li>clearBuffer() 清除缓冲区并向用户输出</li><li>close() 关闭输出流</li><li>flush() 输出缓冲区的内容</li><li>isAutoFlush() 是否为自动刷新</li><li><p>print(String str) </p><h4 id="PageContext"><a href="#PageContext" class="headerlink" title="PageContext"></a>PageContext</h4></li></ul><p><strong>通过pageContext获得其他对象</strong></p><ul><li>getException方法返回exception隐式对象</li><li>getPage方法返回page隐式对象</li><li>getRequest方法返回request隐式对象</li><li>getResponse方法返回response隐式对象</li><li>getServletConfig方法返回config隐式对象</li><li>getServletContext方法返回application隐式对象</li><li>getSession方法返回session隐式对象</li><li>getOut方法返回out隐式对象</li></ul><p><strong>作为域对象</strong></p><ul><li>setAttribute()</li><li>getAttribute()</li><li>removeAttribute()</li><li>findAttribute()</li></ul><h4 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h4><p>Session是指客户端与服务器的一次会话，从客户端连到服务器开始到客户端与服务器断开连接</p><ul><li>getAttribute(String name)</li><li>getAttributeNames()</li><li>removeAttribute(String name)</li><li>setAttribute(String name, String value)</li><li>getCreationTimes() 返回创建session的时间</li><li>getId() 返回唯一标识符的Id</li><li>getLastAccessedTime() 返回该session相关的客户端最后发送请求的时间</li></ul><pre><code>&lt;%--Session创建时间--%&gt;&lt;h1&gt;&lt;%= session.getCreationTime()%&gt;&lt;/h1&gt;&lt;%--创建Session的ID--%&gt;&lt;h1&gt;&lt;%= session.getId()%&gt;&lt;/h1&gt;&lt;%--最近一次的请求时间--%&gt;&lt;h1&gt;&lt;%= session.getLastAccessedTime()%&gt;&lt;/h1&gt;&lt;%--取消Session使Session不可用--%&gt;&lt;%--&lt;h1&gt;&lt;%= session.invalidate()%&gt;&lt;/h1&gt;--%&gt;&lt;%--查看Session是否存在--%&gt;&lt;h1&gt;&lt;%= session.isNew()%&gt;&lt;/h1&gt;&lt;%--设置两次请求间隔多长时间--%&gt;&lt;h1&gt;&lt;% session.setMaxInactiveInterval(6000);%&gt;&lt;/h1&gt;</code></pre><h4 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h4><p>实现了用户间的数据共享问题，可存放全局变量。开始与服务器的启动直到服务器的关闭。</p><ul><li>Object getAttribute(String name) 返回给定名的属性值</li><li>Enumeration getAttributeNames() 返回所有可用属性名的枚举</li><li>void setAttribute(String name,Object obj) 设定属性的属性值</li><li>void removeAttribute(String name) 删除一属性及其属性值</li><li>String getServerInfo() 返回JSP(Servlet)引擎名及版本号</li><li>String getRealPath(String path) 返回一虚拟路径的真实路径</li><li>ServletContext getContext(String uripath) 返回指定WebApplication的application对象</li><li>int getMajorVersion() 返回服务器支持的Servlet API的最大版本号</li><li>int getMinorVersion() 返回服务器支持的Servlet API的最大版本号</li><li>String getMimeType(String file) 返回指定文件的MIME类型</li><li>URL getResource(String path) 返回指定资源(文件及目录)的URL路径</li><li>InputStream getResourceAsStream(String path) 返回指定资源的输入流</li><li>RequestDispatcher getRequestDispatcher(String uripath) 返回指定资源的RequestDispatcher对象</li><li>Servlet getServlet(String name) 返回指定名的Servlet</li><li>Enumeration getServlets() 返回所有Servlet的枚举</li><li>Enumeration getServletNames() 返回所有Servlet名的枚举</li><li>void log(String msg) 把指定消息写入Servlet的日志文件</li><li>void log(Exception exception,String msg) 把指定异常的栈轨迹及错误消息写入Servlet日志文件</li><li>void log(String msg,Throwable throwable) 把栈轨迹及Throwable异常信息写入Servlet日志文件</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> JSP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSP-基础</title>
      <link href="/2019/04/jsp-ji-chu.html"/>
      <url>/2019/04/jsp-ji-chu.html</url>
      
        <content type="html"><![CDATA[<h1 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h1><p>Java Server Pages</p><p><strong>是什么</strong></p><p>JSP是一种动态网页开发技术。它使用JSP标签在HTML网页中插入Java代码，其根本是一个简化的servlet设计</p><p><strong>为什么</strong></p><p>JSP页面可以与处理业务逻辑的Servlet一起使用</p><p><strong>工作原理</strong></p><p>本质就是一个Servlet。服务器在管理JSP页面分为两个阶段 转换阶段和执行阶段。第一次访问会被Web容器(Tomcat) 翻译成Servlet， index.jsp -&gt; index.jsp.java -&gt; index.jsp.class</p><p>下一次访问的时候就先看页面有没有变化，如果变化了就重新翻译</p><p><strong>基本模板</strong></p><pre><code>&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; pageEncoding=&quot;UTF-8&quot; %&gt;&lt;html&gt;  &lt;head&gt;    &lt;title&gt;JSP-Demo&lt;/title&gt;  &lt;/head&gt;  &lt;body&gt;  &lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p><strong>变量的三种表达方式</strong></p><ul><li>&lt;% Java_Code %&gt; 代码会被翻译成service方法内部</li><li>&lt;%= 变量或表达式 %&gt; 代码会被service方法内部print()</li><li>&lt;%! Java_Code %&gt; 代码会成为servlet成员变量</li></ul><blockquote><p>&lt;%=  %&gt; JSP表达式</p></blockquote><pre><code>&lt;%= new Date()%&gt;</code></pre><blockquote><p>&lt;%  %&gt; JSP脚本片段</p></blockquote><p>注意：</p><ul><li>&lt;%  %&gt; 中可以定义变量、语句 不能定义方法</li><li>严格遵循Java语法；每个语句后都有一个分号结束</li><li>多个脚本片段可以互相访问</li></ul><pre><code>&lt;%    for(int i=0; i&lt;5; i++) {        out.print(i);    }%&gt;</code></pre><blockquote><p>&lt;%!   %&gt; JSP声明</p></blockquote><p>JSP声明可用于定义JSP页面转换成的Servlet程序的静态代码块、成员变量和方法</p><p><strong>注释</strong></p><p><img src="/2019/04/jsp-ji-chu/1555921269542.png" alt></p><ul><li><!--  --> html代码注释</li><li>// 或 /**/ 可见范围：jsp源码、翻译后的servlet源码。页面时看不到的</li><li>&lt;%–   –%&gt; 可见范围：仅在jso源码可见</li></ul><h1 id="JSP指令"><a href="#JSP指令" class="headerlink" title="JSP指令"></a>JSP指令</h1><p>设置页面的相关信息，用于与其他jsp文件的通信</p><p><img src="/2019/04/jsp-ji-chu/1555922146251.png" alt></p><p><strong>基本语法</strong></p><p>&lt;%@指令  属性名=”值”%&gt;</p><blockquote><p>page 指令设置页面的属性和相关信息</p></blockquote><ul><li>contentType=”text/html;charset=UTF-8” 编码格式</li><li>pageEncoding文件编码</li><li>import引入Java的包和类</li><li>session</li><li>errorPage发生错误会跳转</li><li>isErrorPage</li><li>language</li><li>extends</li><li>buffer设置缓冲区</li><li>autoFlush</li><li>isThreadSafe</li><li>info</li><li>isELIgnored</li></ul><pre><code>&lt;%@ page import=&quot;java.util.Date&quot; %&gt;&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</code></pre><p><strong>import 属性</strong></p><p>自动导入包</p><ul><li>java.lang.*</li><li>javax.servlet.*</li><li>javax.servlet.jsp.*</li><li>javax.servlet.http.*</li></ul><p>手动导包</p><p>&lt;%@ page import=”java.util.<em>,java.io.</em>,java.sql.*”%&gt;</p><p><strong>errorPage属性</strong></p><ul><li>在web.xml文件中使用<error-page>元素为整个Web应用程序设置错误处理页面</error-page></li><li><error-page>元素有3个子元素，<error-code>、<exception-type>、<location></location></exception-type></error-code></error-page></li><li><error-code>子元素指定错误的状态码，例如：<error-code>404</error-code></error-code></li><li><exception-type>子元素指定异常类的完全限定名，例如：<exception-type>java.lang.ArithmeticException</exception-type></exception-type></li><li><location>子元素指定以“/”开头的错误处理页面的路径，例如：<location>/ErrorPage/404Error.jsp</location></location></li></ul><blockquote><p>include 指令 插入包含文件</p></blockquote><pre><code>&lt;%@    include file=&quot;/book.jsp&quot;%&gt;</code></pre><blockquote><p>taglib 指令 声明使用了那些标签库</p></blockquote><ul><li>JSP标签库</li><li>第三方库</li><li>自定义标签库</li></ul><p><strong>标签库</strong></p><ul><li>页面包含</li></ul><pre><code>    // 静态包含/*    将两个jsp页面拼接在一起，然后翻译servlet*/&lt;%@    include file=&quot;/header.jsp&quot;%&gt;&lt;%@    include file=&quot;/footer.jsp&quot;%&gt;// 动态包含/*    各自翻译自己的页面 然后引入*/&lt;jsp:include page=&#39;/header.jsp&#39;&gt;&lt;/jsp:include&gt;</code></pre><ul><li>请求转发</li></ul><pre><code>&lt;jsp:forward page=&quot;404.jsp&quot;&gt;&lt;/jsp:forward&gt;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> JSP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cookie与Session</title>
      <link href="/2019/04/cookie-yu-session.html"/>
      <url>/2019/04/cookie-yu-session.html</url>
      
        <content type="html"><![CDATA[<h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><p>Cookie是一种在客户端保存信息的技术。Servlet使用<code>java.servlet.Cookie</code> 封装一个Cookie信息。在ServletResponse接口中定义了addCookie方法 在ServletRequest接口定义了getCookie方法。</p><p><strong>常用方法</strong></p><ul><li>getName 获得Cookie名称</li><li>setValue | getValue 设置与获取Cookie的值</li><li>setMaxAge | getMaxAge 设置与获取Cookie在客户端的有效时间</li><li>setPath | getPath 设置与获取Cookie有效的路径</li><li>setDomain | getDomain 设置与获取Cookie有效域</li><li>setComment | getComment 设置与获取Cookie的注释部分</li><li>setVersion | getVersion 设置与获取Cookie的协议版本</li><li>setSecure | getSecure 设置与获取Cookie是否只能在安全的协议传输Cookie</li></ul><h4 id="存储Cookie"><a href="#存储Cookie" class="headerlink" title="存储Cookie"></a>存储Cookie</h4><ol><li>创建Cookie</li><li>发送Cookie</li><li>访问浏览器</li><li>设置存储时间</li><li>设置携带路径</li><li>删除Cookie</li></ol><pre><code>//1.创建CookieCookie cookie = new Cookie(&quot;name&quot;, &quot;tashi&quot;);cookie.setMaxAge(3600);//2. 写给客户端resp.addCookie(cookie);System.out.println(&quot;Finish~~&quot;);</code></pre><h4 id="存储时间"><a href="#存储时间" class="headerlink" title="存储时间"></a>存储时间</h4><p>默认为会话级别，打开浏览器关闭浏览器为一次会话</p><p><code>cookie.setMaxAge(int seconds)</code> 单位为秒</p><h4 id="携带路径"><a href="#携带路径" class="headerlink" title="携带路径"></a>携带路径</h4><p><code>cookie.setPath()</code></p><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p><code>cookie.setMaxAge(0)</code></p><h4 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h4><pre><code> protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        //1.创建Cookie        Cookie cookie = new Cookie(&quot;name&quot;, &quot;tashi&quot;);        cookie.setMaxAge(3600);        //2. 写给客户端        resp.addCookie(cookie); //添加Cookie        System.out.println(&quot;Finish&quot;);        //1. 获取Cookie        Cookie[] cookies = req.getCookies();        if(cookies!=null){            //取出每一个Cookie            for(Cookie cook :cookies){                String name = cook.getName();                String value = cook.getValue();                int maxAge = cook.getMaxAge();                System.out.println(&quot;\t\t&gt;&gt;&gt;&quot;+name+&quot;\t&quot;+value+&quot;\t&quot;+maxAge);            }        }    }</code></pre><hr><h1 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h1><p>session对象用来保存每个用户的用户信息和会话状态。Session由服务器自动创建，可以跟踪每个用户的操作状态。 相对于Cookie ，session是<strong>存储在服务器端</strong>的会话，相对安全</p><blockquote><p>如何在一个Servlet当中存数据在别的Servlet当中取出</p></blockquote><p>每一个用户访问服务器时，会给该用户分配它自己对应的存储空间，并且创建的存储空间有一个编号为SessionID，第一次访问时，会把对应的sessionID以Cookie的形式写给浏览器。下次访问的时候，会携带sessionID，找到当初创建的那个存储空间，在对应的存储空间当中取出数据。</p><pre><code> protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        HttpSession session = req.getSession();//拿到Session对象        session.setAttribute(&quot;Name&quot;, &quot;Tashi&quot;);        session.setAttribute(&quot;Age&quot;, &quot;20&quot;);        System.out.println(session.getAttribute(&quot;Name&quot;));    }</code></pre><p><strong>生命周期</strong></p><ol><li>创建。第一次执行<code>request.getSession()</code>时创建</li><li>销毁。服务器关闭时session过期，默认30分钟</li></ol><p><strong>常用接口方法</strong></p><ul><li>getId() 返回当前HttpSession对象的SessionId</li><li>getCreationTime() 对象创建的时间</li><li>getLastAccessedTime() 上一次被访问的时间</li><li>getMaxInactiveInterval | setMaxInactiveInterval()</li><li>isNew() 是否新创建的会话</li><li>isvalidate() 强制HttpSession对象失效</li><li>getServletContext() </li><li>setAttribute()</li><li>getAttribute()</li><li>remoteAttribute()</li></ul><blockquote><p>通过Cookie跟踪session</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        HttpSession session <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获得一个session对象</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>session<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        session<span class="token punctuation">.</span><span class="token function">setMaxInactiveInterval</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>session<span class="token punctuation">.</span><span class="token function">isNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"tashi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"新的会话已建立"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>监听器与过滤器</title>
      <link href="/2019/04/jian-ting-qi-yu-guo-lu-qi.html"/>
      <url>/2019/04/jian-ting-qi-yu-guo-lu-qi.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>代理设计模式</p></blockquote><p>当某个事件发生某一个事件时，通知另一个对象，让另一个对象做某事</p><h1 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h1><p><strong>定义</strong></p><p>监听某个对象的状态变化的组件</p><ul><li>事件源<ul><li>request</li><li>session</li><li>servletContext</li></ul></li><li>监听器 监听事件的对象</li><li>注册监听器 与事件源绑定</li><li>响应处理 </li></ul><p><strong>监听器划分</strong></p><p>三个监听域对象的创建与销毁</p><ul><li>ServletContextListener</li><li>HttpSessionListener</li><li>ServletRequestListener</li></ul><p>三个监听域对象当中属性变化</p><ul><li>ServletContextAttributeListener</li><li>HttpSessionAttributeListener</li><li>ServletRequestAttributeListener</li></ul><h2 id="域监听器"><a href="#域监听器" class="headerlink" title="域监听器"></a>域监听器</h2><h4 id="ServletContext域监听器"><a href="#ServletContext域监听器" class="headerlink" title="ServletContext域监听器"></a>ServletContext域监听器</h4><p>ServletContext域的生命周期，服务器启动时创建服务器关闭时销毁。</p><p><strong>步骤</strong></p><ol><li>实现接口</li><li>覆盖监听器的方法</li><li>web.xml进行配置</li></ol><pre><code>// Javaimport javax.servlet.ServletContextListener;import javax.servlet.ServletContextEvent;public class Listener implements ServletContextListener {    public void contextInitialized(ServletContextEvent sce){        System.out.println(&quot;创建了&quot;);    }    public void contextDestroyed(ServletContextEvent sce){         System.out.println(&quot;销毁了&quot;);    }}//xml&lt;listener&gt;        &lt;listener-class&gt;tashi.Listener&lt;/listener-class&gt;    &lt;/listener&gt;</code></pre><h4 id="HttpSession域的创建与销毁的监听器"><a href="#HttpSession域的创建与销毁的监听器" class="headerlink" title="HttpSession域的创建与销毁的监听器"></a>HttpSession域的创建与销毁的监听器</h4><p>HttpSession域的生命周期，第一次调用request.getSession()调用，服务器关闭session或手动销毁关闭。</p><pre><code>import javax.servlet.http.HttpSessionEvent;import javax.servlet.http.HttpSessionListener;public class SessionLisener implements HttpSessionListener {    @Override    public void sessionCreated(HttpSessionEvent se) {        System.out.println(&quot;Session创建&quot;);    }    @Override    public void sessionDestroyed(HttpSessionEvent se) {        System.out.println(&quot;Session销毁&quot;);    }}//xml&lt;listener&gt;        &lt;listener-class&gt;tashi.SessionLisener&lt;/listener-class&gt;&lt;/listener&gt;</code></pre><h4 id="ServletRequestListener"><a href="#ServletRequestListener" class="headerlink" title="ServletRequestListener"></a>ServletRequestListener</h4><p>同理，监听请求对象的创建域销毁</p><h2 id="对象存储监听"><a href="#对象存储监听" class="headerlink" title="对象存储监听"></a>对象存储监听</h2><ul><li>ServletContextAttributeListener</li><li>HttpSessionAttributeListener</li><li>ServletRequestAttributeListener</li></ul><h4 id="ServletContextAttributeListener"><a href="#ServletContextAttributeListener" class="headerlink" title="ServletContextAttributeListener"></a>ServletContextAttributeListener</h4><pre><code>import javax.servlet.ServletContextAttributeEvent;import javax.servlet.ServletContextAttributeListener;public class AttributeListenerTest implements ServletContextAttributeListener {    @Override    public void attributeAdded(ServletContextAttributeEvent scae) {        //添加        System.out.println(&quot;添加\t&quot;);        System.out.println(scae.getName()+&quot;\t&quot;+scae.getValue()+&quot;\t&quot;+scae.getSource());    }    @Override    public void attributeRemoved(ServletContextAttributeEvent scae) {        //删除        System.out.println(&quot;删除\t&quot;);        System.out.println(scae.getName()+&quot;\t&quot;+scae.getValue()+&quot;\t&quot;+scae.getSource());    }    @Override    public void attributeReplaced(ServletContextAttributeEvent scae) {        //更新        System.out.println(&quot;更新\t&quot;);        System.out.println(scae.getName()+&quot;\t&quot;+scae.getValue()+&quot;\t&quot;+scae.getSource());    }}//Servlet@WebServlet(&quot;/index&quot;)public class Download extends HttpServlet {    @Override    protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        this.getServletContext().setAttribute(&quot;Pets&quot;, &quot;MIaoMiao&quot;);    }}</code></pre><h1 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h1><p><strong>是什么</strong></p><p>filter时客户端对访问资源的过滤，对目标资源访问前后进行逻辑处理。它负责拦截请求与响应，便于查看客户机与服务器之间交换的数据</p><p><strong>步骤</strong></p><ol><li>编写一个过滤器类实现Filter接口</li><li>实现接口中尚未实现的方法</li><li>web.xml进行配置</li></ol><pre><code>//过滤器import javax.servlet.*;import java.io.IOException;public class T1 implements Filter {    @Override    public void init(FilterConfig filterConfig) throws ServletException {    }    /**    *   是否对请求进行放行    * */    @Override    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {        System.out.println(&quot;来到了过滤器&quot;);        filterChain.doFilter(servletRequest,servletResponse);//放行    }    @Override    public void destroy() {    }}//web.xml&lt;filter&gt;        &lt;filter-name&gt;T1&lt;/filter-name&gt;        &lt;filter-class&gt;tashi.filter.T1&lt;/filter-class&gt;    &lt;/filter&gt;    &lt;filter-mapping&gt;        &lt;filter-name&gt;T1&lt;/filter-name&gt;        &lt;url-pattern&gt;/Download&lt;/url-pattern&gt;&lt;/filter-mapping&gt;</code></pre><p><strong>解析</strong></p><p>当我们发送一个请求的时候，web容器会先到filter当中 创建三个参数,req,resp,filterChain。在过滤器当中放行之后才可以访问对应的servlet类</p><p>中间的过滤器可以有多个，在一个过滤器当中可以调用另外一个过滤器。</p><p>在配置xml时，首先定义过滤器的名称和Java类名，然后用 <code>url-pattern</code> 映射工作空间的目录</p><p><strong>filter的生命周期</strong></p><ul><li><code>init方法</code></li></ul><p>当filter对象创建时调用。服务器启动时创建。</p><pre><code>- 参数 filterConfig</code></pre><ul><li><p><code>dofilter方法</code></p><p>  用于处理请求和响应，当请求与过滤器相关联web资源时 进行调用</p></li><li><p><code>destroy方法</code></p></li></ul><p>filter对象销毁时调用。服务器关闭会销毁</p><h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><p>需要对某些IP进行访问限制，不让非法的IP访问系统，需要用到过滤器限制</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML-定位</title>
      <link href="/2019/04/html-ding-wei.html"/>
      <url>/2019/04/html-ding-wei.html</url>
      
        <content type="html"><![CDATA[<h1 id="关于元素定位的核心概念"><a href="#关于元素定位的核心概念" class="headerlink" title="关于元素定位的核心概念"></a>关于元素定位的核心概念</h1><h3 id="构建块"><a href="#构建块" class="headerlink" title="构建块"></a>构建块</h3><p>CSS采用盒子模型来处理每一个HTML元素，盒子可以是一个“块级”盒子，也可以是一个“内联”盒子</p><h3 id="包含元素"><a href="#包含元素" class="headerlink" title="包含元素"></a>包含元素</h3><p>如果一个块级元素位于另一个块级内部，那么这个外部的框就成为父元素</p><h3 id="控制元素的位置"><a href="#控制元素的位置" class="headerlink" title="控制元素的位置"></a>控制元素的位置</h3><p><strong>CSS中包含三种用于控制页面布局的定位机制：普通流|相对定位|绝对定位。</strong></p><ul><li>普通流</li><li>相对定位</li><li>绝对定位(脱离标准流)</li><li>固定定位(脱离标准流)</li><li>浮动元素(脱离标准流)</li><li><strong>任何元素从普通流脱离时，盒子会产生重叠。可以使用z-index属性来控制将哪个盒子显示在上层</strong></li></ul><h1 id="定位流"><a href="#定位流" class="headerlink" title="定位流"></a>定位流</h1><h3 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h3><ul><li>position:relative;</li><li>相对定位是相对于自己以前在标准流中的位置来移动</li><li>相对定位是不脱离标准流的，会在标准流中占一份空间</li><li>同一个方向上的定位属性只能使用一个</li><li>相对定位区分块级元素/行内元素/行内块级元素</li><li>相对定位设置margin/padding属性是根据未定位之前的位置移动的</li></ul><h3 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h3><ul><li>position:absolute;</li><li>绝对定位不区分块级元素/行内元素/行内块级元素，可以设置宽 高</li><li>规律<ul><li>默认情况下所有绝对定位的元素，无论有没有祖先元素都会以body作为参考点</li><li>绝对定位的元素祖先元素也是定位流，那么这个绝对定位的元素就会以那个祖先元素作为参考点</li><li>定位流指 绝对定位/相对定位/固定定位(唯有静态定位不行)</li><li>绝对定位的祖先元素也是定位流， 而且祖先元素中有多个元素都是定位流，那么这个绝对定位的元素会以离它最近的那个定位流祖先元素为参考点</li></ul></li><li><p><strong>注意</strong></p><ul><li><p>绝对定位的元素若以body为参考点，其实是以<strong>网页首屏</strong>的宽度和高度作为参考点，而不是以整个网页的宽度和高度作为参考点</p></li><li><p>一个绝对定位的元素会忽略祖先元素的padding属性</p></li></ul></li></ul><p><img src="/2019/04/html-ding-wei/1555902965781.png" alt></p><h3 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h3><ul><li>固定定位与背景关联方式很像<ul><li>背景定位(background-attachment:fixed)可以让背景图片不随着滚动条的滚动而滚动</li><li>固定定位(position:fixed)可以让某个盒子不随着滚动条的滚动而滚动</li><li><strong>注意点</strong><ul><li>固定定位的元素脱离标准流，不占用标准流的空间</li><li>固定定位和绝对定位一样不区分行内/块级/行内块元素<h3 id="补充一哈"><a href="#补充一哈" class="headerlink" title="补充一哈"></a>补充一哈</h3></li></ul></li></ul></li><li>Z-index 属性<ul><li>z-index属性的作用是专门用于控制定位流元素的覆盖关系的</li></ul></li><li>默认情况定位流的元素会覆盖标准流的元素</li><li><p>定位流的元素会盖住前面的定位流</p><ul><li><strong>注意点</strong></li></ul><ol><li>如果两个元素的父元素都没有设置z-index属性 ,那么谁的z-index属性大 谁就显示在上面</li><li>如果两个元素的父元素设置了z-index属性，子元素的z-index属性就失效</li></ol></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初体验</title>
      <link href="/2019/04/chu-ti-yan.html"/>
      <url>/2019/04/chu-ti-yan.html</url>
      
        <content type="html"><![CDATA[<h1 id="PyQt5"><a href="#PyQt5" class="headerlink" title="PyQt5"></a>PyQt5</h1><p>GUI <code>Graphical User Interface</code></p><p><strong>官方标准库</strong></p><ul><li>PyQt</li><li>PySide</li><li>wxPython</li><li>PyGUI</li><li>Kivy</li><li>Libavg</li></ul><p><strong>显示一个窗口</strong></p><pre><code>import sysfrom PyQt5.QtWidgets import *from PyQt5.QtWidgets import QWidgetif __name__ == &#39;__main__&#39;:    # 实例化了一个应用程序对象QApplication()    app = QApplication(sys.argv)    window = QWidget()    window.resize(600, 400) #初始化大小    window.move(600, 300)  #将程序移动 左600 高300的距离    window.setWindowTitle(&#39;Tashi&#39;) #设置标题    label = QLabel(window)    label.setText(&quot;Hello word&quot;)    window.show() # QWidget对象的show()方法将创建的窗口显示出来    sys.exit(app.exec_()) #开始执行应用程序，并进入消息循环</code></pre><p>解析：</p><p><code>sys.args</code> 当通过命令启动这个程序 ，可以接受命令行传递的参数</p><p><code>sys.exit()</code> 程序退出</p><p><code>app.exec()</code> 程序进入主循环，不要停止</p><p>一个PyQt5程序需要一个应用程序对象，它处理应用程序的初始化和结束，并且提供会话管理；它包含主事件循环，在其中来自窗口系统和其它资源的所有事件被处理和调度；它也处理绝大多数系统范围和应用程序范围的设置。一个没有父对象控件默认不显示，必须要调用show()才可以。</p><h2 id="使用工具"><a href="#使用工具" class="headerlink" title="使用工具"></a>使用工具</h2><p>将UI文件转换PY文件之后添加如下代码即可运行</p><pre><code>import sysfrom PyQt5 import QtWidgetsif __name__ == &quot;__main__&quot;:    app = QtWidgets.QApplication(sys.argv) # 所有的PyQT5的应用必须创建一个应用(Application)对象。    MainWindow = QtWidgets.QMainWindow()    ui = Ui_Form() #实例一个对象    ui.setupUi(MainWindow)    MainWindow.show()    sys.exit(app.exec_())</code></pre><h2 id="使用PyQt5的API"><a href="#使用PyQt5的API" class="headerlink" title="使用PyQt5的API"></a>使用PyQt5的API</h2><pre><code>from PyQt5.QtWidgets import QWidgetdir(QWidget)help(QWidget)</code></pre><h2 id="PyQt5的库结构"><a href="#PyQt5的库结构" class="headerlink" title="PyQt5的库结构"></a>PyQt5的库结构</h2><p><img src="/2019/04/chu-ti-yan/1555859230729.png" alt></p><h2 id="布局管理"><a href="#布局管理" class="headerlink" title="布局管理"></a>布局管理</h2><ul><li>垂直布局</li><li>水平布局</li><li>栅格布局</li><li>网格布局</li><li>绝对布局</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> PyQt5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaBean</title>
      <link href="/2019/04/javabean.html"/>
      <url>/2019/04/javabean.html</url>
      
        <content type="html"><![CDATA[<h1 id="JavaBean"><a href="#JavaBean" class="headerlink" title="JavaBean"></a>JavaBean</h1><p><strong>是什么</strong></p><p>JavaBean是遵循特定写法的一个java类</p><p><strong>为什么</strong></p><p>一次编写，任何地方调用</p><p><strong>条件</strong></p><ol><li>必须具有一个无参构造函数</li><li>属性必须私有化</li><li>还需要通过public的方法暴露给其他类访问</li></ol><pre><code>import lombok.Getter;import lombok.Setter;@Getter@Setterpublic class Person {    private String name;    private Integer age;    public Person(){        super();    }    public Person(String name,Integer age){        this.name = name;        this.age = age;    }}</code></pre><h2 id="JSP中使用JavaBean"><a href="#JSP中使用JavaBean" class="headerlink" title="JSP中使用JavaBean"></a>JSP中使用JavaBean</h2><p>JSP提供了三个相关动作元素</p><ul><li><a href="jsp:useBean" target="_blank" rel="noopener">jsp:useBean</a> 实例化一个JavaBean组件</li><li><a href="jsp:setProperty" target="_blank" rel="noopener">jsp:setProperty</a> 设置JavaBean组件的属性</li><li><a href="jsp:getProperty" target="_blank" rel="noopener">jsp:getProperty</a> 获取JavaBean组件的属性</li></ul><p><strong><a href="jsp:useBean" target="_blank" rel="noopener">jsp:useBean</a></strong></p><pre><code>&lt;jsp:useBean id=&quot;per&quot; class=&quot;tashi.Person&quot; scope=&quot;page&quot; /&gt;&lt;%    per.setName(&quot;张三&quot;);    per.setAge(18);%&gt;&lt;%    out.print(per.getName());    out.print(per.getAge());    out.print(per.getClass());%&gt;</code></pre><ul><li>id 表示生成的实例化的对象</li><li>class 对象所在的包.类名</li><li>scope 在JavaBean的保存范围<ul><li>page</li><li>request</li><li>session</li><li>application</li></ul></li></ul><blockquote><p>执行原理</p></blockquote><p>首先实例化一个对象，因为.jsp执行的首先会翻译成一个servlet 。首先在指定的域范围内查找指定名称JavaBean对象，如果存在则返回对象的引用 如果不存在则实例化一个新的JavaBean对象并将它指定的名称存储到指定的域范围内</p><p><strong><a href="jsp:setProperty" target="_blank" rel="noopener">jsp:setProperty</a></strong></p><p>设置和访问JavaBean对象的属性</p><p>格式一</p><p>&lt;jsp:setProperty name=”” property=”” value=””&gt;</p><p>格式二</p><p>&lt;jsp:setProperty name=”” property=”” value=”&lt;%= new Date() %&gt;” /&gt;</p><p>格式三</p><p>&lt;jsp:setProperty name=”beanName” property=”propertyName” param=”parameterName”/&gt;</p><p>格式四</p><p>&lt;jsp:setProperty name=”” property= “*” /&gt;</p><ul><li>name指定对象的名称</li><li>property指定实例对象的属性名</li><li>value 赋予对象属性的值。注意它可以是字符串也可以是表达式，如果是字符串会自动转换属性相应的类型</li></ul><pre><code>//使用jsp:setProperty标签设置person对象的属性值&lt;jsp:useBean id=&quot;per&quot; class=&quot;tashi.Person&quot; scope=&quot;page&quot; /&gt;&lt;jsp:setProperty  name=&quot;per&quot; property=&quot;name&quot; value=&quot;张三&quot; /&gt;&lt;jsp:setProperty name=&quot;per&quot; property=&quot;age&quot; value=&quot;20&quot; /&gt;&lt;%    out.print(per.getName());    out.print(per.getAge());    out.print(per.getClass());%&gt;</code></pre><pre><code>//使用请求参数为bean的属性赋值&lt;jsp:useBean id=&quot;per&quot; class=&quot;tashi.Person&quot; scope=&quot;page&quot; /&gt;&lt;jsp:setProperty  name=&quot;per&quot; property=&quot;name&quot; param=&quot;name&quot; /&gt;&lt;jsp:setProperty name=&quot;per&quot; property=&quot;age&quot; param=&quot;age&quot; /&gt;&lt;%    out.print(per.getName());    out.print(per.getAge());    out.print(per.getClass());%&gt;</code></pre><p><img src="/2019/04/javabean/1555840515766.png" alt></p><p><strong><a href="jsp:getProperty" target="_blank" rel="noopener">jsp:getProperty</a></strong></p><p>用于读取JavaBean对象的属性，也就是调用JavaBean对象的getter方法</p><pre><code>&lt;jsp:useBean id=&quot;per&quot; class=&quot;tashi.Person&quot; scope=&quot;page&quot; /&gt;&lt;jsp:setProperty  name=&quot;per&quot; property=&quot;name&quot; value=&quot;小红&quot; /&gt;&lt;jsp:setProperty name=&quot;per&quot; property=&quot;age&quot; value=&quot;6&quot; /&gt;&lt;jsp:getProperty name=&quot;per&quot; property=&quot;name&quot;/&gt;</code></pre><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>网站访问人数计数器</p><p>数据库应用</p><pre><code>// 计数器模型public class Counter {    private long num;    public long getNum(){        return this.num;    }    public void setNum(long num){         this.num = num + 1;    }}//index.jsp&lt;body&gt;&lt;jsp:useBean id=&quot;counter&quot; class=&quot;tashi.Counter&quot; scope=&quot;application&quot; /&gt;&lt;%    if(session.isNew()){ //判断当前用户是否为新会话        long temp = counter.getNum(); //先取出上次的赋值方法，用计数器进行+1        counter.setNum(temp);    }%&gt;&lt;h1&gt;本网站已有 &lt;jsp:getProperty name=&quot;counter&quot; property=&quot;num&quot; /&gt;  人访问&lt;/h1&gt;&lt;/body&gt;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小程序-一</title>
      <link href="/2019/04/xiao-cheng-xu-yi.html"/>
      <url>/2019/04/xiao-cheng-xu-yi.html</url>
      
        <content type="html"><![CDATA[<h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><ul><li><p>配置文件<code>.json</code></p></li><li><p>模板文件<code>.wxml</code></p></li><li><p>样式文件<code>.wxss</code></p></li><li><p>逻辑文件<code>.js</code></p></li></ul><p><img src="/2019/04/xiao-cheng-xu-yi/1555827395986.png" alt></p><p><strong>注意</strong>描述页面的四个文件必须具有相同的路径与文件名</p><h3 id="配置tabBar"><a href="#配置tabBar" class="headerlink" title="配置tabBar"></a>配置tabBar</h3><p>对若干一级页面的入口链接</p><ul><li>全局配置app.json</li></ul><pre><code>&quot;tabBar&quot;:{    &quot;list&quot;:[      {        &quot;text&quot;:&quot;Home&quot;,        &quot;pagePath&quot;:&quot;pages/index/index&quot;,        &quot;iconPath&quot;:&quot;/image/home-2.png&quot;,        &quot;selectedIconPath&quot;:&quot;/image/home-1.png&quot;      },      {        &quot;text&quot;: &quot;About&quot;,        &quot;pagePath&quot;: &quot;pages/about/about&quot;,        &quot;iconPath&quot;: &quot;/image/more-2.png&quot;,        &quot;selectedIconPath&quot;: &quot;/image/more-1.png&quot;      }    ]  }</code></pre><p><img src="/2019/04/xiao-cheng-xu-yi/1555827401297.png" alt></p><p><strong>引出问题</strong></p><p><code>&lt;navigator&gt;</code>链接失效，点击没有效果</p><p>解决方法：改变<code>&lt;navigator&gt;</code>的<code>open-type:switchTab</code></p><h1 id="今日总结"><a href="#今日总结" class="headerlink" title="今日总结"></a>今日总结</h1><p><strong><code>app.json</code></strong> 是小程序的全局配置文件。里面包含了小程序的页面路径，界面表现，底部Tab等</p><ul><li><p><strong>pages字段</strong> 描述小程序的页面路径。</p><ul><li>数据类型 <code>String Array</code></li><li>定义方式<pre><code>&quot;pages&quot;:[&quot;路径1&quot;, &quot;路径2&quot;]</code></pre></li></ul></li><li><p><strong>window字段</strong> 定义小程序所有页面的顶部背景颜色，文字颜色</p><ul><li>定义方式<pre><code>&quot;window&quot;: {  &quot;navigationBarBackgroundColor&quot;: &quot;#EC7357&quot;,  &quot;navigationBarTextStyle&quot;: &quot;black&quot;,  &quot;navigationBarTitleText&quot;: &quot;第一个小程序哦&quot;,  &quot;backgroundColor&quot;: &quot;#eeeeee&quot;,  &quot;backgroundTextStyle&quot;: &quot;light&quot;,  &quot;enablePullDownRefresh&quot;: false}</code></pre></li></ul></li><li><p>常见属性</p><ul><li>导航栏背景颜色<code>navigationBarBackgroundColor</code></li><li>导航栏标题颜色<code>navigationBarTextStyle</code></li><li>导航栏标题文字内容<code>navigationBarTitleText</code></li><li>是否开启当前页面的下拉刷新<code>enablePullDownRefresh</code><ul><li>下拉 loading 的样式<code>backgroundTextStyle</code></li><li>底部窗口的背景色<code>backgroundColorBottom</code></li><li>顶部窗口的背景色<code>backgroundColorTop</code></li></ul></li><li>窗口的背景色<code>backgroundColor</code></li></ul></li></ul><p><img src="/2019/04/xiao-cheng-xu-yi/1555827409439.png" alt></p><ul><li><strong>tabBar字段</strong>指定 tab 栏的表现，以及 tab 切换时显示的对应页面<ul><li>定义方式</li></ul></li></ul><pre class="line-numbers language-text"><code class="language-text">"tabBar":{"list":[      {        "text":"Home",        "pagePath":"pages/index/index",        "iconPath":"/image/home-2.png",        "selectedIconPath":"/image/home-1.png"      },      {        "text": "About",        "pagePath": "pages/about/about",        "iconPath": "/image/more-2.png",        "selectedIconPath": "/image/more-1.png"      }    ]}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>属性<ul><li>tab 上的文字默认颜色<code>color</code></li><li>tab 上的文字选中时的颜色<code>selectedColor</code></li><li>tab 的背景色<code>backgroundColor</code></li><li>tabbar上边框的颜色<code>borderStyle</code></li><li>tab 的列表<code>list</code><ul><li>页面路径<code>pagePath</code></li><li>tab 上按钮文字<code>text</code></li><li>图片路径<code>selectedIconPath</code></li><li>选中时的图片路径<code>iconPath</code></li></ul></li><li>tabBar的位置<code>position</code></li></ul></li></ul><h4 id="WXML-模板"><a href="#WXML-模板" class="headerlink" title="WXML 模板"></a>WXML 模板</h4><ul><li><p>WXML-结构</p></li><li><p>WXSS-表现</p></li><li><p>JS-行为</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML-浮动</title>
      <link href="/2019/04/html-fu-dong.html"/>
      <url>/2019/04/html-fu-dong.html</url>
      
        <content type="html"><![CDATA[<h1 id="网页的布局方式"><a href="#网页的布局方式" class="headerlink" title="网页的布局方式"></a>网页的布局方式</h1><ul><li>标准流<ul><li>浏览器默认的排版方式就是标准流的排版方式</li><li>CSS将元素分为三类 块级元素 行内元素 行内块级元素</li><li>标准流中有两种排版方式，一种是垂直排版，一种是水平排版</li></ul></li><li>浮动流<ul><li>浮动流是一种“半脱离标准流”的排版方式</li><li>浮动流只有一种排版方式，就是水平排版</li><li>只能设置某个元素左对齐或右对齐<ul><li><strong>注意</strong></li><li>浮动流中没有居中对齐，也就是没有center这个取值</li><li>在浮动流中不可以使用margin: 0 auto;<ul><li><strong>特点</strong>：</li><li>在浮动流中不区分块级元素/行内元素/行内块级元素（都是水平排版）</li><li>在浮动流中无论是分块级元素/行内元素/行内块级元素都可以设置宽高</li><li>浮动流中的元素和标准流中的行内块级元素很像</li></ul></li></ul></li></ul></li></ul><h3 id="浮动元素的脱标"><a href="#浮动元素的脱标" class="headerlink" title="浮动元素的脱标"></a>浮动元素的脱标</h3><ul><li>脱标：脱离标准流</li><li>某一个元素浮动之后，那么这个元素看上去就像被从标准流中删除了一样，这就是浮动元素的托标</li></ul><h3 id="浮动元素脱标会有什么影响？"><a href="#浮动元素脱标会有什么影响？" class="headerlink" title="浮动元素脱标会有什么影响？"></a>浮动元素脱标会有什么影响？</h3><ul><li>如果前面一个元素浮动了，而后面一个元素没有浮动，那么这个时候前面的一个元素就会盖住后面的一个元素</li><li><h3 id="浮动元素排序规则"><a href="#浮动元素排序规则" class="headerlink" title="浮动元素排序规则"></a>浮动元素排序规则</h3></li></ul><ol><li>相同方向上的浮动元素，先浮动的元素会显示在前面。后浮动的元素会显示在后面</li></ol><p><img src="/2019/04/11006938-fd3b2332352a9627.png" alt></p><ol start="2"><li>不同方向上的浮动元素，左浮动会找左浮动，右浮动会找右浮动</li></ol><p><img src="/2019/04/html-fu-dong/11006938-2ca27175ec019423.png" alt></p><ol start="3"><li>浮动元素浮动之后的位置，由浮动元素之前在标准流中的位置来确定<br><img src="/2019/04/html-fu-dong/11006938-87c56354de552ae4.png" alt></li></ol><h3 id="浮动元素的贴靠现象"><a href="#浮动元素的贴靠现象" class="headerlink" title="浮动元素的贴靠现象"></a>浮动元素的贴靠现象</h3><ul><li>当父元素的宽度足够放下所有浮动元素的时候-并列显示</li><li>当父元素的宽度不够放下所有浮动元素的时候-从最后一个元素开始往前贴 直到贴到父元素的左边<h1 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h1></li></ul><ul><li><p>在标准流中内容的高度可以撑起父元素的高度</p></li><li><p>在浮动流中浮动的元素是不可以撑起父元素的高度</p></li></ul><p>如果我们想要box1与box2的文字分行就需要消除浮动<br><strong>方式一:</strong>给前面一个父元素设置高度</p><p><strong>方式二:</strong>给后面的盒子添加clear属性</p><blockquote><p>clear属性取值<br>       none：按照浮动元素的排序规则来排序<br>       left：不要找前面的左浮动元素<br>       right：不要找前面的右浮动元素<br>       both：不要找前面的左浮动元素和右浮动元素</p></blockquote><p><strong>方式三</strong>隔墙法</p><ul><li>外墙法<ol><li>在两个盒子中间添加一个额外的块级元素</li><li>给这个额外添加的块级元素设置clear:both;属性<ul><li><strong>注意点</strong></li><li>外墙法可以让第二个盒子使用margin-top属性</li><li>外墙法不可以让第一个盒子使用margin-bottom属性</li><li>解决办法:在给<div>加高度</div></li></ul></li></ol></li></ul><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">&lt;style type="text/css"><span class="token class">.box1</span></span><span class="token punctuation">{</span><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.box2</span> </span><span class="token punctuation">{</span><span class="token property">background-color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.box1</span> p </span><span class="token punctuation">{</span><span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#000</span><span class="token punctuation">;</span><span class="token property">float</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.box2</span> p</span><span class="token punctuation">{</span><span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#000</span><span class="token punctuation">;</span><span class="token property">float</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.wall</span></span><span class="token punctuation">{</span><span class="token property">clear</span><span class="token punctuation">:</span>both<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.ma</span></span><span class="token punctuation">{</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">60</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span>&lt;/style>&lt;div class=<span class="token string">"box1"</span>>    &lt;p>我是文字&lt;/p>    &lt;p>我是文字&lt;/p>    &lt;p>我是文字&lt;/p>&lt;/div>&lt;div class=<span class="token string">"box2"</span>>    &lt;p>我是文字&lt;/p>    &lt;p>我是文字&lt;/p>    &lt;p>我是文字&lt;/p>&lt;/div><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>内墙法<ol><li>在第一个盒子所有子元素后面添加一个额外的块级元素</li><li>给这个额外添加的块级元素设置clear:both;属性<br>-<strong>注意点</strong><ul><li>可以让第二个盒子使用margin-top属性</li><li>可以让第一个盒子使用margin-bottom属性</li></ul></li></ol></li><li>区别<ul><li>外墙法不能撑起第一个盒子的高度，内墙法可以撑起第一个盒子的高度</li></ul></li></ul><p><strong>方式四:</strong> 伪元素选择器</p><ul><li>伪元素选择器与内墙法相结合<pre><code>.box1::after {/*设置添加的子元素的内容为空*/content:&quot;&quot;;/*设置添加的子元素为块级元素*/display:block;/*高度为0*/height:0;/*设置添加的子元素看不见*/visibility:hidden;/*给添加的子元素设置clear:both*/clear:both;}.box1 {/*兼容IE6*/*zoom:1;}</code></pre></li></ul><p><strong>方式五</strong> Overflow:hidden</p><ul><li>可以将超出标签范围的内容裁剪掉</li><li>清除浮动</li><li>可以通过Overflow:hidden;让里面的盒子margin-top;外面盒子不被定下来<pre><code>.box1{overflow:hidden;*zoom:1;}</code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-Dom</title>
      <link href="/2019/04/javascript-dom.html"/>
      <url>/2019/04/javascript-dom.html</url>
      
        <content type="html"><![CDATA[<blockquote><p> DOM对象</p></blockquote><ul><li><p>document.getElementById(); //根据id选择器</p></li><li><p>document.getElementsByClassName()[0]; //根据类选择器</p></li><li><p>document.getElementsByTagName()[0]; //根据标签去拿</p></li><li><p>document.getElementsByName(); //根据name属性</p></li><li><p>document.querySelector(“#btn”); //只会取到第一个</p></li><li><p>document.querySelectorAll(“.btn”);  //匹配所有</p></li></ul><ol><li>鼠标进入<ul><li>onmouseover</li></ul></li><li>鼠标移出<ul><li>onmouseout</li></ul></li><li>鼠标移动<ul><li>onmousemove</li></ul></li><li>鼠标点下<ul><li>onmouseup</li><li>onmousedown</li></ul></li></ol><pre><code>&lt;div id=&quot;box&quot;&gt;&lt;/div&gt;&lt;script&gt;  var box = document.getElementById(&quot;box&quot;);  //鼠标进入  box.onmouseover = function() {    console.log(&quot;鼠标进入&quot;);  };  //鼠标移出  box.onmouseout = function() {    console.log(&quot;鼠标移出&quot;);  }  // 鼠标移动  box.onmousemove = function() {    console.log(&quot;鼠标移动&quot;);  }  // 鼠标点下  box.onmousedown = function() {    alert(&quot;你按下了鼠标&quot;);  }  box.onmouseup = function() {    alert(&quot;你松开了鼠标&quot;);  }&lt;/script&gt;</code></pre><blockquote><p> 节点访问关系</p></blockquote><ul><li><p>获取子节点</p><ul><li>childNodes</li><li>children</li></ul></li><li><p>获取第一个子节点</p><ul><li>firstChild</li><li>firstElementChild</li></ul></li><li><p>获取最后一个子节点</p><ul><li>lastChild</li><li>lastEhlementChild</li></ul></li><li><p>获取父节点</p><ul><li>parentNode</li><li>parentElement</li><li>offsetParent  //Body下所有节点</li></ul></li><li><p>获取上一个兄弟节点</p><ul><li>previousSibling</li><li>previousElementSibling</li></ul></li><li><p>获取下一个兄弟节点</p><ul><li>nextSibling</li><li>nextElementSibling</li></ul></li></ul><p><strong>综合</strong> 获取任意子节点</p><pre><code>var sonNode = btn.parentElement.children;for(var i=0; i&lt;sonNode.length; i++) {  console.log(s[i]);}</code></pre><blockquote><p> 节点操作</p><ul><li><strong>创建节点</strong>[createElement(“标签名”);]</li></ul></blockquote><pre><code>var img = document.createElement(&quot;img&quot;); // 拿到节点img.src = &quot;imgs/bg1.jpg&quot;;  //设置属性</code></pre><ul><li><strong>插入节点</strong>[appendChild(节点)]</li></ul><p>两种方法:</p><ol><li><p>父节点.appendChild(节点);</p></li><li><p>父节点.insertBefor(新节点,参考节点);</p></li></ol><pre><code>var img = document.createElement(&quot;img&quot;); // 拿到节点img.src = &quot;imgs/bg1.jpg&quot;;  //设置属性var box = document.getElementById(&quot;box&quot;);box.appendChild(img);        //插入节点</code></pre><ul><li><strong>删除节点</strong>[remove()]</li></ul><p>两种方法:</p><ol><li><p>父节点.remouveChild(子节点);</p></li><li><p>当前节点.remove();</p></li></ol><pre><code>var box = document.getElementById(&quot;box&quot;); //找到节点box.remove();   //找到自己把自己删除了</code></pre><ul><li><strong>复制节点</strong>[cloneNode(true);]</li></ul><pre><code>var box = document.getElementById(&quot;box&quot;); //查找var newTag = box.cloneNode(true); //复制box.appendChild(newTag); //添加</code></pre><blockquote><p> 节点属性</p></blockquote><ul><li><strong>查看属性</strong>[getAttribute(属性)]</li></ul><pre><code>var box = document.getElementById(&quot;box&quot;); //Find/*获取属性*/console.log(box.getAttribute(&quot;id&quot;));console.log(box.getAttribute(&quot;name&quot;));</code></pre><ul><li><strong>修改属性</strong>[setAttribute(属性,值)]</li></ul><pre><code>var box = document.getElementById(&quot;box&quot;); //Findbox.setAttribute(&quot;My&quot;,&quot;gulu&quot;); //Insertconsole.log(box);</code></pre><ul><li><strong>删除属性</strong>[removeAttribute(属性)]</li></ul><pre><code>var box = document.getElementById(&quot;box&quot;); //Findbox.removeAttribute(&quot;id&quot;);  //Delete</code></pre><p><strong>Demo</strong> 获取网站上所有的图片链接</p><pre><code>var img = document.querySelectorAll(&quot;img&quot;); //找到所有图片for(var i=0; i&lt;img.length; i++) {    //console.log(img[i].getAttribute(&quot;src&quot;));    //console.log(img[i].removeAttribute(&quot;src&quot;));  console.log(img[i].src) //具体}</code></pre><p><strong>Demo</strong> 删除网站上所有的图片</p><pre><code>var img = document.querySelectorAll(&quot;img&quot;); //找到所有图片for(var i=0; i&lt;img.length; i++) {    console.log(img[i].removeAttribute(&quot;src&quot;));}</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-初学</title>
      <link href="/2019/04/javascript-chu-xue.html"/>
      <url>/2019/04/javascript-chu-xue.html</url>
      
        <content type="html"><![CDATA[<h3 id="输出方式"><a href="#输出方式" class="headerlink" title="输出方式"></a>输出方式</h3><ul><li>方式一</li></ul><pre><code>&lt;script&gt;    alert(&quot;Hello my friends&quot;);&lt;/script&gt;</code></pre><ul><li>方式二</li></ul><p>在控制台输出消息，用来调试程序</p><pre><code>&lt;script&gt;    console.log(&quot;Hello&quot;);    console.warn(&quot;警告输出！&quot;);    console.error(&quot;错误输出！&quot;);&lt;/script&gt;</code></pre><ul><li>方式三</li></ul><p>弹出输入框</p><pre><code>&lt;script&gt;    prompt(&quot;hello&quot;)&lt;/script&gt;</code></pre><ul><li>方式四</li></ul><p>弹出提示框，显示信息</p><pre><code>&lt;script&gt;    confirm(&quot;hello&quot;)&lt;/script&gt;</code></pre><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ol><li>单行注释 //</li><li>多行注释</li></ol><h3 id="书写JS代码注意"><a href="#书写JS代码注意" class="headerlink" title="书写JS代码注意"></a>书写JS代码注意</h3><ol><li>必须在代码后面加分号</li><li>在JavaScript中区分大小写</li><li>JavaScript会忽略多个空格和换行</li></ol><h1 id="常量与变量"><a href="#常量与变量" class="headerlink" title="常量与变量"></a>常量与变量</h1><ul><li><strong>常量</strong><ol><li>数值常量 2. 字符串常量 3. 布尔常量 4. 转义字符</li></ol></li><li><strong>变量</strong></li></ul><p>在内存中分配一块内存空间，为存储数据</p><ul><li>定义变量</li></ul><p>var 变量名1,变量名2,变量名3;</p><ul><li>使用变量</li></ul><p>var name = “张三”;</p><ul><li><p>变量初始化</p><ul><li>先定义 后初始化<pre><code>var name;name = &quot;Mrs.L&quot;</code></pre></li><li>定义的同时进行初始化<pre><code>var name = &quot;Mr.Zhang&quot;</code></pre></li></ul></li></ul><h1 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h1><ol><li>含有字母、数字、下划线、$符号</li><li>不能以数字开头</li><li>不能使 关键字或保留字</li><li>区分大小写</li></ol><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p><img src="/2019/04/javascript-chu-xue/11006938-583c64b7a1cca284.png" alt></p><ul><li><strong>查看数据类型</strong></li></ul><p>typeof();</p><ul><li><p><strong>Number</strong></p></li><li><p><strong>String</strong></p></li></ul><p>单引号或双引号引起的句子</p><ul><li><strong>Boolean</strong></li></ul><p>True or False</p><p>非0即真</p><ul><li><strong>Null与Undefined</strong></li></ul><p>Null是只有一个值得数据类型，这个值是null</p><p>Undefined表示变量未赋值</p><h3 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h3><p>将一个数据类型转化为其他的数据类型。</p><ul><li>toString() 将其他数据类型转换为字符串类型</li></ul><pre><code>var a = 123456;var b = a.toString();&gt;&gt;&gt; b&quot;123456&quot;</code></pre><pre><code>var num = undefined;var str = num.toString();&gt;&gt;&gt; str   //报错null 与 undefined没有toString()方法</code></pre><ul><li>String()</li><li>+</li></ul><p>任何数据用+连接起来都会转换为字符串</p><ul><li>Number()</li></ul><pre><code>字符串转换数字(一)var str = &quot;666&quot;;var num = Number(str);&gt;&gt;&gt; typeof(num)number字符串转换数字(二)var str = &quot;aaa666&quot;;var num = Number(str);&gt;&gt;&gt; numNaN字符串转换数字(三)var str = &quot;&quot;;var num = Number(str)&gt;&gt;&gt; num0undefined转数字var str = undefined;var res = Number(str);&gt;&gt;&gt; resNaNnull转数字var str = null;var res = Number(str);&gt;&gt;&gt; res0布尔转数字var str = true;var res = Number(str);&gt;&gt;&gt; res1</code></pre><ul><li>parseInt()</li><li>parseFloat()</li></ul><p>parseInt() parseFloat()用来提取字符串中的有效整数</p><p>parseInt() parseFloat()的区别是前者只能提取整数,后者可以提取小数</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JQuery事件</title>
      <link href="/2019/04/jquery-shi-jian.html"/>
      <url>/2019/04/jquery-shi-jian.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-事件绑定"><a href="#一-事件绑定" class="headerlink" title="一.事件绑定"></a>一.事件绑定</h3><ul><li>方式一</li></ul><pre class="line-numbers language-js"><code class="language-js">eventName<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Code</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>方式二</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Code</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="二-事件解绑"><a href="#二-事件解绑" class="headerlink" title="二.事件解绑"></a>二.事件解绑</h3><p><code>off()</code></p><ul><li>如果不传递参数，会移除所有的事件</li><li>如果传递一个参数，会移除指定类型的事件</li><li>如果传递两个参数，会移除所有指定类型的指定事件</li></ul><h3 id="三-事件冒泡与默认行为"><a href="#三-事件冒泡与默认行为" class="headerlink" title="三.事件冒泡与默认行为"></a>三.事件冒泡与默认行为</h3><p><strong>1. 什么是事件冒泡</strong></p><p>事件从里传给外</p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".father"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Father"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".son"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Son"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 弹出son father</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2. 阻止事件冒泡</strong></p><ul><li><p>方法一</p><pre><code>return false;</code></pre></li><li><p>方法二</p><pre><code>$(&quot;button&quot;).click(function(event){  event.stopPropagation();});</code></pre></li></ul><p><strong>3. 什么是默认行为</strong></p><p>比如点击a标签会进入别的网页等等</p><p><strong>4. 阻止默认行为</strong></p><ul><li><p>方法一</p><pre><code>return false;</code></pre></li><li><p>方法二</p><pre><code>$(&quot;button&quot;).click(function(event){  event.preventDefault();});</code></pre></li></ul><h3 id="四-事件的自动触发"><a href="#四-事件的自动触发" class="headerlink" title="四.事件的自动触发"></a>四.事件的自动触发</h3><ul><li>方式一<pre class="line-numbers language-js"><code class="language-js"><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><ul><li>方式二<pre class="line-numbers language-js"><code class="language-js"><span class="token function">triggerHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><strong>区别</strong></p><ul><li>trigger会触发事件冒泡</li><li>triggerHandler不会触发事件冒泡</li><li>trigger触发默认行为</li><li>triggerHandler不会触发默认行为</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".father"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Father"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".son"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Son"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.father'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//自动触发事件‘click’</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.son'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">triggerHandler</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="五-自定义事件"><a href="#五-自定义事件" class="headerlink" title="五. 自定义事件"></a>五. 自定义事件</h3><p><strong>条件</strong></p><ul><li><p>事件必须通过on绑定的</p></li><li><p>事件必须通过trigger来触发</p></li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'myClick'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Yo!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">"myClick"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="六-事件委托"><a href="#六-事件委托" class="headerlink" title="六.事件委托"></a>六.事件委托</h3><p><code>委托的对象.delegate(&quot;li&quot;,&quot;click&quot;, function(){//Code})</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> JQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JQuery-核心</title>
      <link href="/2019/04/jquery-he-xin.html"/>
      <url>/2019/04/jquery-he-xin.html</url>
      
        <content type="html"><![CDATA[<h3 id="JQuery入口函数的其他写法"><a href="#JQuery入口函数的其他写法" class="headerlink" title="JQuery入口函数的其他写法"></a>JQuery入口函数的其他写法</h3><pre class="line-numbers language-html"><code class="language-html">$(document).ready(function(){    alert("Hello");});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>$(window).on(&#39;load&#39;,function(){    alert(&quot;Hello&quot;);});</code></pre><h3 id="JQuery核心函数"><a href="#JQuery核心函数" class="headerlink" title="JQuery核心函数$();"></a>JQuery核心函数<code>$();</code></h3><p><strong>用法</strong></p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 接收一个函数</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 接收一个DOM元素</span><span class="token keyword">var</span> div <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 接收一个字符串选择器  </span><span class="token keyword">var</span> div <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".box"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*返回一个JQuery对象，对象中保存了找到的DOM元素*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 接受一个字符串代码片段</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"&lt;p>我是段落&lt;/p>"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*返回一个JQuery对象，对象中保存了创建的DOM元素*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="静态方法与实例方法"><a href="#静态方法与实例方法" class="headerlink" title="静态方法与实例方法"></a>静态方法与实例方法</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//定义类</span><span class="token keyword">function</span> <span class="token function">AClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//直接添加给类的是静态方法</span>AClass<span class="token punctuation">.</span>staticMethod <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"StaticMethod!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//调用</span>AClass<span class="token punctuation">.</span><span class="token function">staticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//1.创建类</span><span class="token keyword">function</span> <span class="token function">AClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//2. 创建实例方法</span>AClass<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>instanceMethod <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"InstanceMethod"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 3. 创建对象</span><span class="token keyword">var</span> a <span class="token operator">=</span><span class="token keyword">new</span>  <span class="token class-name">AClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 4. 对象调用</span>a<span class="token punctuation">.</span><span class="token function">instanceMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>JQuery-foreach()</strong></p><pre class="line-numbers language-js"><code class="language-js">    <span class="token comment" spellcheck="true">/*原生ForEach    *    * 参数1：遍历到的数组    * 参数2：当前遍历到的索引    * 注意： 原生foreach只能遍历数组    * */</span>    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*    * JQuery-ForEach    * */</span>    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    $<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"Name"</span><span class="token punctuation">:</span><span class="token string">"Aha"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span><span class="token number">15</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    $<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>JQuery-map()</strong></p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"Name"</span><span class="token punctuation">:</span><span class="token string">"Aha"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span><span class="token number">15</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*原生JS-map遍历** 参数1：当前遍历的元素* 参数2：当前遍历的索引* 参数3：当前遍历的数组** 注意：只能遍历数组* */</span>arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*JQuery-map* 参数1：要遍历的对象* 参数2：遍历一个元素之后执行的回调函数* */</span>$<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>$<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>each()与map()</p></blockquote><ol><li>each静态方法默认的返回值就是,遍历谁就返回谁</li><li>map静态方法返回值是一个空数组</li></ol><p><strong>其他静态方法</strong></p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** trim();* 作用：去除字符串两端的空格* 参数：需要去除的字符串* 返回值：去除之后的字符串* */</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"     Ha     "</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> res <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** isWindow();* 作用：判断传入的对象是否window对象* */</span><span class="token comment" spellcheck="true">/** isArray();* 作用：判断传入的对象是否为真数组* */</span><span class="token comment" spellcheck="true">/** isFunction();* 作用：判断传入的是否为函数* */</span><span class="token comment" spellcheck="true">/** $.holdReady(true);* 作用：暂停ready执行* */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JQuery-选择器"><a href="#JQuery-选择器" class="headerlink" title="JQuery-选择器"></a>JQuery-选择器</h3><ul><li>基本选择器</li><li>层级选择器<ul><li>后代<code>$(&quot;ul li&quot;)</code> <code>$(&quot;ul&gt;li&quot;)</code></li><li>兄弟<code>$(&quot;p~div&quot;)`</code>$(“p+div”)`</li></ul></li><li>属性选择器</li><li>筛选选择器<ul><li><code>parent()</code></li><li><code>parents()</code></li><li><code>children()</code></li><li><code>siblings()</code></li></ul></li></ul><h3 id="JQuery-尺寸操作-位置操作"><a href="#JQuery-尺寸操作-位置操作" class="headerlink" title="JQuery-尺寸操作|位置操作"></a>JQuery-尺寸操作|位置操作</h3><ul><li><code>width()</code> 设置或返回元素的宽度（不包括内边距，边框 ， 外边距）</li><li><code>height()</code> 设置或返回元素的高度（不包括内边距，边框 ， 外边距）</li><li><code>innerWidth()</code>设置或返回元素的宽度（包括内边距）</li><li><code>innerHeight()</code>设置或返回元素的高度（包括内边距）</li><li><code>outerWidth()</code>设置或返回元素的宽度（包括内边距，边框）</li><li><code>outerHeight()</code>设置或返回元素的高度（包括内边距，边框）</li><li><code>outerWidth(true)</code>设置或返回元素的宽度（包括内边距，边框，外边距）</li><li><code>outerHeight(true)</code>设置或返回元素的高度（包括内边距，边框，外边距）</li></ul><hr><ul><li><code>offset([coordinates])</code> 作用：设置|获取元素距离窗口的偏移位<pre class="line-numbers language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//设置</span>      left<span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">,</span>      top<span class="token punctuation">:</span><span class="token number">110</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><code>position()</code> 作用：获取元素距离定位元素的偏移位<pre class="line-numbers language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.son'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取</span>  <span class="token comment" spellcheck="true">//不能设置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><code>scrollTop([val])</code> 作用：设置|获取元素的滚动值</li><li><code>scrollLeft([val])</code><pre class="line-numbers language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scrollTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scrollLeft</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="JQuery-动画"><a href="#JQuery-动画" class="headerlink" title="JQuery-动画"></a>JQuery-动画</h3><p><strong>自定义动画</strong></p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*    //三个参数    1. 接受一个对象可以在对象中修改属性    2. 指定动画时长    3. 动画节奏 默认swing linear    4. 动画执行完毕之后的回调函数*/</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//属性</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"动画执行完毕！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>/**     * //立即停止当前动画的执行,继续执行后续的     * stop()     * stop(false)     * stop(false,false)     *     * //停止所有动画的执行和后续所有的动画     * stop(true)     * stop(true,false)     *     * //立即完成当前的，并且停止后续所有的     * stop(true,true)     * */</code></pre><h3 id="JQuery-标签处理"><a href="#JQuery-标签处理" class="headerlink" title="JQuery-标签处理"></a>JQuery-标签处理</h3><ul><li>获取内容<code>text()</code><ul><li>获取标签和内容<code>html()</code></li><li>获取输入框的内容<code>val()</code></li></ul></li><li>设置内容<code>text(内容)</code></li><li>获取属性<code>attr(属性)</code> <ul><li><strong>注意</strong>无论找到多少元素，都只会返回第一个元素指定属性节点的值</li></ul></li><li>设置属性<code>attr(属性,值)</code> </li><li>删除属性<code>removeAttr(属性);</code><ul><li><strong>注意</strong>删除多个属性用空格隔开</li></ul></li></ul><h3 id="JQuery-文档处理"><a href="#JQuery-文档处理" class="headerlink" title="JQuery-文档处理"></a>JQuery-文档处理</h3><p><strong>添加节点</strong></p><ul><li><p>内部插入</p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">append</span><span class="token punctuation">(</span>content<span class="token operator">|</span>fn<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//元素添加到指定元素内部</span><span class="token function">appendTo</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token function">prepend</span><span class="token punctuation">(</span>content<span class="token operator">|</span>fn<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//将元素添加到指定元素的最前面</span><span class="token function">prependTo</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>外部插入<br><code>`</code>js<br>after(content|fn) //将元素添加到指定元素外部的后面<br>insertAfter(content)</p></li></ul><p>before(content|fn)//将元素添加到指定元素外部的前面<br>insertBefore(content)</p><pre><code>**删除节点**```jsremove() //删除指定元素empty() //删除指定元素的内容和子元素，指定元素自身不会被删除detach([expr]) //删除所有匹配的元素</code></pre><p><strong>替换</strong></p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">replaceWith</span><span class="token punctuation">(</span>content<span class="token operator">|</span>fn<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//替换所有匹配的元素</span><span class="token function">replaceAll</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//替换顺序不一样</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>复制节点</strong></p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//传入false是浅复制 传入true是深复制</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">[</span>Even<span class="token punctuation">[</span><span class="token punctuation">,</span>deepEven<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="http://jquery.cuishifeng.cn/" target="_blank" rel="noopener">中文文档</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> JQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS-Flex布局</title>
      <link href="/2019/04/css-flex-bu-ju.html"/>
      <url>/2019/04/css-flex-bu-ju.html</url>
      
        <content type="html"><![CDATA[<h1 id="Flex"><a href="#Flex" class="headerlink" title="Flex"></a>Flex</h1><h3 id="1-Flex布局"><a href="#1-Flex布局" class="headerlink" title="1. Flex布局"></a>1. Flex布局</h3><ul><li><p>display：flex 将对象作为弹性伸缩盒展示，用于块级元素</p></li><li><p>display：inline-flex 将对象作为弹性伸缩盒展示，用于行内元素</p></li></ul><h3 id="2-flex容器属性"><a href="#2-flex容器属性" class="headerlink" title="2. flex容器属性"></a>2. flex容器属性</h3><p><strong>flex-direction</strong>用于指定Flex主轴的方向，既然决定Flex子项在Flex容器的位置</p><p>取值：row|row-reverse|column|column-reverse</p><p><img src="/2019/04/css-flex-bu-ju/1555819189321.png" alt></p><p><strong>justify-content</strong>主轴上子项的对齐方式</p><ul><li>justify-content: flex-start; 左对齐</li><li>justify-content: flex-end; 右对齐</li><li>justify-content: center; 居中对齐</li><li>justify-content: space-between; 两端对齐</li><li>justify-content: space-around;</li></ul><p><strong>align-items</strong>用来指定侧轴子项的对齐方式</p><ul><li>align-items:stretch; 拉伸对齐</li><li>align-items:flex-start; 顶部对齐</li><li>align-items:flex-end; 底部对齐</li><li>align-items:center; 垂直居中对齐</li><li>align-items:baseline; 基线对齐</li></ul><p><strong>flex-wrap</strong>用来指定Flex子项是否换行</p><ul><li>flex-wrap: nowrap; 默认不换行</li><li>flex-wrap: wrap; 换行</li><li>flex-wrap: wrap-reverse; 反方向换行</li></ul><p><strong>align-content</strong>多行对齐方式</p><ul><li>flex-start</li><li>flex-end</li><li>center</li><li>space-between</li><li>space-around</li></ul><p><strong>align-self</strong>单独的某个子项的对齐方式</p><ul><li>auto</li><li>flex-start</li><li>flex-end</li><li>center</li><li>baseline</li><li>stretch</li></ul><h3 id="3-flex元素属性"><a href="#3-flex元素属性" class="headerlink" title="3. flex元素属性"></a>3. flex元素属性</h3><ul><li>flex-grow </li><li>flex-shrink</li><li>flex-basis</li><li>flex是grow、shrink、basis简写</li><li><p>order定义元素的排列顺序</p></li><li><p>align-self 单独的某个子项的对齐方式</p><ul><li>auto</li><li>flex-start</li><li>flex-end</li><li>center</li><li>baseline</li><li>stretch</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> CSS3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS动画-2D过渡</title>
      <link href="/2019/04/css-dong-hua-2d-guo-du.html"/>
      <url>/2019/04/css-dong-hua-2d-guo-du.html</url>
      
        <content type="html"><![CDATA[<h2 id="过度模块"><a href="#过度模块" class="headerlink" title="过度模块"></a>过度模块</h2><h4 id="过度三要素"><a href="#过度三要素" class="headerlink" title="过度三要素"></a>过度三要素</h4><ol><li>必须要有属性发生变化</li><li>告诉那个属性需要执行过度效果（属性）</li><li>必须告诉系统过度效果持续时长（时间）</li></ol><p><strong>注意</strong></p><p>当多个属性需要同时执行过度效果时要用逗号隔开</p><pre><code>/*过度模块*/transition-property: width， background-color;transition-duration: 5s, 2s;</code></pre><p><strong>格式</strong></p><ul><li>transition:属性 时间 速度;</li><li>transition-property:属性;</li><li>transition-duration:时间;</li><li>transition-delay:设置延迟时间;</li></ul><p><strong>编写过渡的套路</strong></p><ol><li>先编写基本界面</li><li>修改我们需要认为需要修改的属性</li><li>再回过头给被修改属性的那个元素添加过度即可</li></ol><h2 id="2D转换"><a href="#2D转换" class="headerlink" title="2D转换"></a>2D转换</h2><p>旋转 平移 缩放 </p><p><img src="/2019/04/css-dong-hua-2d-guo-du/1555774830934.png" alt></p><blockquote><p>旋转</p></blockquote><p><code>transform:rotate(45deg)</code></p><ol><li>deg(度) 角度单位</li><li>默认情况所有元素都是以自己的中心点为参考中心的</li></ol><p><strong>改变中心点</strong></p><p><code>transform-origin:50px 50px</code></p><ul><li>值的形式（像素|百分比|关键字）</li></ul><p>除了本身的Z轴旋转也可以设置其他坐标系</p><ul><li>rotateX</li><li>rotateY</li><li>rotateZ</li></ul><p>配合透视(近大远小) </p><p><code>perspective:300px</code></p><blockquote><p>平移</p></blockquote><p><code>transform:translate(100px,100px)</code></p><p>两个参数(水平方向,垂直方向)</p><blockquote><p>缩放</p></blockquote><p><code>transform:scale(1.5,1.5,)</code></p><p>两个参数(水平方向,垂直方向)</p><blockquote><p>倾斜</p></blockquote><p><code>skew(deg, deg)</code>使元素按一定的角度进行倾斜</p><h5 id="需要注意的是-这些可以连着一起写"><a href="#需要注意的是-这些可以连着一起写" class="headerlink" title="需要注意的是 这些可以连着一起写"></a>需要注意的是 这些可以连着一起写</h5><p>比如<code>transform: translate(100px, 0) rotate(45deg);</code> 多个操作用空格分隔 然后注意操作会改变坐标系</p>]]></content>
      
      
      
        <tags>
            
            <tag> CSS3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS框架-Bulma</title>
      <link href="/2019/04/css-kuang-jia-bulma.html"/>
      <url>/2019/04/css-kuang-jia-bulma.html</url>
      
        <content type="html"><![CDATA[<h1 id="Bulma"><a href="#Bulma" class="headerlink" title="Bulma"></a>Bulma</h1><p><a href="https://bulma.io/documentation/overview/" target="_blank" rel="noopener">官网</a></p><h2 id="宽度断点"><a href="#宽度断点" class="headerlink" title="宽度断点"></a>宽度断点</h2><ul><li>mobile 小于等于768px</li><li>tablet 大于等于769px</li><li>desktop 大于等于1024px</li><li>widescreen 大于等于1216px</li><li>fullhd 大于等于1408px</li></ul><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><pre><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;css/bulma.min.css&quot;/&gt;</code></pre><p><strong>大小</strong></p><ul><li>is-small</li><li>is-primary</li><li>is-medium</li><li>is-large</li></ul><p><img src="/2019/04/css-kuang-jia-bulma/1555740968055.png" alt></p><p><strong>颜色</strong></p><ul><li>is-primary</li><li>is-link</li><li>is-info</li><li>is-success</li><li>is-warning</li><li>is-danger</li></ul><p><code>is-white</code>  <code>is-light</code>  <code>is-dark</code>  <code>is-black</code>  <code>is-text</code></p><p><img src="/2019/04/css-kuang-jia-bulma/1555741359662.png" alt></p><p><strong>按钮状态修饰</strong></p><ul><li>is-hovered</li><li>is-focused</li><li>is-active</li><li>is-loading</li></ul><p><img src="/2019/04/css-kuang-jia-bulma/1555741837256.png" alt></p><h2 id="网格体系"><a href="#网格体系" class="headerlink" title="网格体系"></a>网格体系</h2><p>Bulma 的网格体系基于 Flex 布局</p><pre><code>&lt;div class=&quot;columns box&quot;&gt;            &lt;div class=&quot;column&quot;&gt;1&lt;/div&gt;            &lt;div class=&quot;column&quot;&gt;2&lt;/div&gt;            &lt;div class=&quot;column&quot;&gt;3&lt;/div&gt;            &lt;div class=&quot;column&quot;&gt;4&lt;/div&gt;&lt;/div&gt;</code></pre><p><img src="/2019/04/css-kuang-jia-bulma/1555742474856.png" alt></p><p>当屏幕宽度大于768px所有项目平铺，平分容器宽度，如果宽度小于768所有盒子变成垂直</p><ul><li>is-narrow 网格的宽度由内容的宽度决定</li><li>is-centered 网格的内容居中对齐</li><li>is-gapless 网格之间没有间距</li></ul><p><strong>12网格体系</strong></p><ul><li>is-2</li><li>is-3</li><li>is-4</li><li>…</li></ul><p><strong>网格偏移</strong></p><ul><li>is-offset-one-quarter</li><li>is-offset-one-fifth</li><li>is-offset-8</li><li>is-offset-1</li></ul><p><strong>指定项目的宽度</strong></p><ul><li>四分之三：is-three-quarters</li><li>四分之一： is-one-quarter</li><li>三分之二：is-two-thirds</li><li>三分之一：is-one-third</li><li>二分之一：is-half</li><li>五分之四：is-four-fifths</li><li>五分之三：is-three-fifths</li><li>五分之二：is-two-fifths</li><li>五分之一：is-one-fifth</li></ul><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><h4 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h4><p><code>.container</code> </p><p>容器的宽度取决于每个断点，在电脑端最大宽度960px 在大屏电脑上最大宽度是1344px</p><p><strong>流体容器</strong></p><p><code>.is-fluid</code><br>满屏宽度，并且左右32px的外边距</p><h4 id="Level"><a href="#Level" class="headerlink" title="Level"></a>Level</h4><p><strong>结构</strong></p><ul><li>level 主容器<ul><li>level-left左侧</li><li>level-right 右侧<ul><li>level-item 每个独立元素</li></ul></li></ul></li></ul><p>左侧与右侧相当于flex-start与flex-end</p><h4 id="Hero"><a href="#Hero" class="headerlink" title="Hero"></a>Hero</h4><p>横幅</p><p>整体分为三个垂直部分</p><ul><li>hero<ul><li>hero-head 顶部</li><li>hero-body 垂直居中</li><li>hero-foot  底部</li></ul></li></ul><p><img src="/2019/04/css-kuang-jia-bulma/1555747654211.png" alt></p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hero is-large is-info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hero-head<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Logo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--主体--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hero-body<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>桃阿<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>subtitle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>从心<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--脚注--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hero-foot<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            QQ569781231        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Tiles"><a href="#Tiles" class="headerlink" title="Tiles"></a>Tiles</h4><p>卡片布局</p><p><code>.tile</code></p><ul><li><strong>三种上下文修饰符</strong><ul><li>is-ancestor 始祖</li><li>is-parent 父</li><li>is-child 孩子</li></ul></li><li><strong>方向修饰符</strong><ul><li>is-vertical</li></ul></li></ul><p><img src="/2019/04/css-kuang-jia-bulma/1555749071437.png" alt></p><p><strong>分析</strong></p><p><img src="/2019/04/css-kuang-jia-bulma/1555749066845.png" alt></p><hr><h2 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h2><p>布局默认是在手机上垂直堆叠，其他宽度都是平铺。如果希望手机也保持平铺，可以加上<code>is-mobile</code>修饰类</p><ul><li>is-mobile</li><li>is-desktop</li></ul><p>为不同的设备指定不同的布局</p><pre><code>&lt;!--手机是 flex 布局，平板是 inline 布局，其他宽度是 block 布局--&gt;&lt;div class=&quot;    column    is-flex-mobile    is-inline-tablet    is-block-desktop&quot;&gt;</code></pre><p><strong>隐藏与显示修饰</strong></p><ul><li>is-hidden-mobile：只在手机隐藏</li><li>is-hidden-tablet-only：只在平板隐藏</li><li>is-hidden-desktop-only ：只在桌面隐藏</li><li>is-hidden-touch：手机和平板隐藏，其他宽度显示</li><li><p>is-hidden-desktop 只在手机显示其他隐藏</p></li><li><p>is-block</p></li><li>is-flex</li><li>is-inline</li><li>is-inline-block</li><li>is-inline-flex</li></ul><h2 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h2><p><strong>文字大小</strong></p><ul><li>is-size-1： 3rem</li><li>is-size-2： 2.5rem</li><li>is-size-3： 2rem</li><li>is-size-4： 1.5rem</li><li>is-size-5： 1.25rem</li><li>is-size-6： 1rem</li><li>is-size-7： 0.75rem</li></ul><p>为不同的设备指定不同的大小文字</p><ul><li>is-size-1-mobile：手机是 size-1</li><li>is-size-1-tablet：平板是 size-1</li><li>is-size-1-touch：手机和平板是 size-1</li><li>is-size-1-desktop：桌面、宽屏和高清是 size-1</li><li>is-size-1-widescreen：宽屏和高清是 size-1</li><li>is-size-1-fullhd：高清是 size-1</li></ul><p><strong>对齐方式</strong></p><ul><li>has-text-centered</li><li>has-text-justified</li><li>has-text-left</li><li>has-text-right</li></ul><hr><h1 id="其他元素"><a href="#其他元素" class="headerlink" title="其他元素"></a>其他元素</h1><h2 id="Box"><a href="#Box" class="headerlink" title="Box"></a>Box</h2><p>带有阴影、边框、圆角和一些边距的容器</p><ul><li>.box</li></ul><h2 id="Titles"><a href="#Titles" class="headerlink" title="Titles"></a>Titles</h2><p>用来增加页面深度的简单 标题</p><ul><li>.title<ul><li>.subtitle</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> CSS3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>响应式布局</title>
      <link href="/2019/04/xiang-ying-shi-bu-ju.html"/>
      <url>/2019/04/xiang-ying-shi-bu-ju.html</url>
      
        <content type="html"><![CDATA[<h1 id="响应式"><a href="#响应式" class="headerlink" title="响应式"></a>响应式</h1><blockquote><p>定义</p></blockquote><p>利用一套代码实现页面的布局和排版以适配不同分辨率的设备</p><h2 id="视口宽度与设备宽度"><a href="#视口宽度与设备宽度" class="headerlink" title="视口宽度与设备宽度"></a>视口宽度与设备宽度</h2><ul><li>width </li><li>device-width 设备屏幕宽度</li></ul><p><strong>viewport视口</strong></p><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><p><strong>Step1</strong></p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>viewport<span class="token punctuation">'</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, minium-scale<span class="token punctuation">=</span>1.0, maximun-scale<span class="token punctuation">=</span>1.0, user-scale<span class="token punctuation">=</span>no<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>Step2</strong></p><p><code>@media</code></p><ul><li>min-width</li><li>max-width</li><li>min-height</li><li>max-height</li><li>orientation=portrait</li><li>orientation=landscape </li></ul><p><code>媒介查询</code></p><ul><li>小屏幕 &lt;=768px</li><li>平板 &gt;=769px</li><li>中等屏幕 &gt;=1024px</li><li>大屏幕 &gt;=1200px</li></ul><pre><code>&lt;!--用法1--&gt;&lt;link rel=&quot;stylesheet&quot; media=&quot;(max-width:640px)&quot; href=&quot;max-640.css&quot;&gt;&lt;!--用法2--&gt;&lt;style&gt;    @media (max-width:768px){        //Code    }&lt;/style&gt;</code></pre><h1 id="CSS单位"><a href="#CSS单位" class="headerlink" title="CSS单位"></a>CSS单位</h1><h2 id="px"><a href="#px" class="headerlink" title="px"></a>px</h2><p>一个px相当于1个像素</p><h2 id="em"><a href="#em" class="headerlink" title="em"></a>em</h2><p>相对的长度单位。em相对参照物为父元素的font-size，em具有继承的特点 1em = 16px</p><h2 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h2><p>参照物为根元素的html，相于参照物固定不变，所以比较好计算 1rem = 16px</p><pre><code>font-size:62.5% 1rem = 10px;font-size:100% 1rem = 16px;font-size:10px;</code></pre><h2 id="vh"><a href="#vh" class="headerlink" title="vh"></a>vh</h2><p>可视范围的高度</p><h2 id="vw"><a href="#vw" class="headerlink" title="vw"></a>vw</h2><p>可视范围的宽度</p><h1 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h1><ul><li>一个容器里面放三个盒子</li><li>设置两侧盒子宽度固定</li><li>中间盒子宽度100% 和最小宽度 防止缩小后变形</li><li>设置中间盒子padding等于两侧盒子的宽度</li><li>让三个盒子在同一个方向浮动</li><li>设置左边盒子margin-left:-100%;</li><li>设置右边盒子margin-left:-自身的宽度</li></ul><h2 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h2><pre class="line-numbers language-html"><code class="language-html">*{    margin: 0;    padding: 0;    list-style:none;}.container{    min-width: 400px;    height: 200px;    background: red;    padding:0 200px;}.left,.right{    width: 200px;    height: 200px;    background: pink;    float: left;}.main {    width: 100%;    height: 200px;    background: blue;    float: left;}.left{    margin-left:-100%;    position: relative;    left: -200px;}.right{    margin-left: -200px;/*-自己的宽度*/    position: relative;    right: -200px;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h2><p>内容区域多了一个盒子</p><p>盒子设置margin:0 200px给两边腾出位置</p><pre><code>&lt;style&gt;    *{        margin: 0;        padding: 0;    }    .container{        min-width: 400px;        height: 200px;        background: green;    }    .left,.right{        width: 200px;        height: 200px;        background-color:pink;        float: left;    }    .main{        width: 100%;        height: 200px;        background-color: blue;        float: left;    }    .main-content{        margin:0 200px;    }    .left{        margin-left: -100%;    }    .right{        margin-left: -200px;    }&lt;/style&gt;&lt;div class=&quot;container&quot;&gt;    &lt;div class=&quot;main&quot;&gt;        &lt;div class=&quot;main-content&quot;&gt;中间&lt;/div&gt;    &lt;/div&gt;    &lt;div class=&quot;left&quot;&gt;左边&lt;/div&gt;    &lt;div class=&quot;right&quot;&gt;右边&lt;/div&gt;&lt;/div&gt;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> CSS3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-集合</title>
      <link href="/2019/04/java-ji-he.html"/>
      <url>/2019/04/java-ji-he.html</url>
      
        <content type="html"><![CDATA[<h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><p>数组的长度是固定的，操作数据很麻烦，java内部给我们提供了集合类用来存放数据的一个容器。不仅可以存储对象，长度可改变</p><h2 id="集合类"><a href="#集合类" class="headerlink" title="集合类"></a>集合类</h2><ol><li>它的长度可以改变</li><li>能存储任意的对象</li><li><p>长度是随着你元素的增加而增加</p><blockquote><p>数组和集合区别？</p></blockquote></li><li><p>数组可以存基本数据类型和引用数据类型</p></li><li>集合当中<strong>只可以</strong>存放引用数据类型</li><li>数组的长度固定，集合长度是可以改变的</li></ol><blockquote><p>数组与集合的应用？</p></blockquote><ul><li>数据元素个数固定-数组</li><li>元素不固定-集合</li></ul><h4 id="集合类在JAVA中的体系结构"><a href="#集合类在JAVA中的体系结构" class="headerlink" title="集合类在JAVA中的体系结构"></a>集合类在JAVA中的体系结构</h4><p><img src="/2019/04/java-ji-he/1555737713668.png" alt></p><h3 id="Collection接口"><a href="#Collection接口" class="headerlink" title="[Collection接口]"></a>[Collection接口]</h3><blockquote><p>####Collection集合-添加元素</p></blockquote><p><strong>添加一个元素<code>boolean add(E e)</code></strong></p><p><strong>添加一个集合<code>boolean addAll(Collection&lt;&gt; c)</code></strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        Collection c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"String"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token number">999</span><span class="token punctuation">,</span> <span class="token number">999</span><span class="token punctuation">,</span> String<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>#####注意</p><ul><li>add()方法是添加元素</li><li>添加的基本数据类型会自动装箱</li><li>可以添加重复元素</li><li>内部已经覆盖了tostring()方法</li></ul><blockquote><h4 id="Collection集合-移除元素"><a href="#Collection集合-移除元素" class="headerlink" title="Collection集合-移除元素"></a>Collection集合-移除元素</h4></blockquote><p><strong>移除一个元素<code>boolean remove(Object o)</code></strong></p><p><strong>删除所有元素<code>void clear()</code></strong></p><p><strong>判断是否为空<code>boolean isEmpty()</code></strong></p><p><strong>删除两个集合的交集<code>boolean removeAll(Collection&lt;?&gt; c)</code></strong></p><pre class="line-numbers language-java"><code class="language-java">Collection c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"6"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"6"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//清空所有</span>c<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Collection集合-获取集合长度</strong></p><pre><code>System.out.println(c.size());</code></pre><blockquote><h3 id="Collection集合-集合转数组"><a href="#Collection集合-集合转数组" class="headerlink" title="Collection集合-集合转数组"></a>Collection集合-集合转数组</h3></blockquote><ol><li>List转数组 然后遍历 <code>Object[] toArray()</code></li></ol><pre><code>Collection c = new ArrayList();c.add(1);c.add(2);System.out.println(c);&gt;&gt; [1,2]/*集合转数组*/Object[] o = c.toArray();System.out.println(o[0]);&gt;&gt; 1</code></pre><blockquote><h4 id="Collection集合-遍历"><a href="#Collection集合-遍历" class="headerlink" title="Collection集合-遍历"></a>Collection集合-遍历</h4></blockquote><ul><li>方式一<code>toArray()</code><br><code>`</code>java<br>Collection per = new ArrayList();<br>per.add(new Person(“张三”));<br>per.add(new Person(“李四”));</li></ul><p>Object[] res = per.toArray(); //自动把数组当中所有元素向上转型<br>System.out.println(res); //打印则是地址</p><p>for(int i=0; i&lt;res.length; i++) {<br>    Person p = (Person)res[i]; //向下转型<br>    System.out.println(p.getName());<br>}</p><pre><code>- 方式二`迭代器````javapublic static void main(String[] args) {    Collection c = new ArrayList();    c.add(new Cat(&quot;Mini&quot;));    c.add(new Cat(&quot;Aimi&quot;));    //遍历    Iterator it = c.iterator(); //放进容器 里面的对象都是Object类型    while(it.hasNext()) {        Cat o = (Cat)it.next(); //向下转型        System.out.println(o.name);    }}</code></pre><blockquote><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4></blockquote><ul><li>判断调用的集合是否包含(全部包含)传入集合<code>boolean containsAll(Object o)</code></li><li>取两个集合的交集<code>boolean retainAll(Collection&lt;?&gt; c)</code></li><li><code>add()</code>可以添加一个元素到集合中</li><li><code>addAll()</code>集合添加集合</li><li><code>remove()</code>移除一个元素</li><li><code>clear()</code>清空集合</li><li><code>isEmpty()</code>判断是否为空</li><li><code>size()</code>获取集合长度</li></ul><hr><h2 id="List"><a href="#List" class="headerlink" title="[List]"></a>[List]</h2><p><strong>根据角标添加元素</strong></p><ul><li>list是有角标的可以根据角标去添加元素。</li><li>list.add(index,Object element); index必须要&lt;=size</li></ul><p><strong>获取指定角标的元素</strong></p><pre><code>System.out.println(list.get(0));</code></pre><p><strong>迭代器-删除元素</strong></p><p><strong>迭代器-遍历集合</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterator it <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历集合</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//取出对应的元素</span>            String s <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//等于“2”删除</span>                it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>迭代器-添加元素</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//list当中有自己的迭代器</span>         ListIterator it <span class="token operator">=</span>list<span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String str <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                it<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"99"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// hasPrevious() 是否含有上一个</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasPrevious</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"LOOP"</span> <span class="token operator">+</span> it<span class="token punctuation">.</span><span class="token function">previousIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">previous</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="ArrayList-数组实现"><a href="#ArrayList-数组实现" class="headerlink" title="[ArrayList]数组实现"></a>[ArrayList]数组实现</h2><p>把原有的数据复制出来，再创建一个新数组容量增加，把复制的数组放到新数组当中原来的数组被扔掉</p><p><strong>添加元素</strong></p><p>把对应的值，通过前一个值覆盖后一个值得方式，<strong>依次</strong>往后移动，把要插入的值覆盖到指定的位置</p><p><strong>删除元素</strong></p><p>依次往前赋值，最后一个元素设为null</p><p><strong>去除元素</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*1. 创建一个空的集合2. 依次取出每一个元素3. 每取出一个元素，先判断新集合当中是否包含该元素4. 如果包含 就不添加了*/</span><span class="token keyword">public</span> <span class="token keyword">static</span> ArrayList <span class="token function">getSingleELe</span><span class="token punctuation">(</span>ArrayList list<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*创建一个空的集合*/</span>    ArrayList newList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*依次取出每一个元素*/</span>    ListIterator it <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Object obj <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*判断是否包含其中*/</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>newList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            newList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*返回新集合*/</span>    <span class="token keyword">return</span> newList<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>“如果是对象类型 需要覆写eauals方法”</p><hr><h2 id="LinkedList-链表实现"><a href="#LinkedList-链表实现" class="headerlink" title="[LinkedList]链表实现"></a>[LinkedList]链表实现</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        LinkedList a1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*特有*/</span>        <span class="token comment" spellcheck="true">// 第一个位置添加元素</span>        a1<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span><span class="token string">"Start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 最后位置添加元素</span>        a1<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token string">"End"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 移除第一个元素</span>        a1<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 移除最后一个元素</span>        a1<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 根据角标获取元素</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="Vector-数组实现"><a href="#Vector-数组实现" class="headerlink" title="[Vector]数组实现"></a>[Vector]数组实现</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Enumeration<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Vector<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        Vector ve <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*特有方法 加锁更安全*/</span>        <span class="token comment" spellcheck="true">// 添加元素</span>        ve<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ve<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ve<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历元素</span>        Enumeration e <span class="token operator">=</span> ve<span class="token punctuation">.</span><span class="token function">elements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h3><ul><li>对添加的元素进行排序</li></ul><p>如果添加的是一个对象。需要实现接口<code>Comparable&lt;ClassName&gt;</code> 覆写<code>compareTo()</code></p><p>如果返回值为0则添加一个对象</p><p>如果返回值为1返回全部对象 </p><p>返回-1则返回逆序。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动效开发</title>
      <link href="/2019/04/dong-xiao-kai-fa.html"/>
      <url>/2019/04/dong-xiao-kai-fa.html</url>
      
        <content type="html"><![CDATA[<h1 id="动效开发"><a href="#动效开发" class="headerlink" title="动效开发"></a>动效开发</h1><p><strong>技术能力</strong></p><ul><li>Javascript</li><li>Css</li><li>SVG</li><li>Canvas</li></ul><p>我们需要把重心放在CSS3动画上面，因为当红小生就是CSS3结合JavaScript</p><h2 id="CSS3"><a href="#CSS3" class="headerlink" title="CSS3"></a>CSS3</h2><blockquote><p>  <code>transition</code>过度动画</p></blockquote><p>如果没有transition元素，元素之间的状态变化过程就会显得生硬而突兀</p><blockquote><p> <code>animation</code>动画</p></blockquote><p><strong>动画基本框架</strong></p><p>(animation:动画名称 动画时长 动画运动速度 延迟时间 执行次数 往返动画)</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">div</span><span class="token punctuation">{</span>    <span class="token property">animation</span><span class="token punctuation">:</span>name <span class="token number">1</span>s linear <span class="token number">1</span>s infinite<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@keyframes</span> name</span> <span class="token punctuation">{</span>  <span class="token selector">from</span><span class="token punctuation">{</span>    //CODE  <span class="token punctuation">}</span>  <span class="token selector">to </span><span class="token punctuation">{</span>    //CODE  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>学习它之前需要掌握两个基本知识点</p><ul><li>关键帧</li><li>animation属性</li></ul><p><strong>关键帧</strong></p><p>@keyframes用来定义动画的具体内容</p><ol><li>叫什么名字？</li><li>动画开始，中间状态，结束 做哪些动作</li><li>每个状态出现在动画过程的哪个时间点</li></ol><p><strong>animation属性</strong></p><ul><li>指定元素用什么动画？（animation-name）</li><li>动画的持续时间是多少？（animation-duration）</li><li>浏览器用什么样的时间轴函数来执行该动画？（animation-timing-function）</li><li>是否需要延时执行该动画？(animation-delay)</li><li>动画循环执行的次数是多少？（animation-iteration-count）</li><li>动画执行的方向是什么？（animation-direction）</li><li>动画填充模式是什么？（animation-fill-mode）<ul><li>none 不做任何改变</li><li>backwards 等待状态的时候显示动画第一帧的样式</li><li>forwards 结束状态的时候显示动画的最后一帧的样式</li><li>both forwards+backwards</li></ul></li><li>动画执行状态是运行还是暂停？（animation-play-state）</li></ul><blockquote><p> 3D</p></blockquote><p>很多时候，仅仅将元素进行二维层面的变换并不能完美表现.3D相对于2D坐标系多了Z轴</p><ul><li>透视的概念理解<code>perspective属性</code></li><li>空间变换体系<code>transform-style</code></li><li>Z 轴位移<code>translateZ</code></li></ul><blockquote><p>what is the perspective？</p></blockquote><p><del>n. 观点；远景；透视图</del></p><p><img src="https://user-gold-cdn.xitu.io/2018/2/22/161be0368bf94a1a?w=750&amp;h=296&amp;f=png&amp;s=13189" alt></p><p>超越平面的限制在于<code>transform-style: preserve-3d</code>这个属性设置,默认为flat。这个属性的设置旨在告诉子元素需要遵循怎样的空间体系规则。这个属性不能继承，因此只要有子元素需要设置空间体系规则，就得在父元素声明这个属性</p><h2 id="动画的分类"><a href="#动画的分类" class="headerlink" title="动画的分类"></a>动画的分类</h2><ul><li>补间动画</li><li>逐帧动画</li></ul><blockquote><p>补间动画</p></blockquote><p>人为设定动画的关键状态（也就是关键帧），而关键帧之间的过渡过程则由计算机处理渲染的动画处理形式。</p><blockquote><p>逐帧动画</p></blockquote><p>原理即将每帧不同的图像连续播放，从而产生动画效果</p><ul><li>不同的图像</li><li>连续播放</li></ul><p><img src="https://user-gold-cdn.xitu.io/2018/2/22/161bde4366d4d605?w=480&amp;h=270&amp;f=gif&amp;s=7498666" alt></p><p><strong>举例</strong></p><ol><li>GIF</li><li>Jacascript控制动画播放</li><li>Canvas</li></ol><p>将动画帧合并成雪碧图，放到 background-image 中，通过 JavaScript 改变 background-position 的值来实现动画的播放。</p><p>使用 JavaScript 实现逐帧动画，兼容性佳，且交互灵活</p>]]></content>
      
      
      
        <tags>
            
            <tag> CSS3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django-邮件系统</title>
      <link href="/2019/04/django-you-jian-xi-tong.html"/>
      <url>/2019/04/django-you-jian-xi-tong.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>准备工作</p></blockquote><ul><li>host</li><li>user</li><li>pass</li></ul><pre><code>smtp.qq.com3335215292@qq.com授权码 syw....vthtk....</code></pre><h3 id="smtplib库"><a href="#smtplib库" class="headerlink" title="smtplib库"></a>smtplib库</h3><p><strong>发送邮件</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> smtplib<span class="token keyword">from</span> email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>text <span class="token keyword">import</span> MIMEText<span class="token keyword">from</span> email<span class="token punctuation">.</span>header <span class="token keyword">import</span> Header<span class="token comment" spellcheck="true"># 第三方SMTP服务</span>mail_host <span class="token operator">=</span> <span class="token string">'smtp.qq.com'</span>mail_user <span class="token operator">=</span> <span class="token string">'3335215292@qq.com'</span>mail_pass <span class="token operator">=</span> <span class="token string">'----'</span><span class="token triple-quoted-string string">"""发送者与接收者"""</span>send_user <span class="token operator">=</span> <span class="token string">'3335215292@qq.com'</span>receive_user <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'569781231@qq.com'</span><span class="token punctuation">]</span>msg <span class="token operator">=</span> MIMEText<span class="token punctuation">(</span><span class="token string">'这是一封邮件'</span><span class="token punctuation">,</span><span class="token string">'plain'</span><span class="token punctuation">,</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#发送的内容</span>msg<span class="token punctuation">[</span><span class="token string">'From'</span><span class="token punctuation">]</span> <span class="token operator">=</span> Header<span class="token punctuation">(</span><span class="token string">'桃阿'</span><span class="token punctuation">,</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 发件人</span>msg<span class="token punctuation">[</span><span class="token string">'to'</span><span class="token punctuation">]</span> <span class="token operator">=</span> Header<span class="token punctuation">(</span><span class="token string">'569781231@qq.com'</span><span class="token punctuation">,</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 收件人</span>msg<span class="token punctuation">[</span><span class="token string">'Subject'</span><span class="token punctuation">]</span> <span class="token operator">=</span> Header<span class="token punctuation">(</span><span class="token string">'Python SMTP 邮件测试'</span><span class="token punctuation">,</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#邮件的主题</span><span class="token keyword">try</span><span class="token punctuation">:</span>    server <span class="token operator">=</span> smtplib<span class="token punctuation">.</span>SMTP<span class="token punctuation">(</span>mail_host<span class="token punctuation">,</span><span class="token number">587</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#主机地址与端口</span>    server<span class="token punctuation">.</span>starttls<span class="token punctuation">(</span><span class="token punctuation">)</span>    server<span class="token punctuation">.</span>login<span class="token punctuation">(</span>mail_user<span class="token punctuation">,</span> mail_pass<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 登陆</span>    server<span class="token punctuation">.</span>sendmail<span class="token punctuation">(</span>send_user<span class="token punctuation">,</span>receive_user<span class="token punctuation">,</span>msg<span class="token punctuation">.</span>as_string<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#发送人 收件人 发送消息</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'邮件发送成功'</span><span class="token punctuation">)</span>    server<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>login()</code>方法用来登录SMTP服务器</li><li><code>sendmail()</code>方法就是发邮件</li><li>邮件正文是一个str，<code>as_string()</code>把MIMEText对象变成str</li></ul><p><strong>发送带有HTML格式的邮件</strong></p><p>在构造MIMEText对象时，把HTML字符串传进去，再把第二个参数由plain变为html就可以了</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> smtplib<span class="token keyword">from</span> email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>text <span class="token keyword">import</span> MIMEText<span class="token keyword">from</span> email<span class="token punctuation">.</span>header <span class="token keyword">import</span> Header<span class="token comment" spellcheck="true"># 第三方SMTP服务</span>mail_host <span class="token operator">=</span> <span class="token string">'smtp.qq.com'</span>mail_user <span class="token operator">=</span> <span class="token string">'3335215292@qq.com'</span>mail_pass <span class="token operator">=</span> <span class="token string">'----'</span>send_user <span class="token operator">=</span> <span class="token string">'3335215292@qq.com'</span>receive_user <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'569781231@qq.com'</span><span class="token punctuation">]</span>mail_msg <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;h1 style="color:red;">今天天气真好&lt;/h1>&lt;a href="http://www.baodu.com" target="_blank">百度&lt;/a>&lt;hr/>"""</span>msg <span class="token operator">=</span> MIMEText<span class="token punctuation">(</span>mail_msg<span class="token punctuation">,</span><span class="token string">'html'</span><span class="token punctuation">,</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#这里选择文本 HTML格式发送 编码格式</span>msg<span class="token punctuation">[</span><span class="token string">'From'</span><span class="token punctuation">]</span> <span class="token operator">=</span> Header<span class="token punctuation">(</span><span class="token string">'桃阿'</span><span class="token punctuation">,</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 发件人</span>msg<span class="token punctuation">[</span><span class="token string">'to'</span><span class="token punctuation">]</span> <span class="token operator">=</span> Header<span class="token punctuation">(</span><span class="token string">'569781231@qq.com'</span><span class="token punctuation">,</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 收件人</span>subject <span class="token operator">=</span> <span class="token string">'Python HTML格式邮件'</span>msg<span class="token punctuation">[</span><span class="token string">'Subject'</span><span class="token punctuation">]</span> <span class="token operator">=</span> Header<span class="token punctuation">(</span>subject<span class="token punctuation">,</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#邮件的主题</span><span class="token keyword">try</span><span class="token punctuation">:</span>    server <span class="token operator">=</span> smtplib<span class="token punctuation">.</span>SMTP<span class="token punctuation">(</span>mail_host<span class="token punctuation">,</span><span class="token number">587</span><span class="token punctuation">)</span>    server<span class="token punctuation">.</span>starttls<span class="token punctuation">(</span><span class="token punctuation">)</span>    server<span class="token punctuation">.</span>login<span class="token punctuation">(</span>mail_user<span class="token punctuation">,</span> mail_pass<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 登陆</span>    server<span class="token punctuation">.</span>sendmail<span class="token punctuation">(</span>send_user<span class="token punctuation">,</span> receive_user<span class="token punctuation">,</span> msg<span class="token punctuation">.</span>as_string<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 发送</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'邮件发送成功'</span><span class="token punctuation">)</span>    server<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用Django发送邮件"><a href="#使用Django发送邮件" class="headerlink" title="使用Django发送邮件"></a>使用Django发送邮件</h3><p><strong>发送文本</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#配置settings.py</span>EMAIL_BACKEND <span class="token operator">=</span> <span class="token string">'django.core.mail.backends.smtp.EmailBackend'</span>EMAIL_HOST <span class="token operator">=</span> <span class="token string">'smtp.qq.com'</span> <span class="token comment" spellcheck="true">#发送方的smtp服务器地址</span>EMAIL_PORT <span class="token operator">=</span> <span class="token number">25</span> <span class="token comment" spellcheck="true">#smtp服务端口，默认为25</span>EMAIL_HOST_USER <span class="token operator">=</span> <span class="token string">'3335215292@qq.com'</span> <span class="token comment" spellcheck="true">#发送服务器的用户名</span>EMAIL_HOST_PASSWORD <span class="token operator">=</span> <span class="token string">'----'</span> <span class="token comment" spellcheck="true">#用户的密码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 新建send_mial.py</span><span class="token keyword">import</span> os<span class="token keyword">from</span> django<span class="token punctuation">.</span>core<span class="token punctuation">.</span>mail <span class="token keyword">import</span> send_mailos<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">'DJANGO_SETTINGS_MODULE'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'AG02.settings'</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    send_mail<span class="token punctuation">(</span>        <span class="token string">'测试邮件'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#邮件主题</span>        <span class="token string">'欢迎访问主内容区域'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#邮件具体内容</span>        <span class="token string">'3335215292@qq.com'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#邮件发送方</span>        <span class="token punctuation">[</span><span class="token string">'569781231@qq.com'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#接受方的邮件地址列表</span>        fail_silently<span class="token operator">=</span><span class="token boolean">False</span>    <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>发送HTML格式的邮件</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">from</span> django<span class="token punctuation">.</span>core<span class="token punctuation">.</span>mail <span class="token keyword">import</span> send_mail<span class="token keyword">from</span> django<span class="token punctuation">.</span>core<span class="token punctuation">.</span>mail <span class="token keyword">import</span> EmailMultiAlternativesos<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">'DJANGO_SETTINGS_MODULE'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'AG02.settings'</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    subject<span class="token punctuation">,</span> from_email<span class="token punctuation">,</span>to_email <span class="token operator">=</span> <span class="token string">'测试邮件'</span><span class="token punctuation">,</span><span class="token string">'3335215292@qq.com'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'569781231@qq.com'</span><span class="token punctuation">]</span>    html_con <span class="token operator">=</span> <span class="token triple-quoted-string string">"""        &lt;h1 style='color:red;'>Yo Friend&lt;/h1>    """</span>    <span class="token comment" spellcheck="true"># subject主题 content内容 to_addr是一个列表 发送给那些人</span>    msg <span class="token operator">=</span> EmailMultiAlternatives<span class="token punctuation">(</span>subject<span class="token punctuation">,</span>html_con<span class="token punctuation">,</span>from_email<span class="token punctuation">,</span> to_email<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#类型</span>    msg<span class="token punctuation">.</span>content_subtype <span class="token operator">=</span> <span class="token string">'html'</span>    <span class="token comment" spellcheck="true"># 发送</span>    msg<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django-admin后台管理</title>
      <link href="/2019/04/django-admin-hou-tai-guan-li.html"/>
      <url>/2019/04/django-admin-hou-tai-guan-li.html</url>
      
        <content type="html"><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="#准备工作"></a>#准备工作</h1><blockquote><p>创建用户名与密码</p></blockquote><pre><code>python manage.py createsuperuser</code></pre><blockquote><p>为APP注册到后台</p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#admin.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token keyword">from</span> book <span class="token keyword">import</span> models <span class="token comment" spellcheck="true">#导入ORM模型</span><span class="token comment" spellcheck="true"># Register your models here.</span>admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>models<span class="token punctuation">.</span>Book<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>搜索admin文件</p></blockquote><p>在<code>INSTALLED_APPS</code>设置中添加了<code>django.contrib.admin</code>后，Django将自动在每个应用中搜索admin模块并导入它。也就是说，通常我们在每个app下都有一个admin.py文件，将当前app和admin有关的内容写到内部的admin.py文件中就可以了，Django会自动搜索并应用它们</p><hr><h3 id="Admin自定义"><a href="#Admin自定义" class="headerlink" title="#Admin自定义"></a>#Admin自定义</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Book<span class="token comment" spellcheck="true"># 创建一个BookAdmin的子类</span><span class="token keyword">class</span> <span class="token class-name">BookAdmin</span><span class="token punctuation">(</span>admin<span class="token punctuation">.</span>ModelAdmin<span class="token punctuation">)</span><span class="token punctuation">:</span>    list_display <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#添加展示字段</span>    list_filter <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#添加过滤器列表</span><span class="token comment" spellcheck="true"># 注册的时候，将原模型和BookAdmin耦合起来</span>admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>Book<span class="token punctuation">,</span>BookAdmin<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ModelAdmin-actions-selection-counter"><a href="#ModelAdmin-actions-selection-counter" class="headerlink" title="ModelAdmin.actions_selection_counter"></a>ModelAdmin.actions_selection_counter</h4><p>是否在actions下拉框右侧显示选中的对象的数量，默认为True，可改为False</p><p><img src="/2019/04/django-admin-hou-tai-guan-li/1555476176384.png" alt></p><h4 id="ModelAdmin-date-hierarchy"><a href="#ModelAdmin-date-hierarchy" class="headerlink" title="ModelAdmin.date_hierarchy"></a>ModelAdmin.date_hierarchy</h4><p>根据指定的日期相关的字段，为页面创建一个时间导航栏，可通过日期过滤对象</p><p><img src="/2019/04/django-admin-hou-tai-guan-li/1555476182947.png" alt></p><h4 id="ModelAdmin-exclude"><a href="#ModelAdmin-exclude" class="headerlink" title="ModelAdmin.exclude"></a>ModelAdmin.exclude</h4><p>不显示指定的某些字段</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#models.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token keyword">class</span> <span class="token class-name">Author</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>    title <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>    birth_date <span class="token operator">=</span> models<span class="token punctuation">.</span>DateField<span class="token punctuation">(</span>blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#admin.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token keyword">class</span> <span class="token class-name">AuthorAdmin</span><span class="token punctuation">(</span>admin<span class="token punctuation">.</span>ModelAdmin<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#注意了，值是个元组！一个元素的时候，最后的逗号不能省略</span>    fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'title'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#等同于  exclude = ('birth_date',)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ModelAdmin-fields"><a href="#ModelAdmin-fields" class="headerlink" title="ModelAdmin.fields"></a>ModelAdmin.fields</h4><p>顺序，显示指定的字段。与exclude相对 </p><p>小技巧，你可以通过组合元组的方式，让某些字段在同一行内显示，例如下面的做法“url”和“title”将在一行内，而“content”则在下一行</p><pre><code>class FlatPageAdmin(admin.ModelAdmin):    fields = ((&#39;url&#39;, &#39;title&#39;), &#39;content&#39;)</code></pre><h4 id="ModelAdmin-fieldsets"><a href="#ModelAdmin-fieldsets" class="headerlink" title="ModelAdmin.fieldsets"></a>ModelAdmin.fieldsets</h4><p>根据字段对页面进行分组显示或布局了。fieldsets是一个二元元组的列表。每个二元元组代表一个<code>&lt;fieldset&gt;</code>，是整个form的一部分</p><ul><li>classes一个包含额外的CSS类的元组<ul><li>collaspe 将fieldsets折叠起来</li><li>wide 让它具备更宽的水平空间</li></ul></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Book<span class="token comment" spellcheck="true"># 创建一个BookAdmin的子类</span><span class="token keyword">class</span> <span class="token class-name">BookAdmin</span><span class="token punctuation">(</span>admin<span class="token punctuation">.</span>ModelAdmin<span class="token punctuation">)</span><span class="token punctuation">:</span>    list_display <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token punctuation">)</span>    list_filter <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># date_hierarchy = 'pub_date'</span>    fieldsets <span class="token operator">=</span> <span class="token punctuation">(</span>        <span class="token punctuation">(</span><span class="token string">'文章内容'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'fields'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'author'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>         <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">'高级板块'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'fields'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'classes'</span><span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token string">'collapse'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 注册的时候，将原模型和BookAdmin耦合起来</span>admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>Book<span class="token punctuation">,</span>BookAdmin<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2019/04/django-admin-hou-tai-guan-li/1555422727436.png" alt></p><h4 id="ModelAdmin-list-filter"><a href="#ModelAdmin-list-filter" class="headerlink" title="ModelAdmin.list_filter"></a>ModelAdmin.list_filter</h4><p>设置list_filter属性后，可以激活修改列表页面的右侧边栏，用于对列表元素进行过滤</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 创建一个BookAdmin的子类</span><span class="token keyword">class</span> <span class="token class-name">BookAdmin</span><span class="token punctuation">(</span>admin<span class="token punctuation">.</span>ModelAdmin<span class="token punctuation">)</span><span class="token punctuation">:</span>    list_filter <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2019/04/django-admin-hou-tai-guan-li/1555476166582.png" alt></p><h4 id="ModelAdmin-search-fields"><a href="#ModelAdmin-search-fields" class="headerlink" title="ModelAdmin.search_fields"></a>ModelAdmin.search_fields</h4><p>设置这个属性，可以为admin的修改列表页面添加一个搜索框.</p><p>被搜索的字段可以是CharField或者TextField文本类型，也可以通过双下划线进行ForeignKey或者ManyToManyField的查询</p><p><img src="/2019/04/django-admin-hou-tai-guan-li/1555476159543.png" alt></p><pre><code>search_fields = [&#39;name&#39;]</code></pre><h4 id="ModelAdmin-filter-horizontal"><a href="#ModelAdmin-filter-horizontal" class="headerlink" title="ModelAdmin.filter_horizontal"></a>ModelAdmin.filter_horizontal</h4><p>水平扩展多对多字段。默认情况下，ManyTOManyField在admin的页面中会显示为一个select框。在需要选择大量对象时，这会有点困难。将ManyTOManyField添加到这个属性列表里后，页面就会对字段进行扩展，并提供过滤功能</p><pre class="line-numbers language-python"><code class="language-python">filter_horizontal <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'tags'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2019/04/django-admin-hou-tai-guan-li/1555476143787.png" alt></p><p>#### </p><p><strong>list_per_page</strong></p><p>每页展示多少数据</p><p><strong>autocomplete_fields =[‘字段’]</strong></p><p>自动补全。只能放外键</p><p><strong>radio_fields = {‘字段’,admin.VERTICAL}</strong></p><p>下拉框变Radio 水平排列</p><h3 id="list-display"><a href="#list-display" class="headerlink" title="#list_display"></a>#list_display</h3><p>指定显示在修改页面上的字段。这是一个很常用也是最重要的技巧</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">BookAdmin</span><span class="token punctuation">(</span>admin<span class="token punctuation">.</span>ModelAdmin<span class="token punctuation">)</span><span class="token punctuation">:</span>    list_display <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'author'</span><span class="token punctuation">,</span><span class="token string">'id'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2019/04/django-admin-hou-tai-guan-li/1555476134789.png" alt></p><p>如果你不设置这个属性，admin站点将只显示一列，内容是每个对象的<code>__str__()</code></p><p>在<code>list_display</code>中，你可以设置四种值</p><ul><li>模型的 <del>字段名</del></li><li>一个 <del>函数</del>，接受一个模型实例作为参数</li><li>一个表示ModelAdmin的某个属性的字符串</li><li>一个表示模型的某个属性的字符串</li></ul><blockquote><p>如何引用CSS样式</p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#Models.py</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token keyword">from</span> django<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>html <span class="token keyword">import</span> format_html<span class="token keyword">class</span> <span class="token class-name">Book</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>、    id <span class="token operator">=</span> models<span class="token punctuation">.</span>AutoField<span class="token punctuation">(</span>primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">255</span><span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    author <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">255</span><span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">showStr</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> format_html<span class="token punctuation">(</span><span class="token string">'&lt;span style="color:blue">Good&lt;/>'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#Admin.py</span><span class="token keyword">class</span> <span class="token class-name">BookAdmin</span><span class="token punctuation">(</span>admin<span class="token punctuation">.</span>ModelAdmin<span class="token punctuation">)</span><span class="token punctuation">:</span>    list_display <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'author'</span><span class="token punctuation">,</span><span class="token string">'id'</span><span class="token punctuation">,</span><span class="token string">'showStr'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2019/04/django-admin-hou-tai-guan-li/1555476122014.png" alt></p><blockquote><p>自定义表的名称</p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Book</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        verbose_name_plural<span class="token operator">=</span><span class="token string">'书籍'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django-数据库</title>
      <link href="/2019/04/django-shu-ju-ku.html"/>
      <url>/2019/04/django-shu-ju-ku.html</url>
      
        <content type="html"><![CDATA[<h2 id="数据库驱动"><a href="#数据库驱动" class="headerlink" title="数据库驱动"></a>数据库驱动</h2><p>常见MySQL驱动介绍：</p><ul><li>MySQL-python：也就是MySQLdb。是对C语言操作MySQL数据库的一个简单封装。遵循了Python DB API v2。但是只支持Python2，目前还不支持Python3</li><li>mysqlclient：是MySQL-python的另外一个分支。支持Python3并且修复了一些bug。</li><li>pymysql：纯Python实现的一个驱动。因为是纯Python编写的，因此执行效率不如MySQL-python。并且也因为是纯Python编写的，因此可以和Python代码无缝衔接。</li><li>MySQL Connector/Python：MySQL官方推出的使用纯Python连接MySQL的驱动。因为是纯Python开发的。效率不高。</li></ul><blockquote><p>安装数据库</p></blockquote><pre class="line-numbers language-python"><code class="language-python">pip install mysqlclient<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="配置数据库"><a href="#配置数据库" class="headerlink" title="#配置数据库"></a>#配置数据库</h3><p>settings.py</p><pre class="line-numbers language-python"><code class="language-python">DATABASES <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">#数据库引擎（splite3/mysql/oracle）</span>        <span class="token string">'ENGINE'</span><span class="token punctuation">:</span> <span class="token string">'django.db.backends.mysql'</span><span class="token punctuation">,</span>        <span class="token string">'NAME'</span><span class="token punctuation">:</span><span class="token string">'python_test'</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">#数据库用户名</span>        <span class="token string">'USER'</span><span class="token punctuation">:</span><span class="token string">'root'</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">#数据库密码</span>        <span class="token string">'PASSWORD'</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">#数据库主机地址</span>        <span class="token string">'HOST'</span><span class="token punctuation">:</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">#数据库端口号</span>        <span class="token string">'PORT'</span><span class="token punctuation">:</span><span class="token string">'3306'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="操作方式"><a href="#操作方式" class="headerlink" title="#操作方式"></a>#操作方式</h2><ul><li>原生SQL</li><li>ORM模型</li></ul><h2 id="ORM模型（Object-Relational-Mapping）"><a href="#ORM模型（Object-Relational-Mapping）" class="headerlink" title="ORM模型（Object Relational Mapping）"></a>ORM模型（Object Relational Mapping）</h2><p>Object Relational Mapping.对象关系映射</p><p>通过ORM我们可以通过类的方式去操作数据库，而不用原生的SQL语句。通过把表映射成类，把行当作实例，把字段当作属性。</p><p>ORM在执行对象操作的时候最终还是会把对应的操作转换为数据库原生语句。</p><p>在django中，如果一个模型没有定义主键，那么将会自动生成一个自动增长的int类型的主键，并且这个主键的名字就叫做id</p><p><img src="/2019/04/django-shu-ju-ku/1556435304602.jpg" alt></p><p>那…什么是模型呢(Model)。一个模型（model）就是一个单独的、确定的数据的信息源，包含了数据的字段和操作方法。通常，每个模型映射为一张数据库中的表。</p><p>模型的基本原则：</p><ul><li>每个模型在Django中的存在形式为一个Python类</li><li>每个模型都是django.db.models.Model的子类</li><li>模型的每个字段（属性）代表数据表的某一列</li></ul><blockquote><p>优点</p><ol><li>简单易用、直观、清晰</li><li>性能损耗小</li><li>设计灵活</li><li>移植性强</li></ol></blockquote><blockquote><p>步骤</p></blockquote><ol><li>配置数据库</li><li>app中在<code>models.py</code>定义好模型 继承<code>django.db.models</code></li><li>app在<code>settings.py</code>注册</li><li>生成迁移脚本文件<code>python manage.py makemigrations</code></li><li>映射到数据库中<code>python manage.py migrate</code></li></ol><ul><li><strong>基本操作</strong></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token comment" spellcheck="true"># Create your models here.</span><span class="token comment" spellcheck="true"># 如果将一个普通的类 编程一个可以映射到数据库中的ORM模型</span><span class="token comment" spellcheck="true"># 继承models.Model</span><span class="token keyword">class</span> <span class="token class-name">Book</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    1. id int 自动增    2. name varchar    3. author varchar    '''</span>    id <span class="token operator">=</span> models<span class="token punctuation">.</span>AutoField<span class="token punctuation">(</span>primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">255</span><span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    author <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">255</span><span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#&lt;Book:(name,author)></span>        <span class="token keyword">return</span> <span class="token string">"&lt;Book:({name},{author})>"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>name<span class="token operator">=</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span>author<span class="token operator">=</span>self<span class="token punctuation">.</span>author<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#添加数据</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 1. 使用ORM添加一条数据到数据库中</span>    book <span class="token operator">=</span> Book<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"三国演义"</span><span class="token punctuation">,</span>author<span class="token operator">=</span><span class="token string">"罗贯中"</span><span class="token punctuation">)</span>    book<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#save()方法</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"添加成功"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 2. 查询 根据主键(PK)</span>        book <span class="token operator">=</span> Book<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>pk<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span>book<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code> #根据其他条件查询    books = Book.objects.filter(name=&quot;三国演义&quot;)    books = Book.objects.filter(author=&quot;罗贯中&quot;).first()    print(books)    return HttpResponse(books)</code></pre><pre><code>#3. 删除数据    book = Book.objects.get(pk=1)    book.delete()    return HttpResponse(&quot;删除成功&quot;)</code></pre><pre><code>#4. 修改数据    book = Book.objects.get(pk=2)    book.name = &quot;未知&quot;    book.save()    return HttpResponse(&quot;Success&quot;)</code></pre><h3 id="常用字段"><a href="#常用字段" class="headerlink" title="常用字段"></a><strong>常用字段</strong></h3><table><thead><tr><th>说明</th><th>类型</th></tr></thead><tbody><tr><td>AutoField</td><td>一个自动增加的整数类型字段。Django会自动帮你添加字段：id = models.AutoField(primary_key=True)，这是一个自增字段，从1开始计数。如果你非要自己设置主键，那么请务必将字段设置为primary_key=True。Django在一个模型中只允许有一个自增字段，并且该字段必须为主键！</td></tr><tr><td>BigAutoField</td><td>(1.10新增)64位整数类型自增字段，数字范围更大，从1到9223372036854775807</td></tr><tr><td>BigIntegerField</td><td>64位整数字段（看清楚，非自增），类似IntegerField ，-9223372036854775808 到9223372036854775807。在Django的模板表单里体现为一个textinput标签。</td></tr><tr><td>BinaryField</td><td>二进制数据类型。</td></tr><tr><td><strong>BooleanField</strong></td><td>布尔值类型。默认值是None。在HTML表单中体现为CheckboxInput标签。如果要接收null值，请使用NullBooleanField。</td></tr><tr><td><strong>CharField</strong></td><td>字符串类型。必须接收一个max_length参数，表示字符串长度不能超过该值。默认的表单标签是input text。最常用的filed，没有之一！</td></tr><tr><td>DateField</td><td>日期类型。一个Python中的datetime.date的实例。</td></tr><tr><td><strong>DateTimeField</strong></td><td>日期时间类型。Python的datetime.datetime的实例。与DateField相比就是多了小时、分和秒的显示，其它功能、参数、用法、默认值等等都一样。</td></tr><tr><td>DecimalField</td><td>固定精度的十进制小数。相当于Python的Decimal实例，必须提供两个指定的参数！参数max_digits：最大的位数，必须大于或等于小数点位数 。decimal_places：小数点位数，精度。 当localize=False时，它在HTML表现为NumberInput标签，否则是text类型。例子：储存最大不超过999，带有2位小数位精度的数，定义如下：models.DecimalField(…, max_digits=5, decimal_places=2)。</td></tr><tr><td><strong>EmailField</strong></td><td>邮箱类型，默认max_length最大长度254位。使用这个字段的好处是，可以使用DJango内置的EmailValidator进行邮箱地址合法性验证。</td></tr><tr><td><strong>FileField</strong></td><td>class FileField(upload_to=None, max_length=100, **options)上传文件类型</td></tr><tr><td>FilePathField</td><td>文件路径类型，</td></tr><tr><td>FloatField</td><td>浮点数类型</td></tr><tr><td><strong>ImageField</strong></td><td>图像类型</td></tr><tr><td><strong>IntegerField</strong></td><td>整数类型，最常用的字段之一。取值范围-2147483648到2147483647。在HTML中表现为NumberInput标签</td></tr><tr><td><strong>GenericIPAddressField</strong></td><td>class GenericIPAddressField(protocol=’both’, unpack_ipv4=False, **options)[source],IPV4或者IPV6地址，字符串形式，例如192.0.2.30在HTML中表现为TextInput标签。参数protocol默认值为‘both’，可选‘IPv4’或者‘IPv6’，表示你的IP地址类型。</td></tr><tr><td>NullBooleanField</td><td>类似布尔字段，只不过额外允许NULL作为选项之一。</td></tr><tr><td><strong>TextField</strong></td><td>大量文本内容，在HTML中表现为Textarea标签，最常用的字段类型之一！如果你为它设置一个max_length参数，那么在前端页面中会受到输入字符数量限制，然而在模型和数据库层面却不受影响。只有CharField才能同时作用于两者。</td></tr><tr><td>TimeField</td><td>时间字段，Python中datetime.time的实例。接收同DateField一样的参数，只作用于小时、分和秒</td></tr><tr><td><strong>URLField</strong></td><td>一个用于保存URL地址的字符串类型，默认最大长度200。</td></tr><tr><td><strong>UUIDField</strong></td><td>用于保存通用唯一识别码（Universally Unique Identifier）的字段。使用Python的UUID类。在PostgreSQL数据库中保存为uuid类型，其它数据库中为char(32)。这个字段是自增主键的最佳替代品</td></tr></tbody></table><h3 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a><strong>常用参数</strong></h3><p><strong>null</strong></p><p>如果设置为True，Django将会在映射表的时候指定是否为空。默认是为False。在使用字符串相关的Field（CharField/TextField）的时候，官方推荐尽量不要使用这个参数，也就是保持默认值False。因为Django在处理字符串相关的Field的时候，即使这个Field的null=False，如果你没有给这个Field传递任何值，那么Django也会使用一个空的字符串””来作为默认值存储进去。因此如果再使用null=True，Django会产生两种空值的情形（NULL或者空字符串）。如果想要在表单验证的时候允许这个字符串为空，那么建议使用blank=True。如果你的Field是BooleanField，那么对应的可空的字段则为NullBooleanField</p><p><strong>blank</strong></p><p>标识这个字段在表单验证的时候是否可以为空。默认是False</p><p><strong>db_column</strong></p><p>这个字段在数据库中的名字。如果没有设置这个参数，那么将会使用模型中属性的名字</p><p><strong>default</strong></p><p>默认值。可以为一个值，或者是一个函数，但是不支持lambda表达式。并且不支持列表/字典/集合等可变的数据结构。</p><p><strong>priary_key</strong></p><p>是否为主键。默认是False</p><p><strong>unique</strong></p><p>在表中这个字段的值是否唯一。一般是设置手机号码/邮箱等</p><ul><li><h3 id="Meta配置"><a href="#Meta配置" class="headerlink" title="Meta配置"></a><strong>Meta配置</strong></h3></li></ul><p>类中定义类Meta。在这个类中添加一些类属性来控制模型的作用。比如我们想要在数据库映射的时候使用自己指定的表名，而不是使用模型的名称</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Book</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span>null<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    desc <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'description'</span><span class="token punctuation">,</span>db_column<span class="token operator">=</span><span class="token string">"description1"</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        db_table <span class="token operator">=</span> <span class="token string">'book_model'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>db_table</strong></p><p>这个模型映射到数据库中的表名。如果没有指定这个参数，那么在映射的时候将会使用模型名来作为默认的表名。</p><p><strong>ordering</strong></p><p>设置在提取数据的排序方式</p><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a><strong>应用</strong></h3><blockquote><p>上传文件</p></blockquote><blockquote><p>上传图片</p></blockquote><blockquote><p>UUID</p></blockquote><pre><code>import uuidfrom django.db import modelsclass MyModel(models.Model):    id = models.UUIDField(primary_key=True,default=uuid.uuid4, editable=False)</code></pre><blockquote><p>FilePathField </p></blockquote><p>它是用来保存文件路径信息的字段，在数据表内以字符串的形式存在，最大长度100</p><p><strong>参数</strong></p><ul><li>path 必须指定的参数。表示一个系统绝对路径。<ul><li>match 可选参数，一个正则表达式，用于过滤文件名。只匹配基本文件名，不匹配路径。</li><li>recursive 可选参数，只能是True或者False。默认为False。决定是否包含子目录，也就是是否递归的意思</li><li>allow_files 可选参数，只能是True或者False。默认为True。决定是否应该将文件名包括在内。它和allow_folders其中，必须有一个为True</li><li>allow_folders  可选参数，只能是True或者False。默认为False。决定是否应该将目录名包括在内</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模板</title>
      <link href="/2019/04/django-mo-ban.html"/>
      <url>/2019/04/django-mo-ban.html</url>
      
        <content type="html"><![CDATA[<h1 id="模板Template"><a href="#模板Template" class="headerlink" title="模板Template"></a>模板Template</h1><p><strong>怎样动态生成HTML？</strong></p><p>模板技术。模板包含所需HTML页面的静态部分，以及一些特殊的模版语法，用于将动态内容插入静态部分</p><p>视图函数可以直接返回文本，若是要浏览器渲染出漂亮的HTML页面，需要模板系统，知名有DTL和Jinja2.</p><p>DTL是Django Template Language三个单词的缩写，也就是Django自带的模板语言</p><blockquote><p>HTML 与 DTL文件的区别</p></blockquote><p>DTL模板是一种带有特殊语法的HTML文件。它可以被Django编译，可以传递参数，实现数据动态化。 在编译完成后，生成一个普通的HTML文件，然后发送客户端</p><h3 id="主要分类"><a href="#主要分类" class="headerlink" title="主要分类"></a>主要分类</h3><ul><li>变量</li><li>标签</li><li>过滤器</li></ul><h3 id="配置引擎"><a href="#配置引擎" class="headerlink" title="配置引擎"></a>配置引擎</h3><p>模板引擎通过settings中的TEMPLATES设置来配置。这是一个列表，与引擎一一对应，每个元素都是一个引擎配置字典。由startproject命令生成的settings.py会自定定义如下的值</p><p><strong>模板查找路径配置</strong></p><p>在项目的<code>settings.py</code>文件中。有一个<code>TEMPLATES</code>配置。它包含了模板引擎的配置，模板查找路径的配置，这个模板上下文配置等。</p><p><code>DIRS</code>这是一个空列表，存放所有的模板路径。使用<code>render_to_string render</code>渲染模板 会优先在这个列表路径查找</p><p><code>APP_DIRS</code>默认True。 会在<code>INSTALLED_APPS</code>安装的APP下的<code>templates</code>文件中查找模板</p><p>修改<code>&#39;DIRS&#39;:[os.path.join(BASE_DIR,&#39;templates&#39;).replace(&#39;\\&#39;,&#39;/&#39;)],</code>这样就可以在APP内创建templates文件夹内放置模板文件</p><p><strong>如果想要在APP下创建HTML文件</strong></p><p><code>settings.py</code>配置<code>TEMPLATES</code>的<code>&#39;APP_DIRS&#39;: True</code></p><p><code>INSTALLED_APPS</code>添加APP文件名</p><h3 id="渲染模板"><a href="#渲染模板" class="headerlink" title="渲染模板"></a>渲染模板</h3><p>两种方式</p><ul><li>reader_to_string</li></ul><p>找到模板，然后将模板编译后的渲染Python字符串格式。最后通过HttpResponse类包装成一个HttpResponse对象返回回去</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponse<span class="token keyword">from</span> django<span class="token punctuation">.</span>template<span class="token punctuation">.</span>loader <span class="token keyword">import</span> render_to_string<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    html <span class="token operator">=</span> render_to_string<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span>html<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>render</li></ul><p>直接将模板渲染成字符串和包装成HttpResponse对象</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponse<span class="token comment" spellcheck="true"># Create your views here.</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'index.html'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>模板中可以包含变量，在渲染模板的时候，可以传递变量对应的值进行替换。</p><p>变量在视图函数渲染，视图函数需要添加<code>context</code>字典</p><ul><li>在模板中使用变量， 需要将变量放到 大括号里 中</li><li>如果访问对象的属性，可以通过<code>对象.属性名</code>来进行访问</li><li>如果访问一个字典的key对应的value，通过<code>字典.key</code>的方式访问，不可以通过<code>[ ]</code>来访问</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    context <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    context<span class="token punctuation">[</span><span class="token string">'UserName'</span><span class="token punctuation">:</span><span class="token string">'Tashi'</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">"index.html"</span><span class="token punctuation">,</span> context<span class="token operator">=</span>context<span class="token punctuation">)</span><span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>UserName<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>字典查询，属性查询和列表索引查找都是通过圆点符号.来实现。</p><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><table><thead><tr><th>标签</th><th>说明</th></tr></thead><tbody><tr><td>autoescape</td><td>自动转义开关</td></tr><tr><td>block</td><td>块引用</td></tr><tr><td>comment</td><td>注释</td></tr><tr><td>csrf_token</td><td>CSRF令牌</td></tr><tr><td>cycle</td><td>循环对象的值</td></tr><tr><td>debug</td><td>调试模式</td></tr><tr><td>extends</td><td>继承模版</td></tr><tr><td>filter</td><td>过滤功能</td></tr><tr><td>firstof</td><td>输出第一个不为False的参数</td></tr><tr><td>for</td><td>循环对象</td></tr><tr><td>for … empty</td><td>带empty说明的循环</td></tr><tr><td>if</td><td>条件判断</td></tr><tr><td>ifequal</td><td>如果等于</td></tr><tr><td>ifnotequal</td><td>如果不等于</td></tr><tr><td>ifchanged</td><td>如果有变化，则..</td></tr><tr><td>include</td><td>导入子模版的内容</td></tr><tr><td>load</td><td>加载标签和过滤器</td></tr><tr><td>lorem</td><td>生成无用的废话</td></tr><tr><td>now</td><td>当前时间</td></tr><tr><td>regroup</td><td>根据对象重组集合</td></tr><tr><td>resetcycle</td><td>重置循环</td></tr><tr><td>spaceless</td><td>去除空白</td></tr><tr><td>templatetag</td><td>转义模版标签符号</td></tr><tr><td>url</td><td>获取url字符串</td></tr><tr><td>verbatim</td><td>禁用模版引擎</td></tr><tr><td>widthratio</td><td>宽度比例</td></tr><tr><td>with</td><td>上下文变量管理器</td></tr></tbody></table><h4 id="if标签-条件判断"><a href="#if标签-条件判断" class="headerlink" title="if标签-条件判断"></a>if标签-条件判断</h4><ul><li><code>if...elif...else...</code></li><li><code>if...in...</code></li><li><code>闭合标签 % endif %</code></li></ul><pre><code>from django.shortcuts import renderfrom django.http import HttpResponsefrom django.template.loader import render_to_stringdef index(request):    #context必须为字典形式    context = {        &quot;age&quot;:18    }    return render(request, &#39;index.html&#39;, context=context){% if age < 18 %}    <p>未成年</p>{% elif age == 18 %}    <p>满18</p>{% else %}    <p>成年人</p>{% endif %}</code></pre><pre><code>{% if XXX in XXX %}    &lt;P&gt;信息&lt;/P&gt;</code></pre><h4 id="for标签-循环"><a href="#for标签-循环" class="headerlink" title="for标签-循环"></a>for标签-循环</h4><p><code>for...in...</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#context必须为字典形式</span>    context <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"book"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'三国演义'</span><span class="token punctuation">,</span> <span class="token string">'水浒传'</span><span class="token punctuation">,</span> <span class="token string">'红楼梦'</span><span class="token punctuation">,</span> <span class="token string">'西游记'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'index.html'</span><span class="token punctuation">,</span> context<span class="token operator">=</span>context<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> book <span class="token operator">%</span><span class="token punctuation">}</span>   <span class="token punctuation">{</span><span class="token punctuation">{</span> i <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2019/04/django-mo-ban/1556097715612.png" alt></p><p><code>for...in...</code> 反转</p><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> book reversed <span class="token operator">%</span><span class="token punctuation">}</span>   <span class="token punctuation">{</span><span class="token punctuation">{</span> i <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2019/04/django-mo-ban/1556097747741.png" alt></p><p><code>遍历字典</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#context必须为字典形式</span>    context <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"Person"</span><span class="token punctuation">:</span><span class="token punctuation">{</span>            <span class="token string">"username"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'小红'</span><span class="token punctuation">,</span> <span class="token string">'小花'</span><span class="token punctuation">,</span> <span class="token string">'小明'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token string">"age"</span><span class="token punctuation">:</span><span class="token number">18</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'index.html'</span><span class="token punctuation">,</span> context<span class="token operator">=</span>context<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> Person<span class="token punctuation">.</span>items <span class="token operator">%</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span>p<span class="token operator">></span>Key<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> key<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span>p<span class="token operator">></span>Value<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> value <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token punctuation">{</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2019/04/django-mo-ban/1556097774161.png" alt></p><p><strong>在for循环中，DTL提供了一些变量提供使用</strong></p><ol><li><code>forloop.counter</code>当前循环的下标，以1起始</li><li><code>forloop.counter0</code>以0开始</li><li><code>forloop.revcunter</code>反向遍历</li><li><code>forloop.first</code>是否第一次遍历</li><li><code>forloop.last</code>是否最后一次遍历</li><li><code>forloop.parentloop</code>如果多个循环嵌套，那么这个属性代表是上一级的for循环</li></ol><p><code>for...in...empty</code></p><p>与for…in…不同的是，在遍历对象如果没有元素的情况下，会执行empty中的内容</p><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">for</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">in</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">%</span><span class="token punctuation">}</span><span class="token keyword">pass</span><span class="token punctuation">{</span><span class="token operator">%</span> empty <span class="token operator">%</span><span class="token punctuation">}</span><span class="token keyword">pass</span><span class="token punctuation">{</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="模板继承"><a href="#模板继承" class="headerlink" title="模板继承"></a>模板继承</h4><p><img src="/2019/04/django-mo-ban/1556435171295.jpg" alt></p><p>父模版的% block %标签中的内容总是被用作默认内容</p><p><img src="/2019/04/django-mo-ban/1556435191242.jpg" alt></p><h4 id="转义标签"><a href="#转义标签" class="headerlink" title="转义标签"></a>转义标签</h4><ul><li><code>&lt;</code>会转换为<code>&amp;lt;</code></li><li><code>&gt;</code>会转换为<code>&amp;gt;</code></li><li><code>&#39;</code>（单引号）转换为<code>&amp;#39;</code></li><li><code>&quot;</code>双引号)会转换为<code>&amp;quot;</code></li><li><code>&amp;</code>会转换为<code>&amp;amp;</code></li></ul><h4 id="with标签"><a href="#with标签" class="headerlink" title="with标签"></a>with标签</h4><pre><code>定义变量% with  zs=Age  %    &lt;h1&gt;{{ zs }}&lt;/h1&gt;% endwith %</code></pre><h4 id="URL标签"><a href="#URL标签" class="headerlink" title="URL标签"></a>URL标签</h4><p>urls.py</p><pre class="line-numbers language-python"><code class="language-python">urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">#首页</span>    path<span class="token punctuation">(</span><span class="token string">'book/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>book<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'book'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">'movie/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>movie<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'movie'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">'city/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>city<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'city'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>views.py</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#context必须为字典形式</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'index.html'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">book</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'读书页面'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">movie</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'电影页面'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">city</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'同城页面'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2019/04/django-mo-ban/1556097889267.gif" alt></p><p><strong>总结</strong></p><pre><code>1. &lt;a href=&quot;{% url 'url_name' %}&quot;&gt; &lt;/a&gt;2. &lt;a href=&quot;{% url 'url_name' 参数=值 %}&quot;&gt; &lt;/a&gt;3. &lt;a href=&quot;{% url 'url_name' %}?参数=值 参数=值&quot;&gt; &lt;/a&gt;</code></pre><pre><code>http://127.0.0.1:8000/book/info/1http://127.0.0.1:8000/login/?user=&quot;Tashi&quot;&amp;pwd=&quot;123456&quot;</code></pre><h4 id="autoescape自动转义标签"><a href="#autoescape自动转义标签" class="headerlink" title="autoescape自动转义标签"></a>autoescape自动转义标签</h4><h4 id="加载静态文件"><a href="#加载静态文件" class="headerlink" title="加载静态文件"></a>加载静态文件</h4><p>在一个网页当中不仅仅只有一个HTML骨架，还需要CSS样式文件，JS执行文件。因此DTL中加载静态文件是一个必须解决的问题，在DTL中使用<code>static</code>标签 加载静态文件。 要使用<code>static</code>标签。需要% load static %</p><ol><li><p>首先确保项目文件夹下settings.py中<code>django.contrib.staticfiles</code>添加到<code>settings.INSTALLED_APPS</code>当中</p></li><li><p>settings.py 中设置了<code>STATIC_URL</code></p></li><li><p><code>APP</code>下创建文件夹<code>static</code>.</p></li><li><p>加载标签<code>load static</code> <code>&lt;link rel=&quot;stylesheet&quot; href=&quot;static 文件路径 &quot;&gt;</code></p></li></ol><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="#过滤器"></a>#过滤器</h2><p><strong>为什么需要过滤器？</strong></p><p>因为在DTL中，不支持函数的调用形式</p><table><thead><tr><th>过滤器</th><th>说明</th></tr></thead><tbody><tr><td>add</td><td>加法</td></tr><tr><td>addslashes</td><td>添加斜杠</td></tr><tr><td>capfirst</td><td>首字母大写</td></tr><tr><td>center</td><td>文本居中</td></tr><tr><td>cut</td><td>切除字符</td></tr><tr><td>date</td><td>日期格式化</td></tr><tr><td>default</td><td>设置默认值</td></tr><tr><td>default_if_none</td><td>为None设置默认值</td></tr><tr><td>dictsort</td><td>字典排序</td></tr><tr><td>dictsortreversed</td><td>字典反向排序</td></tr><tr><td>divisibleby</td><td>整除判断</td></tr><tr><td>escape</td><td>转义</td></tr><tr><td>escapejs</td><td>转义js代码</td></tr><tr><td>filesizeformat</td><td>文件尺寸人性化显示</td></tr><tr><td>first</td><td>第一个元素</td></tr><tr><td>floatformat</td><td>浮点数格式化</td></tr><tr><td>force_escape</td><td>强制立刻转义</td></tr><tr><td>get_digit</td><td>获取数字</td></tr><tr><td>iriencode</td><td>转换IRI</td></tr><tr><td>join</td><td>字符列表链接</td></tr><tr><td>last</td><td>最后一个</td></tr><tr><td>length</td><td>长度</td></tr><tr><td>length_is</td><td>长度等于</td></tr><tr><td>linebreaks</td><td>行转换</td></tr><tr><td>linebreaksbr</td><td>行转换</td></tr><tr><td>linenumbers</td><td>行号</td></tr><tr><td>ljust</td><td>左对齐</td></tr><tr><td>lower</td><td>小写</td></tr><tr><td>make_list</td><td>分割成字符列表</td></tr><tr><td>phone2numeric</td><td>电话号码</td></tr><tr><td>pluralize</td><td>复数形式</td></tr><tr><td>pprint</td><td>调试</td></tr><tr><td>random</td><td>随机获取</td></tr><tr><td>rjust</td><td>右对齐</td></tr><tr><td>safe</td><td>安全确认</td></tr><tr><td>safeseq</td><td>列表安全确认</td></tr><tr><td>slice</td><td>切片</td></tr><tr><td>slugify</td><td>转换成ASCII</td></tr><tr><td>stringformat</td><td>字符串格式化</td></tr><tr><td>striptags</td><td>去除HTML中的标签</td></tr><tr><td>time</td><td>时间格式化</td></tr><tr><td>timesince</td><td>从何时开始</td></tr><tr><td>timeuntil</td><td>到何时多久</td></tr><tr><td>title</td><td>所有单词首字母大写</td></tr><tr><td>truncatechars</td><td>截断字符</td></tr><tr><td>truncatechars_html</td><td>截断字符</td></tr><tr><td>truncatewords</td><td>截断单词</td></tr><tr><td>truncatewords_html</td><td>截断单词</td></tr><tr><td>unordered_list</td><td>无序列表</td></tr><tr><td>upper</td><td>大写</td></tr><tr><td>urlencode</td><td>转义url</td></tr><tr><td>urlize</td><td>url转成可点击的链接</td></tr><tr><td>urlizetrunc</td><td>urlize的截断方式</td></tr><tr><td>wordcount</td><td>单词计数</td></tr><tr><td>wordwrap</td><td>单词包裹</td></tr><tr><td>yesno</td><td>将True，False和None，映射成字符串‘yes’，‘no’，‘maybe’</td></tr></tbody></table><ol><li><code>length</code> 返回值的长度</li><li><code>default</code> 为false或者空变量提供默认值</li><li><code>filesizeformat</code> 文件大小单位</li><li><code>add</code>  添加字符串|数值</li><li><code>cut</code> 移除字符串指定的字符</li><li><code>date</code> 时间</li><li><code>first</code>|<code>last</code> 返回元祖或列表的首元素或尾元素</li><li><code>join</code> 字符串的拼接</li><li><code>floatformat</code> 使用四舍五入的方式格式化一个浮点类型。若没有传递参数，只会保留一个小数</li><li><code>random</code>给被给的列表/字符串/元祖中随机选择一个值</li><li><code>slice</code> 类似Python中的切片</li><li><code>striptags</code> 删除所有html标签</li><li><code>truncatechars</code> 如果给定的字符串长度超过过滤器的长度就会切割，并且会以三个点来展示</li></ol><h4 id="自定义过滤器模板"><a href="#自定义过滤器模板" class="headerlink" title="自定义过滤器模板"></a>自定义过滤器模板</h4><p>在app中新建一个templatetags包 (名字固定，不能变，只能是这个）.不要忘记创建<strong>init</strong>.py文件以使得该目录可以作为Python的包.自定义标签的app必须在INSTALLED_APPS中注册</p><ol><li>新建templatetags包</li><li>在<code>templatetags</code>新建自定义python文件</li><li>定义过滤器</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> django <span class="token keyword">import</span> templateregister <span class="token operator">=</span> template<span class="token punctuation">.</span>Library<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#过滤器最多只能两个参数</span><span class="token comment" spellcheck="true"># 过滤器的第一个参数固定value</span><span class="token keyword">def</span> <span class="token function">myadd</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>word<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> value<span class="token operator">+</span>wordregister<span class="token punctuation">.</span>filter<span class="token punctuation">(</span><span class="token string">"great"</span><span class="token punctuation">,</span>myadd<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>把过滤器这个app添加到<code>settings.py</code>中</li><li>模板中使用<code>load</code>标签加载过滤器</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">{</span><span class="token operator">%</span> load  python文件名 <span class="token operator">%</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="6"><li>使用</li></ol><pre><code>&quot;000&quot;|great:&quot;23&quot;</code></pre><h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#如果文章超过100字 以。。。中止</span>article<span class="token punctuation">.</span>content<span class="token operator">|</span>truncatewords<span class="token punctuation">:</span><span class="token number">100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>truncateword和slice的区别</p><pre class="line-numbers language-python"><code class="language-python">content<span class="token operator">|</span>truncatewords<span class="token punctuation">:</span><span class="token string">"15"</span>表示显示变量content中前<span class="token number">15</span>个字符，适用于英文内容content<span class="token operator">|</span>slice<span class="token punctuation">:</span><span class="token string">"15"</span>表示显示变量content中的<span class="token number">15</span>个字符，使用于中文内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code># add&quot;Tashi&quot;|add:&quot;&lt;h1&gt;www.itaolaity.com&lt;/h1&gt;&quot; &gt;&gt;&gt; Tashi www.itaolaity.com5|add:6 &gt;&gt;&gt; 11#Cut &quot;My Name Is Luck!&quot;| cut:&quot;Name&quot;  &gt;&gt;&gt; My Is Luck!#length&quot;My Name Is Luck!&quot;| length &gt;&gt;&gt; 16#filesizeformat 1024 | filesizeformat 1048576 | filesizeformat 1099511627776 | filesizeformat &gt;&gt;&gt;1.0 KB 1.0 MB 1.0 TB#slice&#39;abcdefg&#39;|slice:&quot;1:4&quot; &gt;&gt;&gt; bcd#date&gt;&gt;&gt; Feb. 27, 2019, 5:22 p.m.date|date:&quot;Y-m-d  G:i:s&quot; &gt;&gt;&gt; 2019-02-27 17:21:31</code></pre><h4 id="关于过滤器的一些奇技淫巧"><a href="#关于过滤器的一些奇技淫巧" class="headerlink" title="关于过滤器的一些奇技淫巧"></a>关于过滤器的一些奇技淫巧</h4><p>Django在django.contrib.humanize中提供了一系列的模板过滤器，有助于为数据展示添加“人文关怀”。</p><p>需要把django.contrib.humanize添加到INSTALLED_APPS设置中来激活这些过滤器。然后在模板中使用&lt;% load humanize %&gt;标签，就可以使用下面的过滤器了。</p><p><strong>apnumber</strong></p><p>对于数字1~9，返回英文单词，否则返回数字本身。 </p><p><strong>intcomma</strong></p><p>将整数或浮点数（或两者的字符串表示形式）转换为每隔三位数字包含逗号的字符串。这在财务报表中很有用</p><p><img src="/2019/04/django-mo-ban/1556435071410.jpg" alt></p><p><strong>naturalday</strong></p><p>对于当天或者一天之内的日期，返回“today”,“tomorrow”或者“yesterday”的表示形式，视情况而定。否则，使用传进来的格式字符串进行日期格式化。</p><p><strong>naturaltime</strong></p><p>对于日期时间的值，返回一个字符串来表示多少秒、分钟或者小时之前。如果超过一天之前，则回退为使用timesince格式。如果是未来的日期时间，返回值会自动使用合适的文字表述。</p><pre><code>17 Feb 2007 16:30:00 会变成 now。17 Feb 2007 16:29:31 会变成 29 seconds ago。17 Feb 2007 16:29:00 会变成 a minute ago。17 Feb 2007 16:25:35 会变成 4 minutes ago。17 Feb 2007 15:30:29 会变成 59 minutes ago。17 Feb 2007 15:30:01 会变成 59 minutes ago。17 Feb 2007 15:30:00 会变成 an hour ago。17 Feb 2007 13:31:29 会变成 2 hours ago。16 Feb 2007 13:31:29 会变成 1 day, 2 hours ago。16 Feb 2007 13:30:01 会变成 1 day, 2 hours ago。16 Feb 2007 13:30:00 会变成 1 day, 3 hours ago。17 Feb 2007 16:30:30 会变成 30 seconds from now。17 Feb 2007 16:30:29 会变成 29 seconds from now。17 Feb 2007 16:31:00 会变成 a minute from now。17 Feb 2007 16:34:35 会变成 4 minutes from now。17 Feb 2007 17:30:29 会变成 an hour from now。17 Feb 2007 18:31:29 会变成 2 hours from now。18 Feb 2007 16:31:29 会变成 1 day from now。26 Feb 2007 18:31:29 会变成 1 week, 2 days from now。</code></pre><p><strong>ordinal</strong></p><p>将一个整数转化为它的序数词字符串</p><p><img src="/2019/04/django-mo-ban/1556435039765.jpg" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django-URL与视图</title>
      <link href="/2019/04/django-url-yu-shi-tu.html"/>
      <url>/2019/04/django-url-yu-shi-tu.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>安装Django</p></blockquote><pre class="line-numbers language-python"><code class="language-python">pip install django<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>#检查是否安装成功import djangodjango.get_version()</code></pre><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><ul><li><p>命令行</p><pre class="line-numbers language-python"><code class="language-python">django<span class="token operator">-</span>admin startproject 目录名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>Pycham</p><pre><code>File--&gt;New project--&gt;Django</code></pre></li></ul><h3 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h3><pre class="line-numbers language-python"><code class="language-python">python manage<span class="token punctuation">.</span>py runserver<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="局域网其他设备访问"><a href="#局域网其他设备访问" class="headerlink" title="局域网其他设备访问"></a>局域网其他设备访问</h3><pre class="line-numbers language-python"><code class="language-python">python manage<span class="token punctuation">.</span>py runserver <span class="token number">0.0</span><span class="token punctuation">.</span><span class="token number">0.0</span><span class="token punctuation">:</span><span class="token number">8080</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><ol><li><p><code>manage.py</code> 以后和项目交互基本上都是基于这个文件。在终端输入<code>python manage.py [子命令]</code></p></li><li><p><code>settings.py</code>本项目的设置项，项目配置放在这里</p></li><li><p><code>urls.py</code>配置URL路由的，</p></li><li><p><code>wsgi.py</code>项目于与WSGI协议兼容的WEB服务器入口，部署的时候需要用到</p></li></ol><blockquote><p>Project与App的关系</p></blockquote><p>app是django项目的组成部分。一个app代表项目中的一个模块。</p><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p>视图一般写在app的views.py中。这个对象存储了请求过来的所有信息，包括携带的参数以及一些头部信息</p><p>注意：</p><ol><li>视图函数第一个参数必须是<code>request</code>参数必不可少</li><li>返回值必须是<code>django.http.response.HttpResponseBase</code>的子类对象</li></ol><ul><li>创建视图</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 创建App</span>python manage<span class="token punctuation">.</span>py startapp book<span class="token comment" spellcheck="true"># 创建视图</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponse<span class="token keyword">def</span> <span class="token function">book</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"图书视图"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 添加url映射</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token keyword">from</span> book <span class="token keyword">import</span> viewsurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'admin/'</span><span class="token punctuation">,</span> admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">'book/'</span><span class="token punctuation">,</span>views<span class="token punctuation">.</span>book<span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><h3 id="URL添加参数"><a href="#URL添加参数" class="headerlink" title="URL添加参数"></a>URL添加参数</h3></blockquote><ol><li><p>采用URL使用变量的方式。在path的第一个参数中，使用&lt;参数名&gt;的方式传递参数，然后在视图函数中也要写一个参数， 视图函数中的参数必须和URL中的参数名称保持一致，不然就找不到这个参数。同时支持传递多个参数</p></li><li><p>采用查询字符串的方式。在URL中不需要单独的匹配字符串的部分。只需要在视图函数中使用request.GET.get(“参数名称”)的方式来获取。在访问的网站的时候前加上?+参数名称=值</p></li></ol><p><strong>方式1</strong></p><p>book/views.py</p><pre><code>from django.shortcuts import renderfrom django.http import HttpResponse# Create your views here.def index(request):    return HttpResponse(&quot;首页&quot;)def book(request):    return HttpResponse(&quot;The Book&quot;)def book_info(request, book_id, book_kind):    #从数据库中提取信息    text = &quot;获取ID为&lt;%s&gt;  图书种类是&lt;%s&gt;&quot;%(book_id, book_kind)    return HttpResponse(text)</code></pre><p>book/urls.py</p><pre><code>from django.contrib import adminfrom django.urls import pathfrom book import viewsurlpatterns = [    path(&#39;&#39;, views.index), #首页    path(&#39;admin/&#39;, admin.site.urls),    path(&#39;book/&#39;,views.book),    path(&#39;book/index/&lt;book_id&gt;/&lt;book_kind&gt;&#39;, views.book_info)]</code></pre><p><img src="/2019/04/django-url-yu-shi-tu/1555398353531.png" alt></p><p><strong>方式二</strong></p><pre><code>#views.pydef author_info(request):    author_name = request.GET.get(&#39;name&#39;)    text = &quot;作者姓名是 %s&quot;%author_name    return HttpResponse(text)#urls.pyurlpatterns = [    path(&#39;book/author/&#39;,views.author_info)]</code></pre><p><img src="/2019/04/django-url-yu-shi-tu/1555398395175.png" alt></p><blockquote><p>为什么需要URL命名</p></blockquote><p>因为URL是经常变化的。如果在代码中写死可能会经常修改代码。给URL起个名字，以后使用URL时候就使用它的名字进行反转就可以了。</p><pre><code>urlpatterns = [    path(&#39;index&#39;,views.index, name=&#39;index&#39;)]</code></pre><blockquote><p>App命名</p></blockquote><p>多个APP之间 可能产生同名的URL。为了避免变量应该命名 AppName.参数</p>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django-初识</title>
      <link href="/2019/04/django-chu-shi.html"/>
      <url>/2019/04/django-chu-shi.html</url>
      
        <content type="html"><![CDATA[<h1 id="初识Django"><a href="#初识Django" class="headerlink" title="初识Django"></a>初识Django</h1><p><strong>Django与MVC</strong></p><p>M：Model</p><p>V：View</p><p>C：Controller</p><p>分别代表模型、视图、控制器</p><p>Django是一个<code>MTV</code>的设计模式，MTV是Model、Template、View三个单词的简写</p><p>Views加载网页的数据，然后去Models查找数据，把数据加载Templates模板，之后网页呈现给我们</p><p><img src="/2019/04/django-chu-shi/1555397291202.png" alt></p><h3 id="URL的组成部分"><a href="#URL的组成部分" class="headerlink" title="URL的组成部分"></a>URL的组成部分</h3><pre><code>https://host:port/path/?query-string=xxx#anchor</code></pre><ul><li>协议</li><li>主机名|IP地址</li><li>端口</li><li>路径</li><li>查询字符串</li></ul><p><strong>注意</strong></p><p>URL中所有字符都是ASCII字符集</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-常用命令</title>
      <link href="/2019/04/linux-chang-yong-ming-ling.html"/>
      <url>/2019/04/linux-chang-yong-ming-ling.html</url>
      
        <content type="html"><![CDATA[<h3 id="阅览切换"><a href="#阅览切换" class="headerlink" title="阅览切换"></a>阅览切换</h3><table><thead><tr><th>键盘</th><th>用处</th></tr></thead><tbody><tr><td>空格键</td><td>向下翻一页</td></tr><tr><td>PaGe down</td><td>向下翻一页</td></tr><tr><td>PaGe up</td><td>向上翻一页</td></tr><tr><td>home</td><td>直接前往首页</td></tr><tr><td>end</td><td>直接前往尾页</td></tr><tr><td>/</td><td>从上至下搜索某个关键词</td></tr><tr><td>？</td><td>从下至上搜索某个关键词</td></tr><tr><td>n</td><td>定位到下一个搜索到的关键词</td></tr><tr><td>N</td><td>定位到上一个搜索到的关键词</td></tr><tr><td>q</td><td>退出</td></tr></tbody></table><h3 id="查看系统中的进程状态"><a href="#查看系统中的进程状态" class="headerlink" title="查看系统中的进程状态"></a>查看系统中的进程状态</h3><p><code>ps</code></p><ul><li>-a    显示所有进程（包括其他用户的进程）</li><li>-u    用户以及其他详细信息</li><li>-x    显示没有控制终端的进程</li></ul><h3 id="动态地监视进程活动与系统负载等信息"><a href="#动态地监视进程活动与系统负载等信息" class="headerlink" title="动态地监视进程活动与系统负载等信息"></a>动态地监视进程活动与系统负载等信息</h3><p><code>top</code></p><h3 id="查询某个指定服务进程的PID值"><a href="#查询某个指定服务进程的PID值" class="headerlink" title="查询某个指定服务进程的PID值"></a>查询某个指定服务进程的PID值</h3><p>每个进程的进程号码值（PID）是唯一的</p><ul><li><code>pidof  服务名称</code></li></ul><h3 id="关闭某个服务"><a href="#关闭某个服务" class="headerlink" title="关闭某个服务"></a>关闭某个服务</h3><ul><li><p><code>kill 服务名称|服务pid</code></p></li><li><p><code>killall</code> 终止某个指定名称的服务所对应的全部进程</p></li></ul><h3 id="工作目录"><a href="#工作目录" class="headerlink" title="工作目录"></a>工作目录</h3><ul><li>创建目录<code>mkdir</code></li><li>创建文件<code>touch</code></li><li>复制文件<code>cp [选项] 源文件 目标文件</code></li><li>文件重命名<code>mv [选项] 源文件 [目标路径|目标文件名]</code></li><li>文件|目录删除<code>rm [选项] 文件</code></li><li>前进目录 <code>cd</code></li><li>后退目录<code>cd ..</code></li><li>显示文件的详细信息<code>ls</code></li><li>文本文件查看<code>cat</code></li></ul><h3 id="文件压缩-与解压"><a href="#文件压缩-与解压" class="headerlink" title="文件压缩|与解压"></a>文件压缩|与解压</h3><ul><li><p>对文件进行打包压缩或解压<code>tar [选项] [文件]</code></p><ul><li>-c    创建压缩文件</li><li>-x    解开压缩文件</li><li>-t    查看压缩包内有哪些文件</li><li>-z    用Gzip压缩或解压</li><li>-j    用bzip2压缩或解压</li><li>-v    显示压缩或解压的过程</li><li>-f    目标文件名</li><li>-p    保留原始的权限与属性</li><li>-P    使用绝对路径来压缩</li><li>-C    指定解压到的目录</li></ul></li><li><p>对文件进行打包压缩或解压<code>gzip [选项] 文件或目录</code><br>如果没有参数的时候，执行压缩操作，产生.gz的压缩文件，并删除源文件</p><ul><li>d 解压缩文件</li><li>r 递归的压缩目录中的所有文件</li><li>v 显示文件的压缩比例</li></ul></li></ul><pre><code>#打包Demo目录里的所有文件cd Demotar -cvf log.tar *#把指定的文件进行打包压缩tar -czvf etc.tar.gz /etc#解压 讲etc.tar.gz所有文件解压到Demo目录里tar -zxvf etc.tar.gz -C Demo</code></pre><h3 id="Linux下安装配置"><a href="#Linux下安装配置" class="headerlink" title="Linux下安装配置"></a>Linux下安装配置</h3><ul><li>安装mysql<pre><code>sudo apt-get install mysql-server mysql-client</code></pre></li><li><p>安装pip </p><pre><code>sudo apt-get install </code></pre></li><li><p>配置环境变量</p></li></ul><pre><code>vi /etc/profile #进入配置文件export PATH=/opt/ActivePython-2.7/bin:$PATH #在最下面输入Path</code></pre><h3 id="Linux安装Python3"><a href="#Linux安装Python3" class="headerlink" title="Linux安装Python3"></a>Linux安装Python3</h3><p>默认安装了Python2</p><pre><code>rpm -qa|grep python|xargs rpm -ev --allmatches --nodeps ##强制删除已安装程序及其关联 whereis python |xargs rm -frv ##删除所有残余文件 ##xargs，允许你对输出执行其他某些命令 whereis python ##验证删除，返回无结果</code></pre><p><strong>下载Python3</strong></p><p><code>https://www.python.org/downloads/</code></p><p><strong>解压与编译</strong></p><pre><code>tar -zxvf Python-3.6.1.tgz./configure --prefix=/usr/local/python3makemake install</code></pre><p><strong>建立软链</strong></p><p><code>ln -s /usr/local/python3/bin/python3 /usr/bin/python3</code></p><p><strong>加入Path</strong></p><pre><code># vim ~/.bash_profile# .bash_profile# Get the aliases and functionsif [ -f ~/.bashrc ]; then. ~/.bashrcfi# User specific environment and startup programsPATH=$PATH:$HOME/bin:/usr/local/python3/binexport PATH</code></pre><p>使更改修改</p><pre><code>source ~/.bash_profile</code></pre><p><strong>安装pip3</strong></p><p>CenterOS</p><pre><code>yum install opensslyum install openssl-develyum install libffi-devel -y</code></pre><pre><code>wget --no-check-certificate  https://pypi.python.org/packages/source/s/setuptools/setuptools-19.6.tar.gz#md5=c607dd118eae682c44ed146367a17e26tar -zxvf setuptools-19.6.tar.gzcd setuptools-19.6python3 setup.py buildpython3 setup.py install</code></pre><pre><code>wget --no-check-certificate  https://pypi.python.org/packages/source/p/pip/pip-8.0.2.tar.gz#md5=3a73c4188f8dbad6a1e6f6d44d117eebtar -zxvf pip-8.0.2.tar.gzcd pip-8.0.2python3 setup.py buildpython3 setup.py install</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AOS库的使用</title>
      <link href="/2019/03/aosku.html"/>
      <url>/2019/03/aosku.html</url>
      
        <content type="html"><![CDATA[<h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><pre><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;dist/aos.css&quot; /&gt;&lt;script src=&quot;js/jquery.min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;dist/aos.js&quot;&gt;&lt;/script&gt;</code></pre><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><pre><code>&lt;div aos=&quot;animation_name&quot;&gt;</code></pre><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><ul><li>aos-offset    是立刻触发动画还是在指定时间之后触发动画    200    120</li><li>aos-duration    动画持续时间    600    400</li><li>aos-easing    动画的easing动画效果    ease-in-sine    ease</li><li>aos-delay    动画的延迟时间    300    0</li><li>aos-anchor    锚元素。使用它的偏移来取代实际元素的偏移来触发动画    #selector    null</li><li>aos-anchor-placement    锚位置，触发动画时元素位于屏幕的位置    top-center    top-bottom</li><li>aos-once    动画是否只会触发一次，或者每次上下滚动都会触发    true    false</li></ul><h2 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h2><pre><code>AOS.init({  offset: 200,  duration: 600,  easing: &#39;ease-in-sine&#39;,  delay: 100,});</code></pre><p><strong>禁用AOS</strong></p><pre><code># 在小屏幕设备中禁用AOSAOS.init({  disable: &#39;mobile&#39; # mobile、phone或tablet});</code></pre><p><strong>动画</strong>- </p><p>淡入淡出动画：</p><ul><li>fade-up</li><li>fade-down</li><li>fade- -left</li><li>fade-right</li><li>fade-up-right</li><li>fade-up-left</li><li>fade-down-right</li><li>fade-down-left</li></ul><p>翻转动画：</p><ul><li>flip-up</li><li>flip-down</li><li>flip-left</li><li>flip-right</li></ul><p>滑动动画：</p><ul><li>slide-up</li><li>slide-do- wn</li><li>slide-left</li><li>slide-right</li></ul><p>缩放动画：</p><ul><li>zoom-in</li><li>zoom-in-up</li><li>zoom-in-down</li><li>zoom-in-left</li><li>zoom-in-right</li><li>zoom-out</li><li>zoom-out-up</li><li>zoom-out-down</li><li>zoom-out-left</li><li>zoom-out-right</li></ul><p>锚位置</p><ul><li>top-bottom</li><li>top-center</li><li>top-top</li><li>center-bottom</li><li>center-center</li><li>center-top</li><li>bottom-bottom</li><li>bottom-center</li><li>bottom-top</li></ul><p>easing动画</p><p>你可以使用以下的一些easing动画效果：</p><ul><li>linear</li><li>ease</li><li>ease-in</li><li>ease-out</li><li>ease-in-out</li><li>ease-in-back</li><li>ease-out-back</li><li>ease-in-out-back</li><li>ease-in-sine</li><li>ease-out-sine</li><li>ease-in-out-sine</li><li>ease-in-quad</li><li>ease-out-quad</li><li>ease-in-out-quad</li><li>ease-in-cubic</li><li>ease-out-cubic</li><li>ease-in-out-cubic</li><li>ease-in-quart</li><li>ease-out-quart</li><li>ease-in-out-quart</li></ul><p><a href="http://demo.lanrenzhijia.com/demo/41/4139/demo/" target="_blank" rel="noopener">Demo</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> CSS3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pygal数据可视化</title>
      <link href="/2018/12/pygal.html"/>
      <url>/2018/12/pygal.html</url>
      
        <content type="html"><![CDATA[<h1 id="Pygal"><a href="#Pygal" class="headerlink" title="Pygal"></a>Pygal</h1><h3 id="折线图"><a href="#折线图" class="headerlink" title="折线图"></a>折线图</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pygalradar_chart <span class="token operator">=</span> pygal<span class="token punctuation">.</span>XY<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#设置散点图</span>radar_chart<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">'Tashi'</span> <span class="token comment" spellcheck="true">#设置图标标题</span><span class="token triple-quoted-string string">"""参数1    - 添加的种类参数2    - 坐标(x,y)用列表包起来"""</span>radar_chart<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1.08</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1.3</span><span class="token punctuation">,</span> <span class="token number">1.1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3.23</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2.43</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>radar_chart<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token number">21</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>radar_chart<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token number">05</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token number">01</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token number">02</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1.5</span><span class="token punctuation">,</span> <span class="token number">1.7</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1.52</span><span class="token punctuation">,</span> <span class="token number">1.6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1.8</span><span class="token punctuation">,</span> <span class="token number">1.63</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1.5</span><span class="token punctuation">,</span> <span class="token number">1.82</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1.7</span><span class="token punctuation">,</span> <span class="token number">1.23</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2.1</span><span class="token punctuation">,</span> <span class="token number">2.23</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2.3</span><span class="token punctuation">,</span> <span class="token number">1.98</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>radar_chart<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token number">05</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token number">01</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token number">02</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1.5</span><span class="token punctuation">,</span> <span class="token number">1.7</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1.52</span><span class="token punctuation">,</span> <span class="token number">1.6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1.8</span><span class="token punctuation">,</span> <span class="token number">1.63</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1.5</span><span class="token punctuation">,</span> <span class="token number">1.82</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1.7</span><span class="token punctuation">,</span> <span class="token number">1.23</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2.1</span><span class="token punctuation">,</span> <span class="token number">2.23</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2.3</span><span class="token punctuation">,</span> <span class="token number">1.98</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#保存</span>radar_chart<span class="token punctuation">.</span>render_to_file<span class="token punctuation">(</span><span class="token string">'die_visual.svg'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2018/12/Pygal/4.png" alt></p><ul><li>pygal.XY(stroke=False)即可设置散点图，图线不连</li></ul><h3 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pygalradar_chart <span class="token operator">=</span> pygal<span class="token punctuation">.</span>XY<span class="token punctuation">(</span>stroke<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#设置散点图</span>radar_chart<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">'Tashi'</span> <span class="token comment" spellcheck="true">#设置图标标题</span><span class="token triple-quoted-string string">"""参数1    - 添加的种类参数2    - 坐标(x,y)用列表包起来"""</span>radar_chart<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1.08</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1.3</span><span class="token punctuation">,</span> <span class="token number">1.1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3.23</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2.43</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>radar_chart<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token number">21</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>radar_chart<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token number">05</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token number">01</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token number">02</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1.5</span><span class="token punctuation">,</span> <span class="token number">1.7</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1.52</span><span class="token punctuation">,</span> <span class="token number">1.6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1.8</span><span class="token punctuation">,</span> <span class="token number">1.63</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1.5</span><span class="token punctuation">,</span> <span class="token number">1.82</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1.7</span><span class="token punctuation">,</span> <span class="token number">1.23</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2.1</span><span class="token punctuation">,</span> <span class="token number">2.23</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2.3</span><span class="token punctuation">,</span> <span class="token number">1.98</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>radar_chart<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token number">05</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token number">01</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token number">02</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1.5</span><span class="token punctuation">,</span> <span class="token number">1.7</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1.52</span><span class="token punctuation">,</span> <span class="token number">1.6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1.8</span><span class="token punctuation">,</span> <span class="token number">1.63</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1.5</span><span class="token punctuation">,</span> <span class="token number">1.82</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1.7</span><span class="token punctuation">,</span> <span class="token number">1.23</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2.1</span><span class="token punctuation">,</span> <span class="token number">2.23</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2.3</span><span class="token punctuation">,</span> <span class="token number">1.98</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#保存</span>radar_chart<span class="token punctuation">.</span>render_to_file<span class="token punctuation">(</span><span class="token string">'die_visual.svg'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2018/12/Pygal/1.png" alt></p><h3 id="条形图"><a href="#条形图" class="headerlink" title="条形图"></a>条形图</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pygal<span class="token comment" spellcheck="true"># 条形图</span>hist <span class="token operator">=</span> pygal<span class="token punctuation">.</span>Bar<span class="token punctuation">(</span><span class="token punctuation">)</span>hist<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">'Tashi'</span> <span class="token comment" spellcheck="true">#设置标题</span>hist<span class="token punctuation">.</span>x_labels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#X坐标</span>hist<span class="token punctuation">.</span>y_labels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#Y坐标</span>hist<span class="token punctuation">.</span>x_title <span class="token operator">=</span> <span class="token string">'Result'</span> <span class="token comment" spellcheck="true">#X描述</span>hist<span class="token punctuation">.</span>y_title <span class="token operator">=</span> <span class="token string">'Frequency of Result'</span> <span class="token comment" spellcheck="true">#Y描述</span><span class="token comment" spellcheck="true"># 设置数据</span>data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">158</span><span class="token punctuation">,</span> <span class="token number">163</span><span class="token punctuation">,</span> <span class="token number">147</span><span class="token punctuation">,</span> <span class="token number">189</span><span class="token punctuation">,</span> <span class="token number">179</span><span class="token punctuation">,</span> <span class="token number">164</span><span class="token punctuation">]</span>hist<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">'D6'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#添加</span><span class="token comment" spellcheck="true">#保存数据</span>hist<span class="token punctuation">.</span>render_to_file<span class="token punctuation">(</span><span class="token string">'bar_chart.svg'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2018/12/Pygal/2.png" alt></p><h3 id="雷达图"><a href="#雷达图" class="headerlink" title="雷达图"></a>雷达图</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pygalhist <span class="token operator">=</span> pygal<span class="token punctuation">.</span>Radar<span class="token punctuation">(</span><span class="token punctuation">)</span>hist<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">'Tashi'</span> <span class="token comment" spellcheck="true">#设置标题</span><span class="token comment" spellcheck="true">#设置X,Y阈值</span>hist<span class="token punctuation">.</span>x_labels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'威力'</span><span class="token punctuation">,</span><span class="token string">'灵敏度'</span><span class="token punctuation">,</span><span class="token string">'子弹书'</span><span class="token punctuation">,</span><span class="token string">'敏捷'</span><span class="token punctuation">,</span><span class="token string">'咕噜'</span><span class="token punctuation">]</span>hist<span class="token punctuation">.</span>y_labels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#X、Y描述</span>hist<span class="token punctuation">.</span>x_title <span class="token operator">=</span> <span class="token string">'X描述'</span>hist<span class="token punctuation">.</span>y_title <span class="token operator">=</span> <span class="token string">'Y描述'</span><span class="token comment" spellcheck="true">#添加数据</span>hist<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">'啊哈'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span>hist<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">'咕噜'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span>hist<span class="token punctuation">.</span>render_to_file<span class="token punctuation">(</span><span class="token string">'bar_chart.svg'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2018/12/Pygal/3.png" alt></p><h3 id="阅览"><a href="#阅览" class="headerlink" title="阅览"></a>阅览</h3><ul><li><p>render_to_file() 保存SVG文件</p></li><li><p>render_in_browser() 浏览器在线阅览</p></li></ul><h3 id="声明对象"><a href="#声明对象" class="headerlink" title="声明对象"></a>声明对象</h3><ul><li>hist = pygal.Bar(style=**,x_label_rotation=角度，show_legend=False/True)<ul><li>style为样式</li><li>x_label_rotation旋转角度（顺时针旋转）<ul><li>显示的是X描述的旋转角度</li></ul></li><li>show_legend是否显示图例</li></ul></li></ul><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ul><li><p>title_font_size=66 设置标题字体大小</p></li><li><p>label_font_size=14 副标题字体大小</p></li><li><p>major_label_font_size=18 主标签字体大小</p></li><li><p>show_y_guides=False 是否展示图标中水平线</p></li><li><p>width=1000  自定义图表宽度</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据可视化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XPath</title>
      <link href="/2018/11/python-xpath.html"/>
      <url>/2018/11/python-xpath.html</url>
      
        <content type="html"><![CDATA[<h1 id="Xpath-XML-Path-Language"><a href="#Xpath-XML-Path-Language" class="headerlink" title="Xpath  XML Path Language"></a>Xpath  XML Path Language</h1><blockquote><p>XPath常用规则</p></blockquote><pre><code>nodename          选取此节点的所有子节点/                 从当前节点选取直接子节点//                从当前节点选取子孙节点.                 选取当前节点..                选取当前节点的父节点@                 选取属性</code></pre><h2 id="所有节点"><a href="#所有节点" class="headerlink" title="所有节点"></a>所有节点</h2><p><strong>注意</strong></p><ul><li>星号 表示所有节点</li><li>返回形式是一个列表，每个元素是Element类型 后面跟了节点的名称</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etreehtml <span class="token operator">=</span> etree<span class="token punctuation">.</span>parse<span class="token punctuation">(</span><span class="token string">'Test.html'</span><span class="token punctuation">,</span> etree<span class="token punctuation">.</span>HTMLParser<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>result <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 返回</span><span class="token operator">&lt;</span>Element html at <span class="token number">0x27b2927eac8</span><span class="token operator">></span><span class="token operator">&lt;</span>Element head at <span class="token number">0x27b2927eb48</span><span class="token operator">></span><span class="token operator">&lt;</span>Element title at <span class="token number">0x27b292a3cc8</span><span class="token operator">></span><span class="token operator">&lt;</span>Element body at <span class="token number">0x27b292a3d08</span><span class="token operator">></span><span class="token operator">&lt;</span>Element box at <span class="token number">0x27b292a3d48</span><span class="token operator">></span><span class="token operator">&lt;</span>Element ul at <span class="token number">0x27b292a3d88</span><span class="token operator">></span><span class="token operator">&lt;</span>Element li at <span class="token number">0x27b292a3dc8</span><span class="token operator">></span><span class="token operator">&lt;</span>Element a at <span class="token number">0x27b292a3e08</span><span class="token operator">></span><span class="token operator">&lt;</span>Element li at <span class="token number">0x27b292a3e48</span><span class="token operator">></span><span class="token operator">&lt;</span>Element li at <span class="token number">0x27b292a3e88</span><span class="token operator">></span><span class="token operator">&lt;</span>Element li at <span class="token number">0x27b292a3ec8</span><span class="token operator">></span><span class="token operator">&lt;</span>Element li at <span class="token number">0x27b292a3f08</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etreehtml <span class="token operator">=</span> etree<span class="token punctuation">.</span>parse<span class="token punctuation">(</span><span class="token string">'Test.html'</span><span class="token punctuation">,</span> etree<span class="token punctuation">.</span>HTMLParser<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>result <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//li'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 会返回所有的li节点</span><span class="token operator">&lt;</span>Element li at <span class="token number">0x2146ff0cf08</span><span class="token operator">></span><span class="token operator">&lt;</span>Element li at <span class="token number">0x2146ff3e0c8</span><span class="token operator">></span><span class="token operator">&lt;</span>Element li at <span class="token number">0x2146ff3e108</span><span class="token operator">></span><span class="token operator">&lt;</span>Element li at <span class="token number">0x2146ff3e148</span><span class="token operator">></span><span class="token operator">&lt;</span>Element li at <span class="token number">0x2146ff3e188</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="子节点"><a href="#子节点" class="headerlink" title="子节点"></a>子节点</h2><p><strong>注意</strong><br>/ 或 // 可以查找子节点或子孙节点</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>You can see me<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Tashi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 获取ul节点下的li节点</span>result <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//ul/li'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="父节点"><a href="#父节点" class="headerlink" title="父节点"></a>父节点</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>You can see me<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Tashi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">result <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//a[@href="#"]/../@class'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 选中href=# 的a节点， 然后获取父节点 再获取其class的属性</span><span class="token operator">></span> You can see me<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">result <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//a[@href="#"]/parent::*/@class'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> You can see me<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="属性匹配"><a href="#属性匹配" class="headerlink" title="属性匹配"></a>属性匹配</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">result <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//li[@class="item-3"]'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="文本获取"><a href="#文本获取" class="headerlink" title="文本获取"></a>文本获取</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">result <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//li[@class="item-3"]/text()'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Beautiful库</title>
      <link href="/2018/11/python-beautifulsoup.html"/>
      <url>/2018/11/python-beautifulsoup.html</url>
      
        <content type="html"><![CDATA[<h1 id="BeautifulSoup"><a href="#BeautifulSoup" class="headerlink" title="BeautifulSoup"></a>BeautifulSoup</h1><p>“BeautifulSoup是一个可以从HTML或XML文件中提取数据的Python库，它能够通过你喜欢的转换器实现惯用的文档导航，查找，修改文档的方式”</p><blockquote><p>安装</p></blockquote><p><code>pip install beautifulsoup4</code></p><h2 id="节点选择器"><a href="#节点选择器" class="headerlink" title="节点选择器"></a>节点选择器</h2><p><strong>选取属性</strong></p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box-ul<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span>  BeautifulSoup<span class="token comment" spellcheck="true"># 将HTML作为第一个参数传给BoeautifulSoup对象，第二个参数为解析器的类型</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>ul<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#则会返回ul下的内容</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>head<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>提取信息</strong></p><p>获取标签名称 <code>name</code></p><pre class="line-numbers language-python"><code class="language-python">soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>li<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#则会返回ul下的内容</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>li<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> li<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取属性 <code>attrs</code></p><pre class="line-numbers language-python"><code class="language-python">soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>div<span class="token punctuation">.</span>attrs<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># {'class': ['box']}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>获取内容   <code>text</code></p><pre class="line-numbers language-python"><code class="language-python">soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>ul<span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#ul 下的文字</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>子节点和子孙节点</strong></p><p>子节点 contents/children</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>BOOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>P</span><span class="token punctuation">></span></span>这是一段文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>P</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>百度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>标记<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>div<span class="token punctuation">.</span>contents<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取div下的子节点</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>center<span class="token operator">></span><span class="token operator">&lt;</span>h1<span class="token operator">></span>BOOT<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>center<span class="token operator">></span><span class="token punctuation">,</span> <span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>P<span class="token operator">></span>这是一段文字<span class="token operator">&lt;</span><span class="token operator">/</span>P<span class="token operator">></span><span class="token punctuation">,</span> <span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"#"</span><span class="token operator">></span>百度<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token punctuation">,</span> <span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>span<span class="token operator">></span>标记<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token punctuation">,</span> <span class="token string">'\n'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>div<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>子孙节点 descendants</p><pre class="line-numbers language-python"><code class="language-python">soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>div<span class="token punctuation">.</span>descendants<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>父节点和祖先节点</strong></p><ul><li><p>父节点parent</p></li><li><p>父节点parents</p></li></ul><p><strong>兄弟节点</strong></p><ul><li><p>next_sibling # 下一个兄弟节点</p></li><li><p>next_siblings # 所有后面的兄弟节点</p></li><li><p>previous_sibling  # 上一个兄弟节点</p></li><li><p>previous_siblings</p></li></ul><h2 id="方法选择器"><a href="#方法选择器" class="headerlink" title="方法选择器"></a>方法选择器</h2><ul><li><strong>find_all()</strong><ul><li>返回一个list 数组类型</li></ul></li></ul><p>name根据节点名</p><pre class="line-numbers language-python"><code class="language-python">soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"ul"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 根据节点名查找</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>attrs根据属性来查询</p><pre class="line-numbers language-python"><code class="language-python">soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'class'</span><span class="token punctuation">:</span><span class="token string">'box'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>text匹配节点的文本</p><pre class="line-numbers language-python"><code class="language-python">soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>text<span class="token operator">=</span>re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">'like'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p><strong>find()</strong> 返回单个元素</p></li><li><p><strong>find_parents()</strong></p></li><li><p><strong>find_parent()</strong></p></li><li><p><strong>find_next_siblings()</strong></p></li><li><strong>find_next_siling()</strong></li></ul><h2 id="CSS-选择器"><a href="#CSS-选择器" class="headerlink" title="CSS 选择器"></a>CSS 选择器</h2><p><strong>select()</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">,</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 返回ul节点下的li</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>获取属性</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">for</span> ul <span class="token keyword">in</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>ul<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>ul<span class="token punctuation">.</span>attrs<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>获取文本 get_text()</p><pre class="line-numbers language-python"><code class="language-python">em <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>em<span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyQuery库</title>
      <link href="/2018/10/python-pyquery.html"/>
      <url>/2018/10/python-pyquery.html</url>
      
        <content type="html"><![CDATA[<p>#PyQuery</p><p>强大又灵活的网页解析库</p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><h3 id="字符串初始化"><a href="#字符串初始化" class="headerlink" title="字符串初始化"></a>字符串初始化</h3><pre class="line-numbers language-python"><code class="language-python">html <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;div class="box">&lt;ul>&lt;li>1&lt;/li>&lt;li>2&lt;/li>&lt;li>3&lt;/li>&lt;li>4&lt;/li>&lt;/ul>&lt;/div>&lt;div class="container">&lt;p>这是一段文字&lt;/p>&lt;span>很酷！&lt;/span>&lt;/div>"""</span><span class="token keyword">from</span> pyquery <span class="token keyword">import</span> PyQuery <span class="token keyword">as</span> pqdoc <span class="token operator">=</span> pq<span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>doc<span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#打印所有的li标签</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注释</strong></p><p>首先引入PyQuery对象 取名pq。将HTML字符串当作参数传递给PyQuery类，就完成了初始化</p><h3 id="URL初始化"><a href="#URL初始化" class="headerlink" title="URL初始化"></a>URL初始化</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pyquery <span class="token keyword">import</span> PyQuery <span class="token keyword">as</span> pqdoc <span class="token operator">=</span> pq<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">"http://www.itaolaity.com"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>doc<span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token operator">&lt;</span>title<span class="token operator">></span>Tashi<span class="token operator">-</span>丛林深处有书和黄金屋<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件初始化"><a href="#文件初始化" class="headerlink" title="文件初始化"></a>文件初始化</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pyquery <span class="token keyword">import</span> PyQuery <span class="token keyword">as</span> pqdoc <span class="token operator">=</span> pq<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'Demo.html'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>doc<span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h2><p><strong>基本用法</strong></p><pre class="line-numbers language-python"><code class="language-python">html <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;div class="box">    &lt;ul>        &lt;li>1&lt;/li>        &lt;li>2&lt;/li>        &lt;li>3&lt;/li>        &lt;li>4&lt;/li>    &lt;/ul>&lt;/div>&lt;div class="container">&lt;p>这是一段文字&lt;/p>&lt;span>很酷！&lt;/span>&lt;/div>"""</span><span class="token keyword">from</span> pyquery <span class="token keyword">import</span> PyQuery <span class="token keyword">as</span> pqdoc <span class="token operator">=</span> pq<span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>doc<span class="token punctuation">(</span><span class="token string">".box li"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 选取CLSS为box的节点 然后再选取内部的li节点</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查找结点"><a href="#查找结点" class="headerlink" title="查找结点"></a>查找结点</h3><ul><li><strong>子节点</strong></li></ul><blockquote><p>find() 查找范围是节点的所有子孙节点</p></blockquote><blockquote><p>children() 方法查找子节点</p></blockquote><pre class="line-numbers language-python"><code class="language-python">html <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;div class="box">&lt;div class="init1">&lt;/div>&lt;div class="init2">&lt;p>Tashi&lt;/p>&lt;h1>丛林深处有书和黄金屋&lt;/h1>&lt;/div>&lt;div class="init3">&lt;/div>&lt;/div>"""</span><span class="token keyword">from</span> pyquery <span class="token keyword">import</span> PyQuery <span class="token keyword">as</span> pqdoc <span class="token operator">=</span> pq<span class="token punctuation">(</span>html<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 初始化操作</span><span class="token comment" spellcheck="true"># print(doc('.box'))</span><span class="token comment" spellcheck="true"># print(type(doc('.box'))) # &lt;class 'pyquery.pyquery.PyQuery'></span>f <span class="token operator">=</span> doc<span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">)</span>s <span class="token operator">=</span> f<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'.init2'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token comment" spellcheck="true">## 注释 先找到父节点box 然后通过父节点的find()方法 找子节点为class="init2"的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">html <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;div class="box">&lt;div class="init1">&lt;/div>&lt;div class="init2">&lt;p>Tashi&lt;/p>&lt;h1 id="sign">丛林深处有书和黄金屋&lt;/h1>&lt;/div>&lt;div class="init3">&lt;/div>&lt;/div>"""</span><span class="token keyword">from</span> pyquery <span class="token keyword">import</span> PyQuery <span class="token keyword">as</span> pqdoc <span class="token operator">=</span> pq<span class="token punctuation">(</span>html<span class="token punctuation">)</span>f <span class="token operator">=</span> doc<span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">)</span>s <span class="token operator">=</span> f<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'#sign'</span><span class="token punctuation">)</span> # 子孙节点都可以找到s <span class="token operator">=</span> f<span class="token punctuation">.</span>children<span class="token punctuation">(</span><span class="token string">'#sign'</span><span class="token punctuation">)</span> # 找不到 只可以寻找子节点<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>父节点</strong></li></ul><blockquote><p>parent() 父节点</p><p>parents() 祖先节点</p></blockquote><ul><li><strong>兄弟节点</strong></li></ul><blockquote><p>siblings()</p></blockquote><h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><pre class="line-numbers language-python"><code class="language-python">html <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;div class="box">&lt;ul class="nav1">&lt;li>&lt;a href="#">百度&lt;/a>&lt;/li>&lt;li>&lt;a href="#">淘宝&lt;/a>&lt;/li>&lt;li>&lt;a href="#">丘比特&lt;/a>&lt;/li>&lt;li>&lt;a href="#">Python&lt;/a>&lt;/li>&lt;li>&lt;a href="#">Tashi&lt;/a>&lt;/li>&lt;/ul>&lt;ul class="nav2">&lt;ol>&lt;li>Gulu&lt;/li>&lt;li>Heng&lt;/li>&lt;/ol>&lt;/ul>&lt;/div>"""</span><span class="token keyword">from</span> pyquery <span class="token keyword">import</span> PyQuery <span class="token keyword">as</span> pqdoc <span class="token operator">=</span> pq<span class="token punctuation">(</span>html<span class="token punctuation">)</span>lis <span class="token operator">=</span> doc<span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>lis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lis<span class="token punctuation">)</span>lis <span class="token operator">=</span> doc<span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>lis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> li <span class="token keyword">in</span> lis<span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="获取信息"><a href="#获取信息" class="headerlink" title="获取信息"></a>获取信息</h2><h4 id="获取属性"><a href="#获取属性" class="headerlink" title="获取属性"></a>获取属性</h4><p>.attr(‘属性值’)</p><h4 id="获取文本"><a href="#获取文本" class="headerlink" title="获取文本"></a>获取文本</h4><p>.text()</p><h2 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h2><h4 id="增加节点和移除节点"><a href="#增加节点和移除节点" class="headerlink" title="增加节点和移除节点"></a>增加节点和移除节点</h4><ul><li><p>addClass()</p></li><li><p>removeClass()</p></li></ul><pre class="line-numbers language-python"><code class="language-python">tml <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;div class="box1">&lt;/div>&lt;div class="box2">&lt;/div>"""</span><span class="token keyword">from</span> pyquery <span class="token keyword">import</span> PyQuery <span class="token keyword">as</span> pqdoc <span class="token operator">=</span> pq<span class="token punctuation">(</span>html<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 初始化</span>box <span class="token operator">=</span> doc<span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>box<span class="token punctuation">)</span>box<span class="token punctuation">.</span>addClass<span class="token punctuation">(</span><span class="token string">'haha'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">###</span><span class="token keyword">print</span><span class="token punctuation">(</span>box<span class="token punctuation">)</span>box<span class="token punctuation">.</span>removeClass<span class="token punctuation">(</span><span class="token string">'box1'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">###</span><span class="token keyword">print</span><span class="token punctuation">(</span>box<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">html <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;section>&lt;/section>"""</span><span class="token keyword">from</span> pyquery <span class="token keyword">import</span> PyQuery <span class="token keyword">as</span> pqdoc <span class="token operator">=</span> pq<span class="token punctuation">(</span>html<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 初始化</span>art <span class="token operator">=</span> doc<span class="token punctuation">(</span><span class="token string">'section'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>art<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 寻找</span>art<span class="token punctuation">.</span>attr<span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">,</span> <span class="token string">'artO'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>art<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 增加一个class</span>art<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token string">'这是一个文章'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>art<span class="token punctuation">)</span>art<span class="token punctuation">.</span>html<span class="token punctuation">(</span><span class="token string">"&lt;span>真酷&lt;/span>"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>art<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h2><pre class="line-numbers language-python"><code class="language-python">html <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;div class="box">&lt;ul>&lt;li>1&lt;/li>&lt;li>2&lt;/li>&lt;li>3&lt;/li>&lt;li>4&lt;/li>&lt;li>5&lt;/li>&lt;/ul>&lt;/div>"""</span><span class="token keyword">from</span> pyquery <span class="token keyword">import</span> PyQuery <span class="token keyword">as</span> pqdoc <span class="token operator">=</span> pq<span class="token punctuation">(</span>html<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#初始化</span>li <span class="token operator">=</span> doc<span class="token punctuation">(</span><span class="token string">'li:first-child'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>li <span class="token operator">=</span> doc<span class="token punctuation">(</span><span class="token string">'li:last-child'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>li <span class="token operator">=</span> doc<span class="token punctuation">(</span><span class="token string">'li:nth-child(3)'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
